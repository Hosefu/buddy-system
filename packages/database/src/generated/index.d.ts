
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Flow
 * 
 */
export type Flow = $Result.DefaultSelection<Prisma.$FlowPayload>
/**
 * Model FlowStep
 * 
 */
export type FlowStep = $Result.DefaultSelection<Prisma.$FlowStepPayload>
/**
 * Model FlowComponent
 * 
 */
export type FlowComponent = $Result.DefaultSelection<Prisma.$FlowComponentPayload>
/**
 * Model FlowSnapshot
 * 
 */
export type FlowSnapshot = $Result.DefaultSelection<Prisma.$FlowSnapshotPayload>
/**
 * Model FlowStepSnapshot
 * 
 */
export type FlowStepSnapshot = $Result.DefaultSelection<Prisma.$FlowStepSnapshotPayload>
/**
 * Model ComponentSnapshot
 * 
 */
export type ComponentSnapshot = $Result.DefaultSelection<Prisma.$ComponentSnapshotPayload>
/**
 * Model FlowAssignment
 * 
 */
export type FlowAssignment = $Result.DefaultSelection<Prisma.$FlowAssignmentPayload>
/**
 * Model UserProgress
 * 
 */
export type UserProgress = $Result.DefaultSelection<Prisma.$UserProgressPayload>
/**
 * Model FlowProgress
 * 
 */
export type FlowProgress = $Result.DefaultSelection<Prisma.$FlowProgressPayload>
/**
 * Model StepProgress
 * 
 */
export type StepProgress = $Result.DefaultSelection<Prisma.$StepProgressPayload>
/**
 * Model ComponentProgress
 * 
 */
export type ComponentProgress = $Result.DefaultSelection<Prisma.$ComponentProgressPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Achievement
 * 
 */
export type Achievement = $Result.DefaultSelection<Prisma.$AchievementPayload>
/**
 * Model UserAchievement
 * 
 */
export type UserAchievement = $Result.DefaultSelection<Prisma.$UserAchievementPayload>
/**
 * Model SystemSettings
 * 
 */
export type SystemSettings = $Result.DefaultSelection<Prisma.$SystemSettingsPayload>
/**
 * Model Holiday
 * 
 */
export type Holiday = $Result.DefaultSelection<Prisma.$HolidayPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  BUDDY: 'BUDDY',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const AssignmentStatus: {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type AssignmentStatus = (typeof AssignmentStatus)[keyof typeof AssignmentStatus]


export const FlowStatus: {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

export type FlowStatus = (typeof FlowStatus)[keyof typeof FlowStatus]


export const StepStatus: {
  LOCKED: 'LOCKED',
  UNLOCKED: 'UNLOCKED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED'
};

export type StepStatus = (typeof StepStatus)[keyof typeof StepStatus]


export const ComponentStatus: {
  LOCKED: 'LOCKED',
  UNLOCKED: 'UNLOCKED',
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type ComponentStatus = (typeof ComponentStatus)[keyof typeof ComponentStatus]


export const NotificationPriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type NotificationPriority = (typeof NotificationPriority)[keyof typeof NotificationPriority]


export const NotificationStatus: {
  SCHEDULED: 'SCHEDULED',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type NotificationStatus = (typeof NotificationStatus)[keyof typeof NotificationStatus]


export const AchievementRarity: {
  COMMON: 'COMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

export type AchievementRarity = (typeof AchievementRarity)[keyof typeof AchievementRarity]


export const DayOfWeek: {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

export type DayOfWeek = (typeof DayOfWeek)[keyof typeof DayOfWeek]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type AssignmentStatus = $Enums.AssignmentStatus

export const AssignmentStatus: typeof $Enums.AssignmentStatus

export type FlowStatus = $Enums.FlowStatus

export const FlowStatus: typeof $Enums.FlowStatus

export type StepStatus = $Enums.StepStatus

export const StepStatus: typeof $Enums.StepStatus

export type ComponentStatus = $Enums.ComponentStatus

export const ComponentStatus: typeof $Enums.ComponentStatus

export type NotificationPriority = $Enums.NotificationPriority

export const NotificationPriority: typeof $Enums.NotificationPriority

export type NotificationStatus = $Enums.NotificationStatus

export const NotificationStatus: typeof $Enums.NotificationStatus

export type AchievementRarity = $Enums.AchievementRarity

export const AchievementRarity: typeof $Enums.AchievementRarity

export type DayOfWeek = $Enums.DayOfWeek

export const DayOfWeek: typeof $Enums.DayOfWeek

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flow`: Exposes CRUD operations for the **Flow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Flows
    * const flows = await prisma.flow.findMany()
    * ```
    */
  get flow(): Prisma.FlowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flowStep`: Exposes CRUD operations for the **FlowStep** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlowSteps
    * const flowSteps = await prisma.flowStep.findMany()
    * ```
    */
  get flowStep(): Prisma.FlowStepDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flowComponent`: Exposes CRUD operations for the **FlowComponent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlowComponents
    * const flowComponents = await prisma.flowComponent.findMany()
    * ```
    */
  get flowComponent(): Prisma.FlowComponentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flowSnapshot`: Exposes CRUD operations for the **FlowSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlowSnapshots
    * const flowSnapshots = await prisma.flowSnapshot.findMany()
    * ```
    */
  get flowSnapshot(): Prisma.FlowSnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flowStepSnapshot`: Exposes CRUD operations for the **FlowStepSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlowStepSnapshots
    * const flowStepSnapshots = await prisma.flowStepSnapshot.findMany()
    * ```
    */
  get flowStepSnapshot(): Prisma.FlowStepSnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.componentSnapshot`: Exposes CRUD operations for the **ComponentSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentSnapshots
    * const componentSnapshots = await prisma.componentSnapshot.findMany()
    * ```
    */
  get componentSnapshot(): Prisma.ComponentSnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flowAssignment`: Exposes CRUD operations for the **FlowAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlowAssignments
    * const flowAssignments = await prisma.flowAssignment.findMany()
    * ```
    */
  get flowAssignment(): Prisma.FlowAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProgress`: Exposes CRUD operations for the **UserProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProgresses
    * const userProgresses = await prisma.userProgress.findMany()
    * ```
    */
  get userProgress(): Prisma.UserProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flowProgress`: Exposes CRUD operations for the **FlowProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FlowProgresses
    * const flowProgresses = await prisma.flowProgress.findMany()
    * ```
    */
  get flowProgress(): Prisma.FlowProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stepProgress`: Exposes CRUD operations for the **StepProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StepProgresses
    * const stepProgresses = await prisma.stepProgress.findMany()
    * ```
    */
  get stepProgress(): Prisma.StepProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.componentProgress`: Exposes CRUD operations for the **ComponentProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComponentProgresses
    * const componentProgresses = await prisma.componentProgress.findMany()
    * ```
    */
  get componentProgress(): Prisma.ComponentProgressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.achievement`: Exposes CRUD operations for the **Achievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Achievements
    * const achievements = await prisma.achievement.findMany()
    * ```
    */
  get achievement(): Prisma.AchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userAchievement`: Exposes CRUD operations for the **UserAchievement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserAchievements
    * const userAchievements = await prisma.userAchievement.findMany()
    * ```
    */
  get userAchievement(): Prisma.UserAchievementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemSettings`: Exposes CRUD operations for the **SystemSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSettings.findMany()
    * ```
    */
  get systemSettings(): Prisma.SystemSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.holiday`: Exposes CRUD operations for the **Holiday** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Holidays
    * const holidays = await prisma.holiday.findMany()
    * ```
    */
  get holiday(): Prisma.HolidayDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Flow: 'Flow',
    FlowStep: 'FlowStep',
    FlowComponent: 'FlowComponent',
    FlowSnapshot: 'FlowSnapshot',
    FlowStepSnapshot: 'FlowStepSnapshot',
    ComponentSnapshot: 'ComponentSnapshot',
    FlowAssignment: 'FlowAssignment',
    UserProgress: 'UserProgress',
    FlowProgress: 'FlowProgress',
    StepProgress: 'StepProgress',
    ComponentProgress: 'ComponentProgress',
    Notification: 'Notification',
    Achievement: 'Achievement',
    UserAchievement: 'UserAchievement',
    SystemSettings: 'SystemSettings',
    Holiday: 'Holiday'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "flow" | "flowStep" | "flowComponent" | "flowSnapshot" | "flowStepSnapshot" | "componentSnapshot" | "flowAssignment" | "userProgress" | "flowProgress" | "stepProgress" | "componentProgress" | "notification" | "achievement" | "userAchievement" | "systemSettings" | "holiday"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Flow: {
        payload: Prisma.$FlowPayload<ExtArgs>
        fields: Prisma.FlowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>
          }
          findFirst: {
            args: Prisma.FlowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>
          }
          findMany: {
            args: Prisma.FlowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>[]
          }
          create: {
            args: Prisma.FlowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>
          }
          createMany: {
            args: Prisma.FlowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>[]
          }
          delete: {
            args: Prisma.FlowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>
          }
          update: {
            args: Prisma.FlowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>
          }
          deleteMany: {
            args: Prisma.FlowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>[]
          }
          upsert: {
            args: Prisma.FlowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowPayload>
          }
          aggregate: {
            args: Prisma.FlowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlow>
          }
          groupBy: {
            args: Prisma.FlowGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowCountArgs<ExtArgs>
            result: $Utils.Optional<FlowCountAggregateOutputType> | number
          }
        }
      }
      FlowStep: {
        payload: Prisma.$FlowStepPayload<ExtArgs>
        fields: Prisma.FlowStepFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowStepFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowStepFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>
          }
          findFirst: {
            args: Prisma.FlowStepFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowStepFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>
          }
          findMany: {
            args: Prisma.FlowStepFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>[]
          }
          create: {
            args: Prisma.FlowStepCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>
          }
          createMany: {
            args: Prisma.FlowStepCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowStepCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>[]
          }
          delete: {
            args: Prisma.FlowStepDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>
          }
          update: {
            args: Prisma.FlowStepUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>
          }
          deleteMany: {
            args: Prisma.FlowStepDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowStepUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowStepUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>[]
          }
          upsert: {
            args: Prisma.FlowStepUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepPayload>
          }
          aggregate: {
            args: Prisma.FlowStepAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlowStep>
          }
          groupBy: {
            args: Prisma.FlowStepGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowStepGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowStepCountArgs<ExtArgs>
            result: $Utils.Optional<FlowStepCountAggregateOutputType> | number
          }
        }
      }
      FlowComponent: {
        payload: Prisma.$FlowComponentPayload<ExtArgs>
        fields: Prisma.FlowComponentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowComponentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowComponentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>
          }
          findFirst: {
            args: Prisma.FlowComponentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowComponentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>
          }
          findMany: {
            args: Prisma.FlowComponentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>[]
          }
          create: {
            args: Prisma.FlowComponentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>
          }
          createMany: {
            args: Prisma.FlowComponentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowComponentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>[]
          }
          delete: {
            args: Prisma.FlowComponentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>
          }
          update: {
            args: Prisma.FlowComponentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>
          }
          deleteMany: {
            args: Prisma.FlowComponentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowComponentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowComponentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>[]
          }
          upsert: {
            args: Prisma.FlowComponentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowComponentPayload>
          }
          aggregate: {
            args: Prisma.FlowComponentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlowComponent>
          }
          groupBy: {
            args: Prisma.FlowComponentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowComponentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowComponentCountArgs<ExtArgs>
            result: $Utils.Optional<FlowComponentCountAggregateOutputType> | number
          }
        }
      }
      FlowSnapshot: {
        payload: Prisma.$FlowSnapshotPayload<ExtArgs>
        fields: Prisma.FlowSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>
          }
          findFirst: {
            args: Prisma.FlowSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>
          }
          findMany: {
            args: Prisma.FlowSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>[]
          }
          create: {
            args: Prisma.FlowSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>
          }
          createMany: {
            args: Prisma.FlowSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>[]
          }
          delete: {
            args: Prisma.FlowSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>
          }
          update: {
            args: Prisma.FlowSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.FlowSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowSnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>[]
          }
          upsert: {
            args: Prisma.FlowSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowSnapshotPayload>
          }
          aggregate: {
            args: Prisma.FlowSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlowSnapshot>
          }
          groupBy: {
            args: Prisma.FlowSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<FlowSnapshotCountAggregateOutputType> | number
          }
        }
      }
      FlowStepSnapshot: {
        payload: Prisma.$FlowStepSnapshotPayload<ExtArgs>
        fields: Prisma.FlowStepSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowStepSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowStepSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>
          }
          findFirst: {
            args: Prisma.FlowStepSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowStepSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>
          }
          findMany: {
            args: Prisma.FlowStepSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>[]
          }
          create: {
            args: Prisma.FlowStepSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>
          }
          createMany: {
            args: Prisma.FlowStepSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowStepSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>[]
          }
          delete: {
            args: Prisma.FlowStepSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>
          }
          update: {
            args: Prisma.FlowStepSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.FlowStepSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowStepSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowStepSnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>[]
          }
          upsert: {
            args: Prisma.FlowStepSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowStepSnapshotPayload>
          }
          aggregate: {
            args: Prisma.FlowStepSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlowStepSnapshot>
          }
          groupBy: {
            args: Prisma.FlowStepSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowStepSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowStepSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<FlowStepSnapshotCountAggregateOutputType> | number
          }
        }
      }
      ComponentSnapshot: {
        payload: Prisma.$ComponentSnapshotPayload<ExtArgs>
        fields: Prisma.ComponentSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>
          }
          findFirst: {
            args: Prisma.ComponentSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>
          }
          findMany: {
            args: Prisma.ComponentSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>[]
          }
          create: {
            args: Prisma.ComponentSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>
          }
          createMany: {
            args: Prisma.ComponentSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>[]
          }
          delete: {
            args: Prisma.ComponentSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>
          }
          update: {
            args: Prisma.ComponentSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.ComponentSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ComponentSnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>[]
          }
          upsert: {
            args: Prisma.ComponentSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentSnapshotPayload>
          }
          aggregate: {
            args: Prisma.ComponentSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentSnapshot>
          }
          groupBy: {
            args: Prisma.ComponentSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentSnapshotCountAggregateOutputType> | number
          }
        }
      }
      FlowAssignment: {
        payload: Prisma.$FlowAssignmentPayload<ExtArgs>
        fields: Prisma.FlowAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>
          }
          findFirst: {
            args: Prisma.FlowAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>
          }
          findMany: {
            args: Prisma.FlowAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>[]
          }
          create: {
            args: Prisma.FlowAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>
          }
          createMany: {
            args: Prisma.FlowAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>[]
          }
          delete: {
            args: Prisma.FlowAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>
          }
          update: {
            args: Prisma.FlowAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.FlowAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.FlowAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowAssignmentPayload>
          }
          aggregate: {
            args: Prisma.FlowAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlowAssignment>
          }
          groupBy: {
            args: Prisma.FlowAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<FlowAssignmentCountAggregateOutputType> | number
          }
        }
      }
      UserProgress: {
        payload: Prisma.$UserProgressPayload<ExtArgs>
        fields: Prisma.UserProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          findFirst: {
            args: Prisma.UserProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          findMany: {
            args: Prisma.UserProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>[]
          }
          create: {
            args: Prisma.UserProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          createMany: {
            args: Prisma.UserProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>[]
          }
          delete: {
            args: Prisma.UserProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          update: {
            args: Prisma.UserProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          deleteMany: {
            args: Prisma.UserProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>[]
          }
          upsert: {
            args: Prisma.UserProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProgressPayload>
          }
          aggregate: {
            args: Prisma.UserProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProgress>
          }
          groupBy: {
            args: Prisma.UserProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProgressCountArgs<ExtArgs>
            result: $Utils.Optional<UserProgressCountAggregateOutputType> | number
          }
        }
      }
      FlowProgress: {
        payload: Prisma.$FlowProgressPayload<ExtArgs>
        fields: Prisma.FlowProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>
          }
          findFirst: {
            args: Prisma.FlowProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>
          }
          findMany: {
            args: Prisma.FlowProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>[]
          }
          create: {
            args: Prisma.FlowProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>
          }
          createMany: {
            args: Prisma.FlowProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>[]
          }
          delete: {
            args: Prisma.FlowProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>
          }
          update: {
            args: Prisma.FlowProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>
          }
          deleteMany: {
            args: Prisma.FlowProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>[]
          }
          upsert: {
            args: Prisma.FlowProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowProgressPayload>
          }
          aggregate: {
            args: Prisma.FlowProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlowProgress>
          }
          groupBy: {
            args: Prisma.FlowProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowProgressCountArgs<ExtArgs>
            result: $Utils.Optional<FlowProgressCountAggregateOutputType> | number
          }
        }
      }
      StepProgress: {
        payload: Prisma.$StepProgressPayload<ExtArgs>
        fields: Prisma.StepProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StepProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StepProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>
          }
          findFirst: {
            args: Prisma.StepProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StepProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>
          }
          findMany: {
            args: Prisma.StepProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>[]
          }
          create: {
            args: Prisma.StepProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>
          }
          createMany: {
            args: Prisma.StepProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StepProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>[]
          }
          delete: {
            args: Prisma.StepProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>
          }
          update: {
            args: Prisma.StepProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>
          }
          deleteMany: {
            args: Prisma.StepProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StepProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StepProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>[]
          }
          upsert: {
            args: Prisma.StepProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StepProgressPayload>
          }
          aggregate: {
            args: Prisma.StepProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStepProgress>
          }
          groupBy: {
            args: Prisma.StepProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<StepProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.StepProgressCountArgs<ExtArgs>
            result: $Utils.Optional<StepProgressCountAggregateOutputType> | number
          }
        }
      }
      ComponentProgress: {
        payload: Prisma.$ComponentProgressPayload<ExtArgs>
        fields: Prisma.ComponentProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComponentProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComponentProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>
          }
          findFirst: {
            args: Prisma.ComponentProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComponentProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>
          }
          findMany: {
            args: Prisma.ComponentProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>[]
          }
          create: {
            args: Prisma.ComponentProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>
          }
          createMany: {
            args: Prisma.ComponentProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ComponentProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>[]
          }
          delete: {
            args: Prisma.ComponentProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>
          }
          update: {
            args: Prisma.ComponentProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>
          }
          deleteMany: {
            args: Prisma.ComponentProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComponentProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ComponentProgressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>[]
          }
          upsert: {
            args: Prisma.ComponentProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComponentProgressPayload>
          }
          aggregate: {
            args: Prisma.ComponentProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComponentProgress>
          }
          groupBy: {
            args: Prisma.ComponentProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComponentProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComponentProgressCountArgs<ExtArgs>
            result: $Utils.Optional<ComponentProgressCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Achievement: {
        payload: Prisma.$AchievementPayload<ExtArgs>
        fields: Prisma.AchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findFirst: {
            args: Prisma.AchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          findMany: {
            args: Prisma.AchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          create: {
            args: Prisma.AchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          createMany: {
            args: Prisma.AchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          delete: {
            args: Prisma.AchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          update: {
            args: Prisma.AchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          deleteMany: {
            args: Prisma.AchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>[]
          }
          upsert: {
            args: Prisma.AchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AchievementPayload>
          }
          aggregate: {
            args: Prisma.AchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAchievement>
          }
          groupBy: {
            args: Prisma.AchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AchievementCountArgs<ExtArgs>
            result: $Utils.Optional<AchievementCountAggregateOutputType> | number
          }
        }
      }
      UserAchievement: {
        payload: Prisma.$UserAchievementPayload<ExtArgs>
        fields: Prisma.UserAchievementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserAchievementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserAchievementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findFirst: {
            args: Prisma.UserAchievementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserAchievementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          findMany: {
            args: Prisma.UserAchievementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          create: {
            args: Prisma.UserAchievementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          createMany: {
            args: Prisma.UserAchievementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserAchievementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          delete: {
            args: Prisma.UserAchievementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          update: {
            args: Prisma.UserAchievementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          deleteMany: {
            args: Prisma.UserAchievementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserAchievementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserAchievementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>[]
          }
          upsert: {
            args: Prisma.UserAchievementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserAchievementPayload>
          }
          aggregate: {
            args: Prisma.UserAchievementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserAchievement>
          }
          groupBy: {
            args: Prisma.UserAchievementGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserAchievementCountArgs<ExtArgs>
            result: $Utils.Optional<UserAchievementCountAggregateOutputType> | number
          }
        }
      }
      SystemSettings: {
        payload: Prisma.$SystemSettingsPayload<ExtArgs>
        fields: Prisma.SystemSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findMany: {
            args: Prisma.SystemSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          create: {
            args: Prisma.SystemSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          createMany: {
            args: Prisma.SystemSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          update: {
            args: Prisma.SystemSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          upsert: {
            args: Prisma.SystemSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSettings>
          }
          groupBy: {
            args: Prisma.SystemSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsCountAggregateOutputType> | number
          }
        }
      }
      Holiday: {
        payload: Prisma.$HolidayPayload<ExtArgs>
        fields: Prisma.HolidayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HolidayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HolidayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          findFirst: {
            args: Prisma.HolidayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HolidayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          findMany: {
            args: Prisma.HolidayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>[]
          }
          create: {
            args: Prisma.HolidayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          createMany: {
            args: Prisma.HolidayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HolidayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>[]
          }
          delete: {
            args: Prisma.HolidayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          update: {
            args: Prisma.HolidayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          deleteMany: {
            args: Prisma.HolidayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HolidayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HolidayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>[]
          }
          upsert: {
            args: Prisma.HolidayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HolidayPayload>
          }
          aggregate: {
            args: Prisma.HolidayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHoliday>
          }
          groupBy: {
            args: Prisma.HolidayGroupByArgs<ExtArgs>
            result: $Utils.Optional<HolidayGroupByOutputType>[]
          }
          count: {
            args: Prisma.HolidayCountArgs<ExtArgs>
            result: $Utils.Optional<HolidayCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    flow?: FlowOmit
    flowStep?: FlowStepOmit
    flowComponent?: FlowComponentOmit
    flowSnapshot?: FlowSnapshotOmit
    flowStepSnapshot?: FlowStepSnapshotOmit
    componentSnapshot?: ComponentSnapshotOmit
    flowAssignment?: FlowAssignmentOmit
    userProgress?: UserProgressOmit
    flowProgress?: FlowProgressOmit
    stepProgress?: StepProgressOmit
    componentProgress?: ComponentProgressOmit
    notification?: NotificationOmit
    achievement?: AchievementOmit
    userAchievement?: UserAchievementOmit
    systemSettings?: SystemSettingsOmit
    holiday?: HolidayOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdFlows: number
    assignedFlowsAsUser: number
    assignedFlowsAsBuddy: number
    notifications: number
    userAchievements: number
    createdNotifications: number
    pausedAssignments: number
    updatedSettings: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdFlows?: boolean | UserCountOutputTypeCountCreatedFlowsArgs
    assignedFlowsAsUser?: boolean | UserCountOutputTypeCountAssignedFlowsAsUserArgs
    assignedFlowsAsBuddy?: boolean | UserCountOutputTypeCountAssignedFlowsAsBuddyArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    userAchievements?: boolean | UserCountOutputTypeCountUserAchievementsArgs
    createdNotifications?: boolean | UserCountOutputTypeCountCreatedNotificationsArgs
    pausedAssignments?: boolean | UserCountOutputTypeCountPausedAssignmentsArgs
    updatedSettings?: boolean | UserCountOutputTypeCountUpdatedSettingsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedFlowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedFlowsAsUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedFlowsAsBuddyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPausedAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
  }


  /**
   * Count Type FlowCountOutputType
   */

  export type FlowCountOutputType = {
    steps: number
    snapshots: number
  }

  export type FlowCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    steps?: boolean | FlowCountOutputTypeCountStepsArgs
    snapshots?: boolean | FlowCountOutputTypeCountSnapshotsArgs
  }

  // Custom InputTypes
  /**
   * FlowCountOutputType without action
   */
  export type FlowCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowCountOutputType
     */
    select?: FlowCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlowCountOutputType without action
   */
  export type FlowCountOutputTypeCountStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowStepWhereInput
  }

  /**
   * FlowCountOutputType without action
   */
  export type FlowCountOutputTypeCountSnapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowSnapshotWhereInput
  }


  /**
   * Count Type FlowStepCountOutputType
   */

  export type FlowStepCountOutputType = {
    components: number
  }

  export type FlowStepCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | FlowStepCountOutputTypeCountComponentsArgs
  }

  // Custom InputTypes
  /**
   * FlowStepCountOutputType without action
   */
  export type FlowStepCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepCountOutputType
     */
    select?: FlowStepCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlowStepCountOutputType without action
   */
  export type FlowStepCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowComponentWhereInput
  }


  /**
   * Count Type FlowSnapshotCountOutputType
   */

  export type FlowSnapshotCountOutputType = {
    steps: number
  }

  export type FlowSnapshotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    steps?: boolean | FlowSnapshotCountOutputTypeCountStepsArgs
  }

  // Custom InputTypes
  /**
   * FlowSnapshotCountOutputType without action
   */
  export type FlowSnapshotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshotCountOutputType
     */
    select?: FlowSnapshotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlowSnapshotCountOutputType without action
   */
  export type FlowSnapshotCountOutputTypeCountStepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowStepSnapshotWhereInput
  }


  /**
   * Count Type FlowStepSnapshotCountOutputType
   */

  export type FlowStepSnapshotCountOutputType = {
    components: number
    progress: number
  }

  export type FlowStepSnapshotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    components?: boolean | FlowStepSnapshotCountOutputTypeCountComponentsArgs
    progress?: boolean | FlowStepSnapshotCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * FlowStepSnapshotCountOutputType without action
   */
  export type FlowStepSnapshotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshotCountOutputType
     */
    select?: FlowStepSnapshotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlowStepSnapshotCountOutputType without action
   */
  export type FlowStepSnapshotCountOutputTypeCountComponentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentSnapshotWhereInput
  }

  /**
   * FlowStepSnapshotCountOutputType without action
   */
  export type FlowStepSnapshotCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepProgressWhereInput
  }


  /**
   * Count Type ComponentSnapshotCountOutputType
   */

  export type ComponentSnapshotCountOutputType = {
    progress: number
  }

  export type ComponentSnapshotCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    progress?: boolean | ComponentSnapshotCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * ComponentSnapshotCountOutputType without action
   */
  export type ComponentSnapshotCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshotCountOutputType
     */
    select?: ComponentSnapshotCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComponentSnapshotCountOutputType without action
   */
  export type ComponentSnapshotCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentProgressWhereInput
  }


  /**
   * Count Type FlowAssignmentCountOutputType
   */

  export type FlowAssignmentCountOutputType = {
    buddies: number
  }

  export type FlowAssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buddies?: boolean | FlowAssignmentCountOutputTypeCountBuddiesArgs
  }

  // Custom InputTypes
  /**
   * FlowAssignmentCountOutputType without action
   */
  export type FlowAssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignmentCountOutputType
     */
    select?: FlowAssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlowAssignmentCountOutputType without action
   */
  export type FlowAssignmentCountOutputTypeCountBuddiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type FlowProgressCountOutputType
   */

  export type FlowProgressCountOutputType = {
    stepsProgress: number
  }

  export type FlowProgressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stepsProgress?: boolean | FlowProgressCountOutputTypeCountStepsProgressArgs
  }

  // Custom InputTypes
  /**
   * FlowProgressCountOutputType without action
   */
  export type FlowProgressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgressCountOutputType
     */
    select?: FlowProgressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FlowProgressCountOutputType without action
   */
  export type FlowProgressCountOutputTypeCountStepsProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepProgressWhereInput
  }


  /**
   * Count Type StepProgressCountOutputType
   */

  export type StepProgressCountOutputType = {
    componentProgress: number
  }

  export type StepProgressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    componentProgress?: boolean | StepProgressCountOutputTypeCountComponentProgressArgs
  }

  // Custom InputTypes
  /**
   * StepProgressCountOutputType without action
   */
  export type StepProgressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgressCountOutputType
     */
    select?: StepProgressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StepProgressCountOutputType without action
   */
  export type StepProgressCountOutputTypeCountComponentProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentProgressWhereInput
  }


  /**
   * Count Type AchievementCountOutputType
   */

  export type AchievementCountOutputType = {
    userAchievements: number
  }

  export type AchievementCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAchievements?: boolean | AchievementCountOutputTypeCountUserAchievementsArgs
  }

  // Custom InputTypes
  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AchievementCountOutputType
     */
    select?: AchievementCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AchievementCountOutputType without action
   */
  export type AchievementCountOutputTypeCountUserAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    telegramId: string | null
    telegramUsername: string | null
    name: string | null
    avatarUrl: string | null
    isActive: boolean | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    telegramId: string | null
    telegramUsername: string | null
    name: string | null
    avatarUrl: string | null
    isActive: boolean | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    telegramId: number
    telegramUsername: number
    name: number
    avatarUrl: number
    isActive: number
    lastLoginAt: number
    roles: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    telegramId?: true
    telegramUsername?: true
    name?: true
    avatarUrl?: true
    isActive?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    telegramId?: true
    telegramUsername?: true
    name?: true
    avatarUrl?: true
    isActive?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    telegramId?: true
    telegramUsername?: true
    name?: true
    avatarUrl?: true
    isActive?: true
    lastLoginAt?: true
    roles?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    telegramId: string
    telegramUsername: string | null
    name: string
    avatarUrl: string | null
    isActive: boolean
    lastLoginAt: Date | null
    roles: $Enums.Role[]
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    telegramId?: boolean
    telegramUsername?: boolean
    name?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    roles?: boolean
    createdFlows?: boolean | User$createdFlowsArgs<ExtArgs>
    assignedFlowsAsUser?: boolean | User$assignedFlowsAsUserArgs<ExtArgs>
    assignedFlowsAsBuddy?: boolean | User$assignedFlowsAsBuddyArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    userAchievements?: boolean | User$userAchievementsArgs<ExtArgs>
    createdNotifications?: boolean | User$createdNotificationsArgs<ExtArgs>
    pausedAssignments?: boolean | User$pausedAssignmentsArgs<ExtArgs>
    updatedSettings?: boolean | User$updatedSettingsArgs<ExtArgs>
    userProgress?: boolean | User$userProgressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    telegramId?: boolean
    telegramUsername?: boolean
    name?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    roles?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    telegramId?: boolean
    telegramUsername?: boolean
    name?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    roles?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    telegramId?: boolean
    telegramUsername?: boolean
    name?: boolean
    avatarUrl?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    roles?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "telegramId" | "telegramUsername" | "name" | "avatarUrl" | "isActive" | "lastLoginAt" | "roles", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdFlows?: boolean | User$createdFlowsArgs<ExtArgs>
    assignedFlowsAsUser?: boolean | User$assignedFlowsAsUserArgs<ExtArgs>
    assignedFlowsAsBuddy?: boolean | User$assignedFlowsAsBuddyArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    userAchievements?: boolean | User$userAchievementsArgs<ExtArgs>
    createdNotifications?: boolean | User$createdNotificationsArgs<ExtArgs>
    pausedAssignments?: boolean | User$pausedAssignmentsArgs<ExtArgs>
    updatedSettings?: boolean | User$updatedSettingsArgs<ExtArgs>
    userProgress?: boolean | User$userProgressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdFlows: Prisma.$FlowPayload<ExtArgs>[]
      assignedFlowsAsUser: Prisma.$FlowAssignmentPayload<ExtArgs>[]
      assignedFlowsAsBuddy: Prisma.$FlowAssignmentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      userAchievements: Prisma.$UserAchievementPayload<ExtArgs>[]
      createdNotifications: Prisma.$NotificationPayload<ExtArgs>[]
      pausedAssignments: Prisma.$FlowAssignmentPayload<ExtArgs>[]
      updatedSettings: Prisma.$SystemSettingsPayload<ExtArgs>[]
      userProgress: Prisma.$UserProgressPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      telegramId: string
      telegramUsername: string | null
      name: string
      avatarUrl: string | null
      isActive: boolean
      lastLoginAt: Date | null
      roles: $Enums.Role[]
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdFlows<T extends User$createdFlowsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdFlowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedFlowsAsUser<T extends User$assignedFlowsAsUserArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedFlowsAsUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedFlowsAsBuddy<T extends User$assignedFlowsAsBuddyArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedFlowsAsBuddyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userAchievements<T extends User$userAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, User$userAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdNotifications<T extends User$createdNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pausedAssignments<T extends User$pausedAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$pausedAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    updatedSettings<T extends User$updatedSettingsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedSettingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userProgress<T extends User$userProgressArgs<ExtArgs> = {}>(args?: Subset<T, User$userProgressArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly telegramId: FieldRef<"User", 'String'>
    readonly telegramUsername: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly roles: FieldRef<"User", 'Role[]'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.createdFlows
   */
  export type User$createdFlowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    where?: FlowWhereInput
    orderBy?: FlowOrderByWithRelationInput | FlowOrderByWithRelationInput[]
    cursor?: FlowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowScalarFieldEnum | FlowScalarFieldEnum[]
  }

  /**
   * User.assignedFlowsAsUser
   */
  export type User$assignedFlowsAsUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    where?: FlowAssignmentWhereInput
    orderBy?: FlowAssignmentOrderByWithRelationInput | FlowAssignmentOrderByWithRelationInput[]
    cursor?: FlowAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowAssignmentScalarFieldEnum | FlowAssignmentScalarFieldEnum[]
  }

  /**
   * User.assignedFlowsAsBuddy
   */
  export type User$assignedFlowsAsBuddyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    where?: FlowAssignmentWhereInput
    orderBy?: FlowAssignmentOrderByWithRelationInput | FlowAssignmentOrderByWithRelationInput[]
    cursor?: FlowAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowAssignmentScalarFieldEnum | FlowAssignmentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.userAchievements
   */
  export type User$userAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * User.createdNotifications
   */
  export type User$createdNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.pausedAssignments
   */
  export type User$pausedAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    where?: FlowAssignmentWhereInput
    orderBy?: FlowAssignmentOrderByWithRelationInput | FlowAssignmentOrderByWithRelationInput[]
    cursor?: FlowAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowAssignmentScalarFieldEnum | FlowAssignmentScalarFieldEnum[]
  }

  /**
   * User.updatedSettings
   */
  export type User$updatedSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    cursor?: SystemSettingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * User.userProgress
   */
  export type User$userProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    where?: UserProgressWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Flow
   */

  export type AggregateFlow = {
    _count: FlowCountAggregateOutputType | null
    _avg: FlowAvgAggregateOutputType | null
    _sum: FlowSumAggregateOutputType | null
    _min: FlowMinAggregateOutputType | null
    _max: FlowMaxAggregateOutputType | null
  }

  export type FlowAvgAggregateOutputType = {
    defaultDeadlineDays: number | null
    stepsCount: number | null
  }

  export type FlowSumAggregateOutputType = {
    defaultDeadlineDays: number | null
    stepsCount: number | null
  }

  export type FlowMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    version: string | null
    title: string | null
    description: string | null
    isActive: boolean | null
    defaultDeadlineDays: number | null
    stepsCount: number | null
    creatorId: string | null
  }

  export type FlowMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    version: string | null
    title: string | null
    description: string | null
    isActive: boolean | null
    defaultDeadlineDays: number | null
    stepsCount: number | null
    creatorId: string | null
  }

  export type FlowCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    version: number
    title: number
    description: number
    isActive: number
    defaultDeadlineDays: number
    stepsCount: number
    creatorId: number
    _all: number
  }


  export type FlowAvgAggregateInputType = {
    defaultDeadlineDays?: true
    stepsCount?: true
  }

  export type FlowSumAggregateInputType = {
    defaultDeadlineDays?: true
    stepsCount?: true
  }

  export type FlowMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    version?: true
    title?: true
    description?: true
    isActive?: true
    defaultDeadlineDays?: true
    stepsCount?: true
    creatorId?: true
  }

  export type FlowMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    version?: true
    title?: true
    description?: true
    isActive?: true
    defaultDeadlineDays?: true
    stepsCount?: true
    creatorId?: true
  }

  export type FlowCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    version?: true
    title?: true
    description?: true
    isActive?: true
    defaultDeadlineDays?: true
    stepsCount?: true
    creatorId?: true
    _all?: true
  }

  export type FlowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Flow to aggregate.
     */
    where?: FlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flows to fetch.
     */
    orderBy?: FlowOrderByWithRelationInput | FlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Flows
    **/
    _count?: true | FlowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowMaxAggregateInputType
  }

  export type GetFlowAggregateType<T extends FlowAggregateArgs> = {
        [P in keyof T & keyof AggregateFlow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlow[P]>
      : GetScalarType<T[P], AggregateFlow[P]>
  }




  export type FlowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowWhereInput
    orderBy?: FlowOrderByWithAggregationInput | FlowOrderByWithAggregationInput[]
    by: FlowScalarFieldEnum[] | FlowScalarFieldEnum
    having?: FlowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowCountAggregateInputType | true
    _avg?: FlowAvgAggregateInputType
    _sum?: FlowSumAggregateInputType
    _min?: FlowMinAggregateInputType
    _max?: FlowMaxAggregateInputType
  }

  export type FlowGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    version: string
    title: string
    description: string
    isActive: boolean
    defaultDeadlineDays: number | null
    stepsCount: number
    creatorId: string
    _count: FlowCountAggregateOutputType | null
    _avg: FlowAvgAggregateOutputType | null
    _sum: FlowSumAggregateOutputType | null
    _min: FlowMinAggregateOutputType | null
    _max: FlowMaxAggregateOutputType | null
  }

  type GetFlowGroupByPayload<T extends FlowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowGroupByOutputType[P]>
            : GetScalarType<T[P], FlowGroupByOutputType[P]>
        }
      >
    >


  export type FlowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    isActive?: boolean
    defaultDeadlineDays?: boolean
    stepsCount?: boolean
    creatorId?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    steps?: boolean | Flow$stepsArgs<ExtArgs>
    snapshots?: boolean | Flow$snapshotsArgs<ExtArgs>
    _count?: boolean | FlowCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flow"]>

  export type FlowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    isActive?: boolean
    defaultDeadlineDays?: boolean
    stepsCount?: boolean
    creatorId?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flow"]>

  export type FlowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    isActive?: boolean
    defaultDeadlineDays?: boolean
    stepsCount?: boolean
    creatorId?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flow"]>

  export type FlowSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    version?: boolean
    title?: boolean
    description?: boolean
    isActive?: boolean
    defaultDeadlineDays?: boolean
    stepsCount?: boolean
    creatorId?: boolean
  }

  export type FlowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "version" | "title" | "description" | "isActive" | "defaultDeadlineDays" | "stepsCount" | "creatorId", ExtArgs["result"]["flow"]>
  export type FlowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    steps?: boolean | Flow$stepsArgs<ExtArgs>
    snapshots?: boolean | Flow$snapshotsArgs<ExtArgs>
    _count?: boolean | FlowCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FlowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FlowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Flow"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      steps: Prisma.$FlowStepPayload<ExtArgs>[]
      snapshots: Prisma.$FlowSnapshotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      version: string
      title: string
      description: string
      isActive: boolean
      defaultDeadlineDays: number | null
      stepsCount: number
      creatorId: string
    }, ExtArgs["result"]["flow"]>
    composites: {}
  }

  type FlowGetPayload<S extends boolean | null | undefined | FlowDefaultArgs> = $Result.GetResult<Prisma.$FlowPayload, S>

  type FlowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowCountAggregateInputType | true
    }

  export interface FlowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Flow'], meta: { name: 'Flow' } }
    /**
     * Find zero or one Flow that matches the filter.
     * @param {FlowFindUniqueArgs} args - Arguments to find a Flow
     * @example
     * // Get one Flow
     * const flow = await prisma.flow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowFindUniqueArgs>(args: SelectSubset<T, FlowFindUniqueArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Flow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowFindUniqueOrThrowArgs} args - Arguments to find a Flow
     * @example
     * // Get one Flow
     * const flow = await prisma.flow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Flow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowFindFirstArgs} args - Arguments to find a Flow
     * @example
     * // Get one Flow
     * const flow = await prisma.flow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowFindFirstArgs>(args?: SelectSubset<T, FlowFindFirstArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Flow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowFindFirstOrThrowArgs} args - Arguments to find a Flow
     * @example
     * // Get one Flow
     * const flow = await prisma.flow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Flows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Flows
     * const flows = await prisma.flow.findMany()
     * 
     * // Get first 10 Flows
     * const flows = await prisma.flow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flowWithIdOnly = await prisma.flow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlowFindManyArgs>(args?: SelectSubset<T, FlowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Flow.
     * @param {FlowCreateArgs} args - Arguments to create a Flow.
     * @example
     * // Create one Flow
     * const Flow = await prisma.flow.create({
     *   data: {
     *     // ... data to create a Flow
     *   }
     * })
     * 
     */
    create<T extends FlowCreateArgs>(args: SelectSubset<T, FlowCreateArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Flows.
     * @param {FlowCreateManyArgs} args - Arguments to create many Flows.
     * @example
     * // Create many Flows
     * const flow = await prisma.flow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowCreateManyArgs>(args?: SelectSubset<T, FlowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Flows and returns the data saved in the database.
     * @param {FlowCreateManyAndReturnArgs} args - Arguments to create many Flows.
     * @example
     * // Create many Flows
     * const flow = await prisma.flow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Flows and only return the `id`
     * const flowWithIdOnly = await prisma.flow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Flow.
     * @param {FlowDeleteArgs} args - Arguments to delete one Flow.
     * @example
     * // Delete one Flow
     * const Flow = await prisma.flow.delete({
     *   where: {
     *     // ... filter to delete one Flow
     *   }
     * })
     * 
     */
    delete<T extends FlowDeleteArgs>(args: SelectSubset<T, FlowDeleteArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Flow.
     * @param {FlowUpdateArgs} args - Arguments to update one Flow.
     * @example
     * // Update one Flow
     * const flow = await prisma.flow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowUpdateArgs>(args: SelectSubset<T, FlowUpdateArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Flows.
     * @param {FlowDeleteManyArgs} args - Arguments to filter Flows to delete.
     * @example
     * // Delete a few Flows
     * const { count } = await prisma.flow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowDeleteManyArgs>(args?: SelectSubset<T, FlowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Flows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Flows
     * const flow = await prisma.flow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowUpdateManyArgs>(args: SelectSubset<T, FlowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Flows and returns the data updated in the database.
     * @param {FlowUpdateManyAndReturnArgs} args - Arguments to update many Flows.
     * @example
     * // Update many Flows
     * const flow = await prisma.flow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Flows and only return the `id`
     * const flowWithIdOnly = await prisma.flow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Flow.
     * @param {FlowUpsertArgs} args - Arguments to update or create a Flow.
     * @example
     * // Update or create a Flow
     * const flow = await prisma.flow.upsert({
     *   create: {
     *     // ... data to create a Flow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Flow we want to update
     *   }
     * })
     */
    upsert<T extends FlowUpsertArgs>(args: SelectSubset<T, FlowUpsertArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Flows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowCountArgs} args - Arguments to filter Flows to count.
     * @example
     * // Count the number of Flows
     * const count = await prisma.flow.count({
     *   where: {
     *     // ... the filter for the Flows we want to count
     *   }
     * })
    **/
    count<T extends FlowCountArgs>(
      args?: Subset<T, FlowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Flow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowAggregateArgs>(args: Subset<T, FlowAggregateArgs>): Prisma.PrismaPromise<GetFlowAggregateType<T>>

    /**
     * Group by Flow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowGroupByArgs['orderBy'] }
        : { orderBy?: FlowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Flow model
   */
  readonly fields: FlowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Flow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    steps<T extends Flow$stepsArgs<ExtArgs> = {}>(args?: Subset<T, Flow$stepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    snapshots<T extends Flow$snapshotsArgs<ExtArgs> = {}>(args?: Subset<T, Flow$snapshotsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Flow model
   */
  interface FlowFieldRefs {
    readonly id: FieldRef<"Flow", 'String'>
    readonly createdAt: FieldRef<"Flow", 'DateTime'>
    readonly updatedAt: FieldRef<"Flow", 'DateTime'>
    readonly version: FieldRef<"Flow", 'String'>
    readonly title: FieldRef<"Flow", 'String'>
    readonly description: FieldRef<"Flow", 'String'>
    readonly isActive: FieldRef<"Flow", 'Boolean'>
    readonly defaultDeadlineDays: FieldRef<"Flow", 'Int'>
    readonly stepsCount: FieldRef<"Flow", 'Int'>
    readonly creatorId: FieldRef<"Flow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Flow findUnique
   */
  export type FlowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * Filter, which Flow to fetch.
     */
    where: FlowWhereUniqueInput
  }

  /**
   * Flow findUniqueOrThrow
   */
  export type FlowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * Filter, which Flow to fetch.
     */
    where: FlowWhereUniqueInput
  }

  /**
   * Flow findFirst
   */
  export type FlowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * Filter, which Flow to fetch.
     */
    where?: FlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flows to fetch.
     */
    orderBy?: FlowOrderByWithRelationInput | FlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Flows.
     */
    cursor?: FlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Flows.
     */
    distinct?: FlowScalarFieldEnum | FlowScalarFieldEnum[]
  }

  /**
   * Flow findFirstOrThrow
   */
  export type FlowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * Filter, which Flow to fetch.
     */
    where?: FlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flows to fetch.
     */
    orderBy?: FlowOrderByWithRelationInput | FlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Flows.
     */
    cursor?: FlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Flows.
     */
    distinct?: FlowScalarFieldEnum | FlowScalarFieldEnum[]
  }

  /**
   * Flow findMany
   */
  export type FlowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * Filter, which Flows to fetch.
     */
    where?: FlowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flows to fetch.
     */
    orderBy?: FlowOrderByWithRelationInput | FlowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Flows.
     */
    cursor?: FlowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flows.
     */
    skip?: number
    distinct?: FlowScalarFieldEnum | FlowScalarFieldEnum[]
  }

  /**
   * Flow create
   */
  export type FlowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * The data needed to create a Flow.
     */
    data: XOR<FlowCreateInput, FlowUncheckedCreateInput>
  }

  /**
   * Flow createMany
   */
  export type FlowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Flows.
     */
    data: FlowCreateManyInput | FlowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Flow createManyAndReturn
   */
  export type FlowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * The data used to create many Flows.
     */
    data: FlowCreateManyInput | FlowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Flow update
   */
  export type FlowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * The data needed to update a Flow.
     */
    data: XOR<FlowUpdateInput, FlowUncheckedUpdateInput>
    /**
     * Choose, which Flow to update.
     */
    where: FlowWhereUniqueInput
  }

  /**
   * Flow updateMany
   */
  export type FlowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Flows.
     */
    data: XOR<FlowUpdateManyMutationInput, FlowUncheckedUpdateManyInput>
    /**
     * Filter which Flows to update
     */
    where?: FlowWhereInput
    /**
     * Limit how many Flows to update.
     */
    limit?: number
  }

  /**
   * Flow updateManyAndReturn
   */
  export type FlowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * The data used to update Flows.
     */
    data: XOR<FlowUpdateManyMutationInput, FlowUncheckedUpdateManyInput>
    /**
     * Filter which Flows to update
     */
    where?: FlowWhereInput
    /**
     * Limit how many Flows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Flow upsert
   */
  export type FlowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * The filter to search for the Flow to update in case it exists.
     */
    where: FlowWhereUniqueInput
    /**
     * In case the Flow found by the `where` argument doesn't exist, create a new Flow with this data.
     */
    create: XOR<FlowCreateInput, FlowUncheckedCreateInput>
    /**
     * In case the Flow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowUpdateInput, FlowUncheckedUpdateInput>
  }

  /**
   * Flow delete
   */
  export type FlowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
    /**
     * Filter which Flow to delete.
     */
    where: FlowWhereUniqueInput
  }

  /**
   * Flow deleteMany
   */
  export type FlowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Flows to delete
     */
    where?: FlowWhereInput
    /**
     * Limit how many Flows to delete.
     */
    limit?: number
  }

  /**
   * Flow.steps
   */
  export type Flow$stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    where?: FlowStepWhereInput
    orderBy?: FlowStepOrderByWithRelationInput | FlowStepOrderByWithRelationInput[]
    cursor?: FlowStepWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowStepScalarFieldEnum | FlowStepScalarFieldEnum[]
  }

  /**
   * Flow.snapshots
   */
  export type Flow$snapshotsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    where?: FlowSnapshotWhereInput
    orderBy?: FlowSnapshotOrderByWithRelationInput | FlowSnapshotOrderByWithRelationInput[]
    cursor?: FlowSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowSnapshotScalarFieldEnum | FlowSnapshotScalarFieldEnum[]
  }

  /**
   * Flow without action
   */
  export type FlowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flow
     */
    select?: FlowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flow
     */
    omit?: FlowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowInclude<ExtArgs> | null
  }


  /**
   * Model FlowStep
   */

  export type AggregateFlowStep = {
    _count: FlowStepCountAggregateOutputType | null
    _avg: FlowStepAvgAggregateOutputType | null
    _sum: FlowStepSumAggregateOutputType | null
    _min: FlowStepMinAggregateOutputType | null
    _max: FlowStepMaxAggregateOutputType | null
  }

  export type FlowStepAvgAggregateOutputType = {
    order: number | null
    componentsCount: number | null
  }

  export type FlowStepSumAggregateOutputType = {
    order: number | null
    componentsCount: number | null
  }

  export type FlowStepMinAggregateOutputType = {
    id: string | null
    order: number | null
    title: string | null
    description: string | null
    componentsCount: number | null
    flowId: string | null
  }

  export type FlowStepMaxAggregateOutputType = {
    id: string | null
    order: number | null
    title: string | null
    description: string | null
    componentsCount: number | null
    flowId: string | null
  }

  export type FlowStepCountAggregateOutputType = {
    id: number
    order: number
    title: number
    description: number
    templateComponents: number
    componentsCount: number
    flowId: number
    _all: number
  }


  export type FlowStepAvgAggregateInputType = {
    order?: true
    componentsCount?: true
  }

  export type FlowStepSumAggregateInputType = {
    order?: true
    componentsCount?: true
  }

  export type FlowStepMinAggregateInputType = {
    id?: true
    order?: true
    title?: true
    description?: true
    componentsCount?: true
    flowId?: true
  }

  export type FlowStepMaxAggregateInputType = {
    id?: true
    order?: true
    title?: true
    description?: true
    componentsCount?: true
    flowId?: true
  }

  export type FlowStepCountAggregateInputType = {
    id?: true
    order?: true
    title?: true
    description?: true
    templateComponents?: true
    componentsCount?: true
    flowId?: true
    _all?: true
  }

  export type FlowStepAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowStep to aggregate.
     */
    where?: FlowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSteps to fetch.
     */
    orderBy?: FlowStepOrderByWithRelationInput | FlowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlowSteps
    **/
    _count?: true | FlowStepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlowStepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlowStepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowStepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowStepMaxAggregateInputType
  }

  export type GetFlowStepAggregateType<T extends FlowStepAggregateArgs> = {
        [P in keyof T & keyof AggregateFlowStep]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlowStep[P]>
      : GetScalarType<T[P], AggregateFlowStep[P]>
  }




  export type FlowStepGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowStepWhereInput
    orderBy?: FlowStepOrderByWithAggregationInput | FlowStepOrderByWithAggregationInput[]
    by: FlowStepScalarFieldEnum[] | FlowStepScalarFieldEnum
    having?: FlowStepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowStepCountAggregateInputType | true
    _avg?: FlowStepAvgAggregateInputType
    _sum?: FlowStepSumAggregateInputType
    _min?: FlowStepMinAggregateInputType
    _max?: FlowStepMaxAggregateInputType
  }

  export type FlowStepGroupByOutputType = {
    id: string
    order: number
    title: string
    description: string
    templateComponents: JsonValue[]
    componentsCount: number
    flowId: string
    _count: FlowStepCountAggregateOutputType | null
    _avg: FlowStepAvgAggregateOutputType | null
    _sum: FlowStepSumAggregateOutputType | null
    _min: FlowStepMinAggregateOutputType | null
    _max: FlowStepMaxAggregateOutputType | null
  }

  type GetFlowStepGroupByPayload<T extends FlowStepGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowStepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowStepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowStepGroupByOutputType[P]>
            : GetScalarType<T[P], FlowStepGroupByOutputType[P]>
        }
      >
    >


  export type FlowStepSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    templateComponents?: boolean
    componentsCount?: boolean
    flowId?: boolean
    flow?: boolean | FlowDefaultArgs<ExtArgs>
    components?: boolean | FlowStep$componentsArgs<ExtArgs>
    _count?: boolean | FlowStepCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowStep"]>

  export type FlowStepSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    templateComponents?: boolean
    componentsCount?: boolean
    flowId?: boolean
    flow?: boolean | FlowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowStep"]>

  export type FlowStepSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    templateComponents?: boolean
    componentsCount?: boolean
    flowId?: boolean
    flow?: boolean | FlowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowStep"]>

  export type FlowStepSelectScalar = {
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    templateComponents?: boolean
    componentsCount?: boolean
    flowId?: boolean
  }

  export type FlowStepOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order" | "title" | "description" | "templateComponents" | "componentsCount" | "flowId", ExtArgs["result"]["flowStep"]>
  export type FlowStepInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flow?: boolean | FlowDefaultArgs<ExtArgs>
    components?: boolean | FlowStep$componentsArgs<ExtArgs>
    _count?: boolean | FlowStepCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlowStepIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flow?: boolean | FlowDefaultArgs<ExtArgs>
  }
  export type FlowStepIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    flow?: boolean | FlowDefaultArgs<ExtArgs>
  }

  export type $FlowStepPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlowStep"
    objects: {
      flow: Prisma.$FlowPayload<ExtArgs>
      components: Prisma.$FlowComponentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order: number
      title: string
      description: string
      templateComponents: Prisma.JsonValue[]
      componentsCount: number
      flowId: string
    }, ExtArgs["result"]["flowStep"]>
    composites: {}
  }

  type FlowStepGetPayload<S extends boolean | null | undefined | FlowStepDefaultArgs> = $Result.GetResult<Prisma.$FlowStepPayload, S>

  type FlowStepCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowStepFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowStepCountAggregateInputType | true
    }

  export interface FlowStepDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlowStep'], meta: { name: 'FlowStep' } }
    /**
     * Find zero or one FlowStep that matches the filter.
     * @param {FlowStepFindUniqueArgs} args - Arguments to find a FlowStep
     * @example
     * // Get one FlowStep
     * const flowStep = await prisma.flowStep.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowStepFindUniqueArgs>(args: SelectSubset<T, FlowStepFindUniqueArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlowStep that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowStepFindUniqueOrThrowArgs} args - Arguments to find a FlowStep
     * @example
     * // Get one FlowStep
     * const flowStep = await prisma.flowStep.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowStepFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowStepFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowStep that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepFindFirstArgs} args - Arguments to find a FlowStep
     * @example
     * // Get one FlowStep
     * const flowStep = await prisma.flowStep.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowStepFindFirstArgs>(args?: SelectSubset<T, FlowStepFindFirstArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowStep that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepFindFirstOrThrowArgs} args - Arguments to find a FlowStep
     * @example
     * // Get one FlowStep
     * const flowStep = await prisma.flowStep.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowStepFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowStepFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlowSteps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlowSteps
     * const flowSteps = await prisma.flowStep.findMany()
     * 
     * // Get first 10 FlowSteps
     * const flowSteps = await prisma.flowStep.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flowStepWithIdOnly = await prisma.flowStep.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlowStepFindManyArgs>(args?: SelectSubset<T, FlowStepFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlowStep.
     * @param {FlowStepCreateArgs} args - Arguments to create a FlowStep.
     * @example
     * // Create one FlowStep
     * const FlowStep = await prisma.flowStep.create({
     *   data: {
     *     // ... data to create a FlowStep
     *   }
     * })
     * 
     */
    create<T extends FlowStepCreateArgs>(args: SelectSubset<T, FlowStepCreateArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlowSteps.
     * @param {FlowStepCreateManyArgs} args - Arguments to create many FlowSteps.
     * @example
     * // Create many FlowSteps
     * const flowStep = await prisma.flowStep.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowStepCreateManyArgs>(args?: SelectSubset<T, FlowStepCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlowSteps and returns the data saved in the database.
     * @param {FlowStepCreateManyAndReturnArgs} args - Arguments to create many FlowSteps.
     * @example
     * // Create many FlowSteps
     * const flowStep = await prisma.flowStep.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlowSteps and only return the `id`
     * const flowStepWithIdOnly = await prisma.flowStep.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowStepCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowStepCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlowStep.
     * @param {FlowStepDeleteArgs} args - Arguments to delete one FlowStep.
     * @example
     * // Delete one FlowStep
     * const FlowStep = await prisma.flowStep.delete({
     *   where: {
     *     // ... filter to delete one FlowStep
     *   }
     * })
     * 
     */
    delete<T extends FlowStepDeleteArgs>(args: SelectSubset<T, FlowStepDeleteArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlowStep.
     * @param {FlowStepUpdateArgs} args - Arguments to update one FlowStep.
     * @example
     * // Update one FlowStep
     * const flowStep = await prisma.flowStep.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowStepUpdateArgs>(args: SelectSubset<T, FlowStepUpdateArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlowSteps.
     * @param {FlowStepDeleteManyArgs} args - Arguments to filter FlowSteps to delete.
     * @example
     * // Delete a few FlowSteps
     * const { count } = await prisma.flowStep.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowStepDeleteManyArgs>(args?: SelectSubset<T, FlowStepDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlowSteps
     * const flowStep = await prisma.flowStep.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowStepUpdateManyArgs>(args: SelectSubset<T, FlowStepUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowSteps and returns the data updated in the database.
     * @param {FlowStepUpdateManyAndReturnArgs} args - Arguments to update many FlowSteps.
     * @example
     * // Update many FlowSteps
     * const flowStep = await prisma.flowStep.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlowSteps and only return the `id`
     * const flowStepWithIdOnly = await prisma.flowStep.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowStepUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowStepUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlowStep.
     * @param {FlowStepUpsertArgs} args - Arguments to update or create a FlowStep.
     * @example
     * // Update or create a FlowStep
     * const flowStep = await prisma.flowStep.upsert({
     *   create: {
     *     // ... data to create a FlowStep
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlowStep we want to update
     *   }
     * })
     */
    upsert<T extends FlowStepUpsertArgs>(args: SelectSubset<T, FlowStepUpsertArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlowSteps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepCountArgs} args - Arguments to filter FlowSteps to count.
     * @example
     * // Count the number of FlowSteps
     * const count = await prisma.flowStep.count({
     *   where: {
     *     // ... the filter for the FlowSteps we want to count
     *   }
     * })
    **/
    count<T extends FlowStepCountArgs>(
      args?: Subset<T, FlowStepCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowStepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowStepAggregateArgs>(args: Subset<T, FlowStepAggregateArgs>): Prisma.PrismaPromise<GetFlowStepAggregateType<T>>

    /**
     * Group by FlowStep.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowStepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowStepGroupByArgs['orderBy'] }
        : { orderBy?: FlowStepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowStepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowStepGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlowStep model
   */
  readonly fields: FlowStepFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlowStep.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowStepClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    flow<T extends FlowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowDefaultArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    components<T extends FlowStep$componentsArgs<ExtArgs> = {}>(args?: Subset<T, FlowStep$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlowStep model
   */
  interface FlowStepFieldRefs {
    readonly id: FieldRef<"FlowStep", 'String'>
    readonly order: FieldRef<"FlowStep", 'Int'>
    readonly title: FieldRef<"FlowStep", 'String'>
    readonly description: FieldRef<"FlowStep", 'String'>
    readonly templateComponents: FieldRef<"FlowStep", 'Json[]'>
    readonly componentsCount: FieldRef<"FlowStep", 'Int'>
    readonly flowId: FieldRef<"FlowStep", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FlowStep findUnique
   */
  export type FlowStepFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * Filter, which FlowStep to fetch.
     */
    where: FlowStepWhereUniqueInput
  }

  /**
   * FlowStep findUniqueOrThrow
   */
  export type FlowStepFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * Filter, which FlowStep to fetch.
     */
    where: FlowStepWhereUniqueInput
  }

  /**
   * FlowStep findFirst
   */
  export type FlowStepFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * Filter, which FlowStep to fetch.
     */
    where?: FlowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSteps to fetch.
     */
    orderBy?: FlowStepOrderByWithRelationInput | FlowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowSteps.
     */
    cursor?: FlowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowSteps.
     */
    distinct?: FlowStepScalarFieldEnum | FlowStepScalarFieldEnum[]
  }

  /**
   * FlowStep findFirstOrThrow
   */
  export type FlowStepFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * Filter, which FlowStep to fetch.
     */
    where?: FlowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSteps to fetch.
     */
    orderBy?: FlowStepOrderByWithRelationInput | FlowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowSteps.
     */
    cursor?: FlowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSteps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowSteps.
     */
    distinct?: FlowStepScalarFieldEnum | FlowStepScalarFieldEnum[]
  }

  /**
   * FlowStep findMany
   */
  export type FlowStepFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * Filter, which FlowSteps to fetch.
     */
    where?: FlowStepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSteps to fetch.
     */
    orderBy?: FlowStepOrderByWithRelationInput | FlowStepOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlowSteps.
     */
    cursor?: FlowStepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSteps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSteps.
     */
    skip?: number
    distinct?: FlowStepScalarFieldEnum | FlowStepScalarFieldEnum[]
  }

  /**
   * FlowStep create
   */
  export type FlowStepCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * The data needed to create a FlowStep.
     */
    data: XOR<FlowStepCreateInput, FlowStepUncheckedCreateInput>
  }

  /**
   * FlowStep createMany
   */
  export type FlowStepCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlowSteps.
     */
    data: FlowStepCreateManyInput | FlowStepCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlowStep createManyAndReturn
   */
  export type FlowStepCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * The data used to create many FlowSteps.
     */
    data: FlowStepCreateManyInput | FlowStepCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowStep update
   */
  export type FlowStepUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * The data needed to update a FlowStep.
     */
    data: XOR<FlowStepUpdateInput, FlowStepUncheckedUpdateInput>
    /**
     * Choose, which FlowStep to update.
     */
    where: FlowStepWhereUniqueInput
  }

  /**
   * FlowStep updateMany
   */
  export type FlowStepUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlowSteps.
     */
    data: XOR<FlowStepUpdateManyMutationInput, FlowStepUncheckedUpdateManyInput>
    /**
     * Filter which FlowSteps to update
     */
    where?: FlowStepWhereInput
    /**
     * Limit how many FlowSteps to update.
     */
    limit?: number
  }

  /**
   * FlowStep updateManyAndReturn
   */
  export type FlowStepUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * The data used to update FlowSteps.
     */
    data: XOR<FlowStepUpdateManyMutationInput, FlowStepUncheckedUpdateManyInput>
    /**
     * Filter which FlowSteps to update
     */
    where?: FlowStepWhereInput
    /**
     * Limit how many FlowSteps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowStep upsert
   */
  export type FlowStepUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * The filter to search for the FlowStep to update in case it exists.
     */
    where: FlowStepWhereUniqueInput
    /**
     * In case the FlowStep found by the `where` argument doesn't exist, create a new FlowStep with this data.
     */
    create: XOR<FlowStepCreateInput, FlowStepUncheckedCreateInput>
    /**
     * In case the FlowStep was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowStepUpdateInput, FlowStepUncheckedUpdateInput>
  }

  /**
   * FlowStep delete
   */
  export type FlowStepDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
    /**
     * Filter which FlowStep to delete.
     */
    where: FlowStepWhereUniqueInput
  }

  /**
   * FlowStep deleteMany
   */
  export type FlowStepDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowSteps to delete
     */
    where?: FlowStepWhereInput
    /**
     * Limit how many FlowSteps to delete.
     */
    limit?: number
  }

  /**
   * FlowStep.components
   */
  export type FlowStep$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    where?: FlowComponentWhereInput
    orderBy?: FlowComponentOrderByWithRelationInput | FlowComponentOrderByWithRelationInput[]
    cursor?: FlowComponentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowComponentScalarFieldEnum | FlowComponentScalarFieldEnum[]
  }

  /**
   * FlowStep without action
   */
  export type FlowStepDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStep
     */
    select?: FlowStepSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStep
     */
    omit?: FlowStepOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepInclude<ExtArgs> | null
  }


  /**
   * Model FlowComponent
   */

  export type AggregateFlowComponent = {
    _count: FlowComponentCountAggregateOutputType | null
    _avg: FlowComponentAvgAggregateOutputType | null
    _sum: FlowComponentSumAggregateOutputType | null
    _min: FlowComponentMinAggregateOutputType | null
    _max: FlowComponentMaxAggregateOutputType | null
  }

  export type FlowComponentAvgAggregateOutputType = {
    order: number | null
  }

  export type FlowComponentSumAggregateOutputType = {
    order: number | null
  }

  export type FlowComponentMinAggregateOutputType = {
    id: string | null
    order: number | null
    isRequired: boolean | null
    type: string | null
    typeVersion: string | null
    stepId: string | null
  }

  export type FlowComponentMaxAggregateOutputType = {
    id: string | null
    order: number | null
    isRequired: boolean | null
    type: string | null
    typeVersion: string | null
    stepId: string | null
  }

  export type FlowComponentCountAggregateOutputType = {
    id: number
    order: number
    isRequired: number
    type: number
    typeVersion: number
    data: number
    stepId: number
    _all: number
  }


  export type FlowComponentAvgAggregateInputType = {
    order?: true
  }

  export type FlowComponentSumAggregateInputType = {
    order?: true
  }

  export type FlowComponentMinAggregateInputType = {
    id?: true
    order?: true
    isRequired?: true
    type?: true
    typeVersion?: true
    stepId?: true
  }

  export type FlowComponentMaxAggregateInputType = {
    id?: true
    order?: true
    isRequired?: true
    type?: true
    typeVersion?: true
    stepId?: true
  }

  export type FlowComponentCountAggregateInputType = {
    id?: true
    order?: true
    isRequired?: true
    type?: true
    typeVersion?: true
    data?: true
    stepId?: true
    _all?: true
  }

  export type FlowComponentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowComponent to aggregate.
     */
    where?: FlowComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowComponents to fetch.
     */
    orderBy?: FlowComponentOrderByWithRelationInput | FlowComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlowComponents
    **/
    _count?: true | FlowComponentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlowComponentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlowComponentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowComponentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowComponentMaxAggregateInputType
  }

  export type GetFlowComponentAggregateType<T extends FlowComponentAggregateArgs> = {
        [P in keyof T & keyof AggregateFlowComponent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlowComponent[P]>
      : GetScalarType<T[P], AggregateFlowComponent[P]>
  }




  export type FlowComponentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowComponentWhereInput
    orderBy?: FlowComponentOrderByWithAggregationInput | FlowComponentOrderByWithAggregationInput[]
    by: FlowComponentScalarFieldEnum[] | FlowComponentScalarFieldEnum
    having?: FlowComponentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowComponentCountAggregateInputType | true
    _avg?: FlowComponentAvgAggregateInputType
    _sum?: FlowComponentSumAggregateInputType
    _min?: FlowComponentMinAggregateInputType
    _max?: FlowComponentMaxAggregateInputType
  }

  export type FlowComponentGroupByOutputType = {
    id: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonValue
    stepId: string
    _count: FlowComponentCountAggregateOutputType | null
    _avg: FlowComponentAvgAggregateOutputType | null
    _sum: FlowComponentSumAggregateOutputType | null
    _min: FlowComponentMinAggregateOutputType | null
    _max: FlowComponentMaxAggregateOutputType | null
  }

  type GetFlowComponentGroupByPayload<T extends FlowComponentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowComponentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowComponentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowComponentGroupByOutputType[P]>
            : GetScalarType<T[P], FlowComponentGroupByOutputType[P]>
        }
      >
    >


  export type FlowComponentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
    step?: boolean | FlowStepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowComponent"]>

  export type FlowComponentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
    step?: boolean | FlowStepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowComponent"]>

  export type FlowComponentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
    step?: boolean | FlowStepDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowComponent"]>

  export type FlowComponentSelectScalar = {
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
  }

  export type FlowComponentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order" | "isRequired" | "type" | "typeVersion" | "data" | "stepId", ExtArgs["result"]["flowComponent"]>
  export type FlowComponentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    step?: boolean | FlowStepDefaultArgs<ExtArgs>
  }
  export type FlowComponentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    step?: boolean | FlowStepDefaultArgs<ExtArgs>
  }
  export type FlowComponentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    step?: boolean | FlowStepDefaultArgs<ExtArgs>
  }

  export type $FlowComponentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlowComponent"
    objects: {
      step: Prisma.$FlowStepPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order: number
      isRequired: boolean
      type: string
      typeVersion: string
      data: Prisma.JsonValue
      stepId: string
    }, ExtArgs["result"]["flowComponent"]>
    composites: {}
  }

  type FlowComponentGetPayload<S extends boolean | null | undefined | FlowComponentDefaultArgs> = $Result.GetResult<Prisma.$FlowComponentPayload, S>

  type FlowComponentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowComponentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowComponentCountAggregateInputType | true
    }

  export interface FlowComponentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlowComponent'], meta: { name: 'FlowComponent' } }
    /**
     * Find zero or one FlowComponent that matches the filter.
     * @param {FlowComponentFindUniqueArgs} args - Arguments to find a FlowComponent
     * @example
     * // Get one FlowComponent
     * const flowComponent = await prisma.flowComponent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowComponentFindUniqueArgs>(args: SelectSubset<T, FlowComponentFindUniqueArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlowComponent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowComponentFindUniqueOrThrowArgs} args - Arguments to find a FlowComponent
     * @example
     * // Get one FlowComponent
     * const flowComponent = await prisma.flowComponent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowComponentFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowComponentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowComponent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowComponentFindFirstArgs} args - Arguments to find a FlowComponent
     * @example
     * // Get one FlowComponent
     * const flowComponent = await prisma.flowComponent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowComponentFindFirstArgs>(args?: SelectSubset<T, FlowComponentFindFirstArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowComponent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowComponentFindFirstOrThrowArgs} args - Arguments to find a FlowComponent
     * @example
     * // Get one FlowComponent
     * const flowComponent = await prisma.flowComponent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowComponentFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowComponentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlowComponents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowComponentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlowComponents
     * const flowComponents = await prisma.flowComponent.findMany()
     * 
     * // Get first 10 FlowComponents
     * const flowComponents = await prisma.flowComponent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flowComponentWithIdOnly = await prisma.flowComponent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlowComponentFindManyArgs>(args?: SelectSubset<T, FlowComponentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlowComponent.
     * @param {FlowComponentCreateArgs} args - Arguments to create a FlowComponent.
     * @example
     * // Create one FlowComponent
     * const FlowComponent = await prisma.flowComponent.create({
     *   data: {
     *     // ... data to create a FlowComponent
     *   }
     * })
     * 
     */
    create<T extends FlowComponentCreateArgs>(args: SelectSubset<T, FlowComponentCreateArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlowComponents.
     * @param {FlowComponentCreateManyArgs} args - Arguments to create many FlowComponents.
     * @example
     * // Create many FlowComponents
     * const flowComponent = await prisma.flowComponent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowComponentCreateManyArgs>(args?: SelectSubset<T, FlowComponentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlowComponents and returns the data saved in the database.
     * @param {FlowComponentCreateManyAndReturnArgs} args - Arguments to create many FlowComponents.
     * @example
     * // Create many FlowComponents
     * const flowComponent = await prisma.flowComponent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlowComponents and only return the `id`
     * const flowComponentWithIdOnly = await prisma.flowComponent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowComponentCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowComponentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlowComponent.
     * @param {FlowComponentDeleteArgs} args - Arguments to delete one FlowComponent.
     * @example
     * // Delete one FlowComponent
     * const FlowComponent = await prisma.flowComponent.delete({
     *   where: {
     *     // ... filter to delete one FlowComponent
     *   }
     * })
     * 
     */
    delete<T extends FlowComponentDeleteArgs>(args: SelectSubset<T, FlowComponentDeleteArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlowComponent.
     * @param {FlowComponentUpdateArgs} args - Arguments to update one FlowComponent.
     * @example
     * // Update one FlowComponent
     * const flowComponent = await prisma.flowComponent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowComponentUpdateArgs>(args: SelectSubset<T, FlowComponentUpdateArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlowComponents.
     * @param {FlowComponentDeleteManyArgs} args - Arguments to filter FlowComponents to delete.
     * @example
     * // Delete a few FlowComponents
     * const { count } = await prisma.flowComponent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowComponentDeleteManyArgs>(args?: SelectSubset<T, FlowComponentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowComponentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlowComponents
     * const flowComponent = await prisma.flowComponent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowComponentUpdateManyArgs>(args: SelectSubset<T, FlowComponentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowComponents and returns the data updated in the database.
     * @param {FlowComponentUpdateManyAndReturnArgs} args - Arguments to update many FlowComponents.
     * @example
     * // Update many FlowComponents
     * const flowComponent = await prisma.flowComponent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlowComponents and only return the `id`
     * const flowComponentWithIdOnly = await prisma.flowComponent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowComponentUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowComponentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlowComponent.
     * @param {FlowComponentUpsertArgs} args - Arguments to update or create a FlowComponent.
     * @example
     * // Update or create a FlowComponent
     * const flowComponent = await prisma.flowComponent.upsert({
     *   create: {
     *     // ... data to create a FlowComponent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlowComponent we want to update
     *   }
     * })
     */
    upsert<T extends FlowComponentUpsertArgs>(args: SelectSubset<T, FlowComponentUpsertArgs<ExtArgs>>): Prisma__FlowComponentClient<$Result.GetResult<Prisma.$FlowComponentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlowComponents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowComponentCountArgs} args - Arguments to filter FlowComponents to count.
     * @example
     * // Count the number of FlowComponents
     * const count = await prisma.flowComponent.count({
     *   where: {
     *     // ... the filter for the FlowComponents we want to count
     *   }
     * })
    **/
    count<T extends FlowComponentCountArgs>(
      args?: Subset<T, FlowComponentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowComponentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlowComponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowComponentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowComponentAggregateArgs>(args: Subset<T, FlowComponentAggregateArgs>): Prisma.PrismaPromise<GetFlowComponentAggregateType<T>>

    /**
     * Group by FlowComponent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowComponentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowComponentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowComponentGroupByArgs['orderBy'] }
        : { orderBy?: FlowComponentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowComponentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowComponentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlowComponent model
   */
  readonly fields: FlowComponentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlowComponent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowComponentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    step<T extends FlowStepDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowStepDefaultArgs<ExtArgs>>): Prisma__FlowStepClient<$Result.GetResult<Prisma.$FlowStepPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlowComponent model
   */
  interface FlowComponentFieldRefs {
    readonly id: FieldRef<"FlowComponent", 'String'>
    readonly order: FieldRef<"FlowComponent", 'Int'>
    readonly isRequired: FieldRef<"FlowComponent", 'Boolean'>
    readonly type: FieldRef<"FlowComponent", 'String'>
    readonly typeVersion: FieldRef<"FlowComponent", 'String'>
    readonly data: FieldRef<"FlowComponent", 'Json'>
    readonly stepId: FieldRef<"FlowComponent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FlowComponent findUnique
   */
  export type FlowComponentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * Filter, which FlowComponent to fetch.
     */
    where: FlowComponentWhereUniqueInput
  }

  /**
   * FlowComponent findUniqueOrThrow
   */
  export type FlowComponentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * Filter, which FlowComponent to fetch.
     */
    where: FlowComponentWhereUniqueInput
  }

  /**
   * FlowComponent findFirst
   */
  export type FlowComponentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * Filter, which FlowComponent to fetch.
     */
    where?: FlowComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowComponents to fetch.
     */
    orderBy?: FlowComponentOrderByWithRelationInput | FlowComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowComponents.
     */
    cursor?: FlowComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowComponents.
     */
    distinct?: FlowComponentScalarFieldEnum | FlowComponentScalarFieldEnum[]
  }

  /**
   * FlowComponent findFirstOrThrow
   */
  export type FlowComponentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * Filter, which FlowComponent to fetch.
     */
    where?: FlowComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowComponents to fetch.
     */
    orderBy?: FlowComponentOrderByWithRelationInput | FlowComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowComponents.
     */
    cursor?: FlowComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowComponents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowComponents.
     */
    distinct?: FlowComponentScalarFieldEnum | FlowComponentScalarFieldEnum[]
  }

  /**
   * FlowComponent findMany
   */
  export type FlowComponentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * Filter, which FlowComponents to fetch.
     */
    where?: FlowComponentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowComponents to fetch.
     */
    orderBy?: FlowComponentOrderByWithRelationInput | FlowComponentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlowComponents.
     */
    cursor?: FlowComponentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowComponents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowComponents.
     */
    skip?: number
    distinct?: FlowComponentScalarFieldEnum | FlowComponentScalarFieldEnum[]
  }

  /**
   * FlowComponent create
   */
  export type FlowComponentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * The data needed to create a FlowComponent.
     */
    data: XOR<FlowComponentCreateInput, FlowComponentUncheckedCreateInput>
  }

  /**
   * FlowComponent createMany
   */
  export type FlowComponentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlowComponents.
     */
    data: FlowComponentCreateManyInput | FlowComponentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlowComponent createManyAndReturn
   */
  export type FlowComponentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * The data used to create many FlowComponents.
     */
    data: FlowComponentCreateManyInput | FlowComponentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowComponent update
   */
  export type FlowComponentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * The data needed to update a FlowComponent.
     */
    data: XOR<FlowComponentUpdateInput, FlowComponentUncheckedUpdateInput>
    /**
     * Choose, which FlowComponent to update.
     */
    where: FlowComponentWhereUniqueInput
  }

  /**
   * FlowComponent updateMany
   */
  export type FlowComponentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlowComponents.
     */
    data: XOR<FlowComponentUpdateManyMutationInput, FlowComponentUncheckedUpdateManyInput>
    /**
     * Filter which FlowComponents to update
     */
    where?: FlowComponentWhereInput
    /**
     * Limit how many FlowComponents to update.
     */
    limit?: number
  }

  /**
   * FlowComponent updateManyAndReturn
   */
  export type FlowComponentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * The data used to update FlowComponents.
     */
    data: XOR<FlowComponentUpdateManyMutationInput, FlowComponentUncheckedUpdateManyInput>
    /**
     * Filter which FlowComponents to update
     */
    where?: FlowComponentWhereInput
    /**
     * Limit how many FlowComponents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowComponent upsert
   */
  export type FlowComponentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * The filter to search for the FlowComponent to update in case it exists.
     */
    where: FlowComponentWhereUniqueInput
    /**
     * In case the FlowComponent found by the `where` argument doesn't exist, create a new FlowComponent with this data.
     */
    create: XOR<FlowComponentCreateInput, FlowComponentUncheckedCreateInput>
    /**
     * In case the FlowComponent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowComponentUpdateInput, FlowComponentUncheckedUpdateInput>
  }

  /**
   * FlowComponent delete
   */
  export type FlowComponentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
    /**
     * Filter which FlowComponent to delete.
     */
    where: FlowComponentWhereUniqueInput
  }

  /**
   * FlowComponent deleteMany
   */
  export type FlowComponentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowComponents to delete
     */
    where?: FlowComponentWhereInput
    /**
     * Limit how many FlowComponents to delete.
     */
    limit?: number
  }

  /**
   * FlowComponent without action
   */
  export type FlowComponentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowComponent
     */
    select?: FlowComponentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowComponent
     */
    omit?: FlowComponentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowComponentInclude<ExtArgs> | null
  }


  /**
   * Model FlowSnapshot
   */

  export type AggregateFlowSnapshot = {
    _count: FlowSnapshotCountAggregateOutputType | null
    _min: FlowSnapshotMinAggregateOutputType | null
    _max: FlowSnapshotMaxAggregateOutputType | null
  }

  export type FlowSnapshotMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    title: string | null
    description: string | null
    snapshotVersion: Date | null
    originalFlowVersion: string | null
    originalFlowId: string | null
    assignmentId: string | null
  }

  export type FlowSnapshotMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    title: string | null
    description: string | null
    snapshotVersion: Date | null
    originalFlowVersion: string | null
    originalFlowId: string | null
    assignmentId: string | null
  }

  export type FlowSnapshotCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    description: number
    snapshotVersion: number
    originalFlowVersion: number
    originalFlowId: number
    assignmentId: number
    _all: number
  }


  export type FlowSnapshotMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    snapshotVersion?: true
    originalFlowVersion?: true
    originalFlowId?: true
    assignmentId?: true
  }

  export type FlowSnapshotMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    snapshotVersion?: true
    originalFlowVersion?: true
    originalFlowId?: true
    assignmentId?: true
  }

  export type FlowSnapshotCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    description?: true
    snapshotVersion?: true
    originalFlowVersion?: true
    originalFlowId?: true
    assignmentId?: true
    _all?: true
  }

  export type FlowSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowSnapshot to aggregate.
     */
    where?: FlowSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSnapshots to fetch.
     */
    orderBy?: FlowSnapshotOrderByWithRelationInput | FlowSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlowSnapshots
    **/
    _count?: true | FlowSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowSnapshotMaxAggregateInputType
  }

  export type GetFlowSnapshotAggregateType<T extends FlowSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateFlowSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlowSnapshot[P]>
      : GetScalarType<T[P], AggregateFlowSnapshot[P]>
  }




  export type FlowSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowSnapshotWhereInput
    orderBy?: FlowSnapshotOrderByWithAggregationInput | FlowSnapshotOrderByWithAggregationInput[]
    by: FlowSnapshotScalarFieldEnum[] | FlowSnapshotScalarFieldEnum
    having?: FlowSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowSnapshotCountAggregateInputType | true
    _min?: FlowSnapshotMinAggregateInputType
    _max?: FlowSnapshotMaxAggregateInputType
  }

  export type FlowSnapshotGroupByOutputType = {
    id: string
    createdAt: Date
    title: string
    description: string
    snapshotVersion: Date
    originalFlowVersion: string
    originalFlowId: string
    assignmentId: string | null
    _count: FlowSnapshotCountAggregateOutputType | null
    _min: FlowSnapshotMinAggregateOutputType | null
    _max: FlowSnapshotMaxAggregateOutputType | null
  }

  type GetFlowSnapshotGroupByPayload<T extends FlowSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], FlowSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type FlowSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    title?: boolean
    description?: boolean
    snapshotVersion?: boolean
    originalFlowVersion?: boolean
    originalFlowId?: boolean
    assignmentId?: boolean
    originalFlow?: boolean | FlowDefaultArgs<ExtArgs>
    assignment?: boolean | FlowSnapshot$assignmentArgs<ExtArgs>
    steps?: boolean | FlowSnapshot$stepsArgs<ExtArgs>
    _count?: boolean | FlowSnapshotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowSnapshot"]>

  export type FlowSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    title?: boolean
    description?: boolean
    snapshotVersion?: boolean
    originalFlowVersion?: boolean
    originalFlowId?: boolean
    assignmentId?: boolean
    originalFlow?: boolean | FlowDefaultArgs<ExtArgs>
    assignment?: boolean | FlowSnapshot$assignmentArgs<ExtArgs>
  }, ExtArgs["result"]["flowSnapshot"]>

  export type FlowSnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    title?: boolean
    description?: boolean
    snapshotVersion?: boolean
    originalFlowVersion?: boolean
    originalFlowId?: boolean
    assignmentId?: boolean
    originalFlow?: boolean | FlowDefaultArgs<ExtArgs>
    assignment?: boolean | FlowSnapshot$assignmentArgs<ExtArgs>
  }, ExtArgs["result"]["flowSnapshot"]>

  export type FlowSnapshotSelectScalar = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    description?: boolean
    snapshotVersion?: boolean
    originalFlowVersion?: boolean
    originalFlowId?: boolean
    assignmentId?: boolean
  }

  export type FlowSnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "title" | "description" | "snapshotVersion" | "originalFlowVersion" | "originalFlowId" | "assignmentId", ExtArgs["result"]["flowSnapshot"]>
  export type FlowSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originalFlow?: boolean | FlowDefaultArgs<ExtArgs>
    assignment?: boolean | FlowSnapshot$assignmentArgs<ExtArgs>
    steps?: boolean | FlowSnapshot$stepsArgs<ExtArgs>
    _count?: boolean | FlowSnapshotCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlowSnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originalFlow?: boolean | FlowDefaultArgs<ExtArgs>
    assignment?: boolean | FlowSnapshot$assignmentArgs<ExtArgs>
  }
  export type FlowSnapshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    originalFlow?: boolean | FlowDefaultArgs<ExtArgs>
    assignment?: boolean | FlowSnapshot$assignmentArgs<ExtArgs>
  }

  export type $FlowSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlowSnapshot"
    objects: {
      originalFlow: Prisma.$FlowPayload<ExtArgs>
      assignment: Prisma.$FlowAssignmentPayload<ExtArgs> | null
      steps: Prisma.$FlowStepSnapshotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      title: string
      description: string
      snapshotVersion: Date
      originalFlowVersion: string
      originalFlowId: string
      assignmentId: string | null
    }, ExtArgs["result"]["flowSnapshot"]>
    composites: {}
  }

  type FlowSnapshotGetPayload<S extends boolean | null | undefined | FlowSnapshotDefaultArgs> = $Result.GetResult<Prisma.$FlowSnapshotPayload, S>

  type FlowSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowSnapshotCountAggregateInputType | true
    }

  export interface FlowSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlowSnapshot'], meta: { name: 'FlowSnapshot' } }
    /**
     * Find zero or one FlowSnapshot that matches the filter.
     * @param {FlowSnapshotFindUniqueArgs} args - Arguments to find a FlowSnapshot
     * @example
     * // Get one FlowSnapshot
     * const flowSnapshot = await prisma.flowSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowSnapshotFindUniqueArgs>(args: SelectSubset<T, FlowSnapshotFindUniqueArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlowSnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowSnapshotFindUniqueOrThrowArgs} args - Arguments to find a FlowSnapshot
     * @example
     * // Get one FlowSnapshot
     * const flowSnapshot = await prisma.flowSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowSnapshotFindFirstArgs} args - Arguments to find a FlowSnapshot
     * @example
     * // Get one FlowSnapshot
     * const flowSnapshot = await prisma.flowSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowSnapshotFindFirstArgs>(args?: SelectSubset<T, FlowSnapshotFindFirstArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowSnapshotFindFirstOrThrowArgs} args - Arguments to find a FlowSnapshot
     * @example
     * // Get one FlowSnapshot
     * const flowSnapshot = await prisma.flowSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlowSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlowSnapshots
     * const flowSnapshots = await prisma.flowSnapshot.findMany()
     * 
     * // Get first 10 FlowSnapshots
     * const flowSnapshots = await prisma.flowSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flowSnapshotWithIdOnly = await prisma.flowSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlowSnapshotFindManyArgs>(args?: SelectSubset<T, FlowSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlowSnapshot.
     * @param {FlowSnapshotCreateArgs} args - Arguments to create a FlowSnapshot.
     * @example
     * // Create one FlowSnapshot
     * const FlowSnapshot = await prisma.flowSnapshot.create({
     *   data: {
     *     // ... data to create a FlowSnapshot
     *   }
     * })
     * 
     */
    create<T extends FlowSnapshotCreateArgs>(args: SelectSubset<T, FlowSnapshotCreateArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlowSnapshots.
     * @param {FlowSnapshotCreateManyArgs} args - Arguments to create many FlowSnapshots.
     * @example
     * // Create many FlowSnapshots
     * const flowSnapshot = await prisma.flowSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowSnapshotCreateManyArgs>(args?: SelectSubset<T, FlowSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlowSnapshots and returns the data saved in the database.
     * @param {FlowSnapshotCreateManyAndReturnArgs} args - Arguments to create many FlowSnapshots.
     * @example
     * // Create many FlowSnapshots
     * const flowSnapshot = await prisma.flowSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlowSnapshots and only return the `id`
     * const flowSnapshotWithIdOnly = await prisma.flowSnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlowSnapshot.
     * @param {FlowSnapshotDeleteArgs} args - Arguments to delete one FlowSnapshot.
     * @example
     * // Delete one FlowSnapshot
     * const FlowSnapshot = await prisma.flowSnapshot.delete({
     *   where: {
     *     // ... filter to delete one FlowSnapshot
     *   }
     * })
     * 
     */
    delete<T extends FlowSnapshotDeleteArgs>(args: SelectSubset<T, FlowSnapshotDeleteArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlowSnapshot.
     * @param {FlowSnapshotUpdateArgs} args - Arguments to update one FlowSnapshot.
     * @example
     * // Update one FlowSnapshot
     * const flowSnapshot = await prisma.flowSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowSnapshotUpdateArgs>(args: SelectSubset<T, FlowSnapshotUpdateArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlowSnapshots.
     * @param {FlowSnapshotDeleteManyArgs} args - Arguments to filter FlowSnapshots to delete.
     * @example
     * // Delete a few FlowSnapshots
     * const { count } = await prisma.flowSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowSnapshotDeleteManyArgs>(args?: SelectSubset<T, FlowSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlowSnapshots
     * const flowSnapshot = await prisma.flowSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowSnapshotUpdateManyArgs>(args: SelectSubset<T, FlowSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowSnapshots and returns the data updated in the database.
     * @param {FlowSnapshotUpdateManyAndReturnArgs} args - Arguments to update many FlowSnapshots.
     * @example
     * // Update many FlowSnapshots
     * const flowSnapshot = await prisma.flowSnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlowSnapshots and only return the `id`
     * const flowSnapshotWithIdOnly = await prisma.flowSnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowSnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlowSnapshot.
     * @param {FlowSnapshotUpsertArgs} args - Arguments to update or create a FlowSnapshot.
     * @example
     * // Update or create a FlowSnapshot
     * const flowSnapshot = await prisma.flowSnapshot.upsert({
     *   create: {
     *     // ... data to create a FlowSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlowSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends FlowSnapshotUpsertArgs>(args: SelectSubset<T, FlowSnapshotUpsertArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlowSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowSnapshotCountArgs} args - Arguments to filter FlowSnapshots to count.
     * @example
     * // Count the number of FlowSnapshots
     * const count = await prisma.flowSnapshot.count({
     *   where: {
     *     // ... the filter for the FlowSnapshots we want to count
     *   }
     * })
    **/
    count<T extends FlowSnapshotCountArgs>(
      args?: Subset<T, FlowSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlowSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowSnapshotAggregateArgs>(args: Subset<T, FlowSnapshotAggregateArgs>): Prisma.PrismaPromise<GetFlowSnapshotAggregateType<T>>

    /**
     * Group by FlowSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: FlowSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlowSnapshot model
   */
  readonly fields: FlowSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlowSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    originalFlow<T extends FlowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowDefaultArgs<ExtArgs>>): Prisma__FlowClient<$Result.GetResult<Prisma.$FlowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignment<T extends FlowSnapshot$assignmentArgs<ExtArgs> = {}>(args?: Subset<T, FlowSnapshot$assignmentArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    steps<T extends FlowSnapshot$stepsArgs<ExtArgs> = {}>(args?: Subset<T, FlowSnapshot$stepsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlowSnapshot model
   */
  interface FlowSnapshotFieldRefs {
    readonly id: FieldRef<"FlowSnapshot", 'String'>
    readonly createdAt: FieldRef<"FlowSnapshot", 'DateTime'>
    readonly title: FieldRef<"FlowSnapshot", 'String'>
    readonly description: FieldRef<"FlowSnapshot", 'String'>
    readonly snapshotVersion: FieldRef<"FlowSnapshot", 'DateTime'>
    readonly originalFlowVersion: FieldRef<"FlowSnapshot", 'String'>
    readonly originalFlowId: FieldRef<"FlowSnapshot", 'String'>
    readonly assignmentId: FieldRef<"FlowSnapshot", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FlowSnapshot findUnique
   */
  export type FlowSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowSnapshot to fetch.
     */
    where: FlowSnapshotWhereUniqueInput
  }

  /**
   * FlowSnapshot findUniqueOrThrow
   */
  export type FlowSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowSnapshot to fetch.
     */
    where: FlowSnapshotWhereUniqueInput
  }

  /**
   * FlowSnapshot findFirst
   */
  export type FlowSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowSnapshot to fetch.
     */
    where?: FlowSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSnapshots to fetch.
     */
    orderBy?: FlowSnapshotOrderByWithRelationInput | FlowSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowSnapshots.
     */
    cursor?: FlowSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowSnapshots.
     */
    distinct?: FlowSnapshotScalarFieldEnum | FlowSnapshotScalarFieldEnum[]
  }

  /**
   * FlowSnapshot findFirstOrThrow
   */
  export type FlowSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowSnapshot to fetch.
     */
    where?: FlowSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSnapshots to fetch.
     */
    orderBy?: FlowSnapshotOrderByWithRelationInput | FlowSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowSnapshots.
     */
    cursor?: FlowSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowSnapshots.
     */
    distinct?: FlowSnapshotScalarFieldEnum | FlowSnapshotScalarFieldEnum[]
  }

  /**
   * FlowSnapshot findMany
   */
  export type FlowSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowSnapshots to fetch.
     */
    where?: FlowSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowSnapshots to fetch.
     */
    orderBy?: FlowSnapshotOrderByWithRelationInput | FlowSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlowSnapshots.
     */
    cursor?: FlowSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowSnapshots.
     */
    skip?: number
    distinct?: FlowSnapshotScalarFieldEnum | FlowSnapshotScalarFieldEnum[]
  }

  /**
   * FlowSnapshot create
   */
  export type FlowSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a FlowSnapshot.
     */
    data: XOR<FlowSnapshotCreateInput, FlowSnapshotUncheckedCreateInput>
  }

  /**
   * FlowSnapshot createMany
   */
  export type FlowSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlowSnapshots.
     */
    data: FlowSnapshotCreateManyInput | FlowSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlowSnapshot createManyAndReturn
   */
  export type FlowSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many FlowSnapshots.
     */
    data: FlowSnapshotCreateManyInput | FlowSnapshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowSnapshot update
   */
  export type FlowSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a FlowSnapshot.
     */
    data: XOR<FlowSnapshotUpdateInput, FlowSnapshotUncheckedUpdateInput>
    /**
     * Choose, which FlowSnapshot to update.
     */
    where: FlowSnapshotWhereUniqueInput
  }

  /**
   * FlowSnapshot updateMany
   */
  export type FlowSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlowSnapshots.
     */
    data: XOR<FlowSnapshotUpdateManyMutationInput, FlowSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which FlowSnapshots to update
     */
    where?: FlowSnapshotWhereInput
    /**
     * Limit how many FlowSnapshots to update.
     */
    limit?: number
  }

  /**
   * FlowSnapshot updateManyAndReturn
   */
  export type FlowSnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * The data used to update FlowSnapshots.
     */
    data: XOR<FlowSnapshotUpdateManyMutationInput, FlowSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which FlowSnapshots to update
     */
    where?: FlowSnapshotWhereInput
    /**
     * Limit how many FlowSnapshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowSnapshot upsert
   */
  export type FlowSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the FlowSnapshot to update in case it exists.
     */
    where: FlowSnapshotWhereUniqueInput
    /**
     * In case the FlowSnapshot found by the `where` argument doesn't exist, create a new FlowSnapshot with this data.
     */
    create: XOR<FlowSnapshotCreateInput, FlowSnapshotUncheckedCreateInput>
    /**
     * In case the FlowSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowSnapshotUpdateInput, FlowSnapshotUncheckedUpdateInput>
  }

  /**
   * FlowSnapshot delete
   */
  export type FlowSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    /**
     * Filter which FlowSnapshot to delete.
     */
    where: FlowSnapshotWhereUniqueInput
  }

  /**
   * FlowSnapshot deleteMany
   */
  export type FlowSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowSnapshots to delete
     */
    where?: FlowSnapshotWhereInput
    /**
     * Limit how many FlowSnapshots to delete.
     */
    limit?: number
  }

  /**
   * FlowSnapshot.assignment
   */
  export type FlowSnapshot$assignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    where?: FlowAssignmentWhereInput
  }

  /**
   * FlowSnapshot.steps
   */
  export type FlowSnapshot$stepsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    where?: FlowStepSnapshotWhereInput
    orderBy?: FlowStepSnapshotOrderByWithRelationInput | FlowStepSnapshotOrderByWithRelationInput[]
    cursor?: FlowStepSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowStepSnapshotScalarFieldEnum | FlowStepSnapshotScalarFieldEnum[]
  }

  /**
   * FlowSnapshot without action
   */
  export type FlowSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
  }


  /**
   * Model FlowStepSnapshot
   */

  export type AggregateFlowStepSnapshot = {
    _count: FlowStepSnapshotCountAggregateOutputType | null
    _avg: FlowStepSnapshotAvgAggregateOutputType | null
    _sum: FlowStepSnapshotSumAggregateOutputType | null
    _min: FlowStepSnapshotMinAggregateOutputType | null
    _max: FlowStepSnapshotMaxAggregateOutputType | null
  }

  export type FlowStepSnapshotAvgAggregateOutputType = {
    order: number | null
  }

  export type FlowStepSnapshotSumAggregateOutputType = {
    order: number | null
  }

  export type FlowStepSnapshotMinAggregateOutputType = {
    id: string | null
    order: number | null
    title: string | null
    description: string | null
    snapshotId: string | null
  }

  export type FlowStepSnapshotMaxAggregateOutputType = {
    id: string | null
    order: number | null
    title: string | null
    description: string | null
    snapshotId: string | null
  }

  export type FlowStepSnapshotCountAggregateOutputType = {
    id: number
    order: number
    title: number
    description: number
    snapshotId: number
    _all: number
  }


  export type FlowStepSnapshotAvgAggregateInputType = {
    order?: true
  }

  export type FlowStepSnapshotSumAggregateInputType = {
    order?: true
  }

  export type FlowStepSnapshotMinAggregateInputType = {
    id?: true
    order?: true
    title?: true
    description?: true
    snapshotId?: true
  }

  export type FlowStepSnapshotMaxAggregateInputType = {
    id?: true
    order?: true
    title?: true
    description?: true
    snapshotId?: true
  }

  export type FlowStepSnapshotCountAggregateInputType = {
    id?: true
    order?: true
    title?: true
    description?: true
    snapshotId?: true
    _all?: true
  }

  export type FlowStepSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowStepSnapshot to aggregate.
     */
    where?: FlowStepSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowStepSnapshots to fetch.
     */
    orderBy?: FlowStepSnapshotOrderByWithRelationInput | FlowStepSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowStepSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowStepSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowStepSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlowStepSnapshots
    **/
    _count?: true | FlowStepSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlowStepSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlowStepSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowStepSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowStepSnapshotMaxAggregateInputType
  }

  export type GetFlowStepSnapshotAggregateType<T extends FlowStepSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateFlowStepSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlowStepSnapshot[P]>
      : GetScalarType<T[P], AggregateFlowStepSnapshot[P]>
  }




  export type FlowStepSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowStepSnapshotWhereInput
    orderBy?: FlowStepSnapshotOrderByWithAggregationInput | FlowStepSnapshotOrderByWithAggregationInput[]
    by: FlowStepSnapshotScalarFieldEnum[] | FlowStepSnapshotScalarFieldEnum
    having?: FlowStepSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowStepSnapshotCountAggregateInputType | true
    _avg?: FlowStepSnapshotAvgAggregateInputType
    _sum?: FlowStepSnapshotSumAggregateInputType
    _min?: FlowStepSnapshotMinAggregateInputType
    _max?: FlowStepSnapshotMaxAggregateInputType
  }

  export type FlowStepSnapshotGroupByOutputType = {
    id: string
    order: number
    title: string
    description: string
    snapshotId: string
    _count: FlowStepSnapshotCountAggregateOutputType | null
    _avg: FlowStepSnapshotAvgAggregateOutputType | null
    _sum: FlowStepSnapshotSumAggregateOutputType | null
    _min: FlowStepSnapshotMinAggregateOutputType | null
    _max: FlowStepSnapshotMaxAggregateOutputType | null
  }

  type GetFlowStepSnapshotGroupByPayload<T extends FlowStepSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowStepSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowStepSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowStepSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], FlowStepSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type FlowStepSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    snapshotId?: boolean
    snapshot?: boolean | FlowSnapshotDefaultArgs<ExtArgs>
    components?: boolean | FlowStepSnapshot$componentsArgs<ExtArgs>
    progress?: boolean | FlowStepSnapshot$progressArgs<ExtArgs>
    _count?: boolean | FlowStepSnapshotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowStepSnapshot"]>

  export type FlowStepSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    snapshotId?: boolean
    snapshot?: boolean | FlowSnapshotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowStepSnapshot"]>

  export type FlowStepSnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    snapshotId?: boolean
    snapshot?: boolean | FlowSnapshotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowStepSnapshot"]>

  export type FlowStepSnapshotSelectScalar = {
    id?: boolean
    order?: boolean
    title?: boolean
    description?: boolean
    snapshotId?: boolean
  }

  export type FlowStepSnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order" | "title" | "description" | "snapshotId", ExtArgs["result"]["flowStepSnapshot"]>
  export type FlowStepSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    snapshot?: boolean | FlowSnapshotDefaultArgs<ExtArgs>
    components?: boolean | FlowStepSnapshot$componentsArgs<ExtArgs>
    progress?: boolean | FlowStepSnapshot$progressArgs<ExtArgs>
    _count?: boolean | FlowStepSnapshotCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlowStepSnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    snapshot?: boolean | FlowSnapshotDefaultArgs<ExtArgs>
  }
  export type FlowStepSnapshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    snapshot?: boolean | FlowSnapshotDefaultArgs<ExtArgs>
  }

  export type $FlowStepSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlowStepSnapshot"
    objects: {
      snapshot: Prisma.$FlowSnapshotPayload<ExtArgs>
      components: Prisma.$ComponentSnapshotPayload<ExtArgs>[]
      progress: Prisma.$StepProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order: number
      title: string
      description: string
      snapshotId: string
    }, ExtArgs["result"]["flowStepSnapshot"]>
    composites: {}
  }

  type FlowStepSnapshotGetPayload<S extends boolean | null | undefined | FlowStepSnapshotDefaultArgs> = $Result.GetResult<Prisma.$FlowStepSnapshotPayload, S>

  type FlowStepSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowStepSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowStepSnapshotCountAggregateInputType | true
    }

  export interface FlowStepSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlowStepSnapshot'], meta: { name: 'FlowStepSnapshot' } }
    /**
     * Find zero or one FlowStepSnapshot that matches the filter.
     * @param {FlowStepSnapshotFindUniqueArgs} args - Arguments to find a FlowStepSnapshot
     * @example
     * // Get one FlowStepSnapshot
     * const flowStepSnapshot = await prisma.flowStepSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowStepSnapshotFindUniqueArgs>(args: SelectSubset<T, FlowStepSnapshotFindUniqueArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlowStepSnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowStepSnapshotFindUniqueOrThrowArgs} args - Arguments to find a FlowStepSnapshot
     * @example
     * // Get one FlowStepSnapshot
     * const flowStepSnapshot = await prisma.flowStepSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowStepSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowStepSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowStepSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepSnapshotFindFirstArgs} args - Arguments to find a FlowStepSnapshot
     * @example
     * // Get one FlowStepSnapshot
     * const flowStepSnapshot = await prisma.flowStepSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowStepSnapshotFindFirstArgs>(args?: SelectSubset<T, FlowStepSnapshotFindFirstArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowStepSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepSnapshotFindFirstOrThrowArgs} args - Arguments to find a FlowStepSnapshot
     * @example
     * // Get one FlowStepSnapshot
     * const flowStepSnapshot = await prisma.flowStepSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowStepSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowStepSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlowStepSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlowStepSnapshots
     * const flowStepSnapshots = await prisma.flowStepSnapshot.findMany()
     * 
     * // Get first 10 FlowStepSnapshots
     * const flowStepSnapshots = await prisma.flowStepSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flowStepSnapshotWithIdOnly = await prisma.flowStepSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlowStepSnapshotFindManyArgs>(args?: SelectSubset<T, FlowStepSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlowStepSnapshot.
     * @param {FlowStepSnapshotCreateArgs} args - Arguments to create a FlowStepSnapshot.
     * @example
     * // Create one FlowStepSnapshot
     * const FlowStepSnapshot = await prisma.flowStepSnapshot.create({
     *   data: {
     *     // ... data to create a FlowStepSnapshot
     *   }
     * })
     * 
     */
    create<T extends FlowStepSnapshotCreateArgs>(args: SelectSubset<T, FlowStepSnapshotCreateArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlowStepSnapshots.
     * @param {FlowStepSnapshotCreateManyArgs} args - Arguments to create many FlowStepSnapshots.
     * @example
     * // Create many FlowStepSnapshots
     * const flowStepSnapshot = await prisma.flowStepSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowStepSnapshotCreateManyArgs>(args?: SelectSubset<T, FlowStepSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlowStepSnapshots and returns the data saved in the database.
     * @param {FlowStepSnapshotCreateManyAndReturnArgs} args - Arguments to create many FlowStepSnapshots.
     * @example
     * // Create many FlowStepSnapshots
     * const flowStepSnapshot = await prisma.flowStepSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlowStepSnapshots and only return the `id`
     * const flowStepSnapshotWithIdOnly = await prisma.flowStepSnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowStepSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowStepSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlowStepSnapshot.
     * @param {FlowStepSnapshotDeleteArgs} args - Arguments to delete one FlowStepSnapshot.
     * @example
     * // Delete one FlowStepSnapshot
     * const FlowStepSnapshot = await prisma.flowStepSnapshot.delete({
     *   where: {
     *     // ... filter to delete one FlowStepSnapshot
     *   }
     * })
     * 
     */
    delete<T extends FlowStepSnapshotDeleteArgs>(args: SelectSubset<T, FlowStepSnapshotDeleteArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlowStepSnapshot.
     * @param {FlowStepSnapshotUpdateArgs} args - Arguments to update one FlowStepSnapshot.
     * @example
     * // Update one FlowStepSnapshot
     * const flowStepSnapshot = await prisma.flowStepSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowStepSnapshotUpdateArgs>(args: SelectSubset<T, FlowStepSnapshotUpdateArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlowStepSnapshots.
     * @param {FlowStepSnapshotDeleteManyArgs} args - Arguments to filter FlowStepSnapshots to delete.
     * @example
     * // Delete a few FlowStepSnapshots
     * const { count } = await prisma.flowStepSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowStepSnapshotDeleteManyArgs>(args?: SelectSubset<T, FlowStepSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowStepSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlowStepSnapshots
     * const flowStepSnapshot = await prisma.flowStepSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowStepSnapshotUpdateManyArgs>(args: SelectSubset<T, FlowStepSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowStepSnapshots and returns the data updated in the database.
     * @param {FlowStepSnapshotUpdateManyAndReturnArgs} args - Arguments to update many FlowStepSnapshots.
     * @example
     * // Update many FlowStepSnapshots
     * const flowStepSnapshot = await prisma.flowStepSnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlowStepSnapshots and only return the `id`
     * const flowStepSnapshotWithIdOnly = await prisma.flowStepSnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowStepSnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowStepSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlowStepSnapshot.
     * @param {FlowStepSnapshotUpsertArgs} args - Arguments to update or create a FlowStepSnapshot.
     * @example
     * // Update or create a FlowStepSnapshot
     * const flowStepSnapshot = await prisma.flowStepSnapshot.upsert({
     *   create: {
     *     // ... data to create a FlowStepSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlowStepSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends FlowStepSnapshotUpsertArgs>(args: SelectSubset<T, FlowStepSnapshotUpsertArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlowStepSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepSnapshotCountArgs} args - Arguments to filter FlowStepSnapshots to count.
     * @example
     * // Count the number of FlowStepSnapshots
     * const count = await prisma.flowStepSnapshot.count({
     *   where: {
     *     // ... the filter for the FlowStepSnapshots we want to count
     *   }
     * })
    **/
    count<T extends FlowStepSnapshotCountArgs>(
      args?: Subset<T, FlowStepSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowStepSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlowStepSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowStepSnapshotAggregateArgs>(args: Subset<T, FlowStepSnapshotAggregateArgs>): Prisma.PrismaPromise<GetFlowStepSnapshotAggregateType<T>>

    /**
     * Group by FlowStepSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowStepSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowStepSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowStepSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: FlowStepSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowStepSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowStepSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlowStepSnapshot model
   */
  readonly fields: FlowStepSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlowStepSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowStepSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    snapshot<T extends FlowSnapshotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowSnapshotDefaultArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    components<T extends FlowStepSnapshot$componentsArgs<ExtArgs> = {}>(args?: Subset<T, FlowStepSnapshot$componentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    progress<T extends FlowStepSnapshot$progressArgs<ExtArgs> = {}>(args?: Subset<T, FlowStepSnapshot$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlowStepSnapshot model
   */
  interface FlowStepSnapshotFieldRefs {
    readonly id: FieldRef<"FlowStepSnapshot", 'String'>
    readonly order: FieldRef<"FlowStepSnapshot", 'Int'>
    readonly title: FieldRef<"FlowStepSnapshot", 'String'>
    readonly description: FieldRef<"FlowStepSnapshot", 'String'>
    readonly snapshotId: FieldRef<"FlowStepSnapshot", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FlowStepSnapshot findUnique
   */
  export type FlowStepSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowStepSnapshot to fetch.
     */
    where: FlowStepSnapshotWhereUniqueInput
  }

  /**
   * FlowStepSnapshot findUniqueOrThrow
   */
  export type FlowStepSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowStepSnapshot to fetch.
     */
    where: FlowStepSnapshotWhereUniqueInput
  }

  /**
   * FlowStepSnapshot findFirst
   */
  export type FlowStepSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowStepSnapshot to fetch.
     */
    where?: FlowStepSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowStepSnapshots to fetch.
     */
    orderBy?: FlowStepSnapshotOrderByWithRelationInput | FlowStepSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowStepSnapshots.
     */
    cursor?: FlowStepSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowStepSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowStepSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowStepSnapshots.
     */
    distinct?: FlowStepSnapshotScalarFieldEnum | FlowStepSnapshotScalarFieldEnum[]
  }

  /**
   * FlowStepSnapshot findFirstOrThrow
   */
  export type FlowStepSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowStepSnapshot to fetch.
     */
    where?: FlowStepSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowStepSnapshots to fetch.
     */
    orderBy?: FlowStepSnapshotOrderByWithRelationInput | FlowStepSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowStepSnapshots.
     */
    cursor?: FlowStepSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowStepSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowStepSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowStepSnapshots.
     */
    distinct?: FlowStepSnapshotScalarFieldEnum | FlowStepSnapshotScalarFieldEnum[]
  }

  /**
   * FlowStepSnapshot findMany
   */
  export type FlowStepSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which FlowStepSnapshots to fetch.
     */
    where?: FlowStepSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowStepSnapshots to fetch.
     */
    orderBy?: FlowStepSnapshotOrderByWithRelationInput | FlowStepSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlowStepSnapshots.
     */
    cursor?: FlowStepSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowStepSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowStepSnapshots.
     */
    skip?: number
    distinct?: FlowStepSnapshotScalarFieldEnum | FlowStepSnapshotScalarFieldEnum[]
  }

  /**
   * FlowStepSnapshot create
   */
  export type FlowStepSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a FlowStepSnapshot.
     */
    data: XOR<FlowStepSnapshotCreateInput, FlowStepSnapshotUncheckedCreateInput>
  }

  /**
   * FlowStepSnapshot createMany
   */
  export type FlowStepSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlowStepSnapshots.
     */
    data: FlowStepSnapshotCreateManyInput | FlowStepSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlowStepSnapshot createManyAndReturn
   */
  export type FlowStepSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many FlowStepSnapshots.
     */
    data: FlowStepSnapshotCreateManyInput | FlowStepSnapshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowStepSnapshot update
   */
  export type FlowStepSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a FlowStepSnapshot.
     */
    data: XOR<FlowStepSnapshotUpdateInput, FlowStepSnapshotUncheckedUpdateInput>
    /**
     * Choose, which FlowStepSnapshot to update.
     */
    where: FlowStepSnapshotWhereUniqueInput
  }

  /**
   * FlowStepSnapshot updateMany
   */
  export type FlowStepSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlowStepSnapshots.
     */
    data: XOR<FlowStepSnapshotUpdateManyMutationInput, FlowStepSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which FlowStepSnapshots to update
     */
    where?: FlowStepSnapshotWhereInput
    /**
     * Limit how many FlowStepSnapshots to update.
     */
    limit?: number
  }

  /**
   * FlowStepSnapshot updateManyAndReturn
   */
  export type FlowStepSnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * The data used to update FlowStepSnapshots.
     */
    data: XOR<FlowStepSnapshotUpdateManyMutationInput, FlowStepSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which FlowStepSnapshots to update
     */
    where?: FlowStepSnapshotWhereInput
    /**
     * Limit how many FlowStepSnapshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowStepSnapshot upsert
   */
  export type FlowStepSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the FlowStepSnapshot to update in case it exists.
     */
    where: FlowStepSnapshotWhereUniqueInput
    /**
     * In case the FlowStepSnapshot found by the `where` argument doesn't exist, create a new FlowStepSnapshot with this data.
     */
    create: XOR<FlowStepSnapshotCreateInput, FlowStepSnapshotUncheckedCreateInput>
    /**
     * In case the FlowStepSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowStepSnapshotUpdateInput, FlowStepSnapshotUncheckedUpdateInput>
  }

  /**
   * FlowStepSnapshot delete
   */
  export type FlowStepSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
    /**
     * Filter which FlowStepSnapshot to delete.
     */
    where: FlowStepSnapshotWhereUniqueInput
  }

  /**
   * FlowStepSnapshot deleteMany
   */
  export type FlowStepSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowStepSnapshots to delete
     */
    where?: FlowStepSnapshotWhereInput
    /**
     * Limit how many FlowStepSnapshots to delete.
     */
    limit?: number
  }

  /**
   * FlowStepSnapshot.components
   */
  export type FlowStepSnapshot$componentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    where?: ComponentSnapshotWhereInput
    orderBy?: ComponentSnapshotOrderByWithRelationInput | ComponentSnapshotOrderByWithRelationInput[]
    cursor?: ComponentSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentSnapshotScalarFieldEnum | ComponentSnapshotScalarFieldEnum[]
  }

  /**
   * FlowStepSnapshot.progress
   */
  export type FlowStepSnapshot$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    where?: StepProgressWhereInput
    orderBy?: StepProgressOrderByWithRelationInput | StepProgressOrderByWithRelationInput[]
    cursor?: StepProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StepProgressScalarFieldEnum | StepProgressScalarFieldEnum[]
  }

  /**
   * FlowStepSnapshot without action
   */
  export type FlowStepSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowStepSnapshot
     */
    select?: FlowStepSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowStepSnapshot
     */
    omit?: FlowStepSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowStepSnapshotInclude<ExtArgs> | null
  }


  /**
   * Model ComponentSnapshot
   */

  export type AggregateComponentSnapshot = {
    _count: ComponentSnapshotCountAggregateOutputType | null
    _avg: ComponentSnapshotAvgAggregateOutputType | null
    _sum: ComponentSnapshotSumAggregateOutputType | null
    _min: ComponentSnapshotMinAggregateOutputType | null
    _max: ComponentSnapshotMaxAggregateOutputType | null
  }

  export type ComponentSnapshotAvgAggregateOutputType = {
    order: number | null
  }

  export type ComponentSnapshotSumAggregateOutputType = {
    order: number | null
  }

  export type ComponentSnapshotMinAggregateOutputType = {
    id: string | null
    order: number | null
    isRequired: boolean | null
    type: string | null
    typeVersion: string | null
    stepId: string | null
  }

  export type ComponentSnapshotMaxAggregateOutputType = {
    id: string | null
    order: number | null
    isRequired: boolean | null
    type: string | null
    typeVersion: string | null
    stepId: string | null
  }

  export type ComponentSnapshotCountAggregateOutputType = {
    id: number
    order: number
    isRequired: number
    type: number
    typeVersion: number
    data: number
    stepId: number
    _all: number
  }


  export type ComponentSnapshotAvgAggregateInputType = {
    order?: true
  }

  export type ComponentSnapshotSumAggregateInputType = {
    order?: true
  }

  export type ComponentSnapshotMinAggregateInputType = {
    id?: true
    order?: true
    isRequired?: true
    type?: true
    typeVersion?: true
    stepId?: true
  }

  export type ComponentSnapshotMaxAggregateInputType = {
    id?: true
    order?: true
    isRequired?: true
    type?: true
    typeVersion?: true
    stepId?: true
  }

  export type ComponentSnapshotCountAggregateInputType = {
    id?: true
    order?: true
    isRequired?: true
    type?: true
    typeVersion?: true
    data?: true
    stepId?: true
    _all?: true
  }

  export type ComponentSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentSnapshot to aggregate.
     */
    where?: ComponentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSnapshots to fetch.
     */
    orderBy?: ComponentSnapshotOrderByWithRelationInput | ComponentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentSnapshots
    **/
    _count?: true | ComponentSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentSnapshotMaxAggregateInputType
  }

  export type GetComponentSnapshotAggregateType<T extends ComponentSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentSnapshot[P]>
      : GetScalarType<T[P], AggregateComponentSnapshot[P]>
  }




  export type ComponentSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentSnapshotWhereInput
    orderBy?: ComponentSnapshotOrderByWithAggregationInput | ComponentSnapshotOrderByWithAggregationInput[]
    by: ComponentSnapshotScalarFieldEnum[] | ComponentSnapshotScalarFieldEnum
    having?: ComponentSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentSnapshotCountAggregateInputType | true
    _avg?: ComponentSnapshotAvgAggregateInputType
    _sum?: ComponentSnapshotSumAggregateInputType
    _min?: ComponentSnapshotMinAggregateInputType
    _max?: ComponentSnapshotMaxAggregateInputType
  }

  export type ComponentSnapshotGroupByOutputType = {
    id: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonValue
    stepId: string
    _count: ComponentSnapshotCountAggregateOutputType | null
    _avg: ComponentSnapshotAvgAggregateOutputType | null
    _sum: ComponentSnapshotSumAggregateOutputType | null
    _min: ComponentSnapshotMinAggregateOutputType | null
    _max: ComponentSnapshotMaxAggregateOutputType | null
  }

  type GetComponentSnapshotGroupByPayload<T extends ComponentSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type ComponentSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
    step?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    progress?: boolean | ComponentSnapshot$progressArgs<ExtArgs>
    _count?: boolean | ComponentSnapshotCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentSnapshot"]>

  export type ComponentSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
    step?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentSnapshot"]>

  export type ComponentSnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
    step?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentSnapshot"]>

  export type ComponentSnapshotSelectScalar = {
    id?: boolean
    order?: boolean
    isRequired?: boolean
    type?: boolean
    typeVersion?: boolean
    data?: boolean
    stepId?: boolean
  }

  export type ComponentSnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "order" | "isRequired" | "type" | "typeVersion" | "data" | "stepId", ExtArgs["result"]["componentSnapshot"]>
  export type ComponentSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    step?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    progress?: boolean | ComponentSnapshot$progressArgs<ExtArgs>
    _count?: boolean | ComponentSnapshotCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ComponentSnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    step?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
  }
  export type ComponentSnapshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    step?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
  }

  export type $ComponentSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentSnapshot"
    objects: {
      step: Prisma.$FlowStepSnapshotPayload<ExtArgs>
      progress: Prisma.$ComponentProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      order: number
      isRequired: boolean
      type: string
      typeVersion: string
      data: Prisma.JsonValue
      stepId: string
    }, ExtArgs["result"]["componentSnapshot"]>
    composites: {}
  }

  type ComponentSnapshotGetPayload<S extends boolean | null | undefined | ComponentSnapshotDefaultArgs> = $Result.GetResult<Prisma.$ComponentSnapshotPayload, S>

  type ComponentSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComponentSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComponentSnapshotCountAggregateInputType | true
    }

  export interface ComponentSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentSnapshot'], meta: { name: 'ComponentSnapshot' } }
    /**
     * Find zero or one ComponentSnapshot that matches the filter.
     * @param {ComponentSnapshotFindUniqueArgs} args - Arguments to find a ComponentSnapshot
     * @example
     * // Get one ComponentSnapshot
     * const componentSnapshot = await prisma.componentSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentSnapshotFindUniqueArgs>(args: SelectSubset<T, ComponentSnapshotFindUniqueArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ComponentSnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComponentSnapshotFindUniqueOrThrowArgs} args - Arguments to find a ComponentSnapshot
     * @example
     * // Get one ComponentSnapshot
     * const componentSnapshot = await prisma.componentSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComponentSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSnapshotFindFirstArgs} args - Arguments to find a ComponentSnapshot
     * @example
     * // Get one ComponentSnapshot
     * const componentSnapshot = await prisma.componentSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentSnapshotFindFirstArgs>(args?: SelectSubset<T, ComponentSnapshotFindFirstArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComponentSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSnapshotFindFirstOrThrowArgs} args - Arguments to find a ComponentSnapshot
     * @example
     * // Get one ComponentSnapshot
     * const componentSnapshot = await prisma.componentSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComponentSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentSnapshots
     * const componentSnapshots = await prisma.componentSnapshot.findMany()
     * 
     * // Get first 10 ComponentSnapshots
     * const componentSnapshots = await prisma.componentSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentSnapshotWithIdOnly = await prisma.componentSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentSnapshotFindManyArgs>(args?: SelectSubset<T, ComponentSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ComponentSnapshot.
     * @param {ComponentSnapshotCreateArgs} args - Arguments to create a ComponentSnapshot.
     * @example
     * // Create one ComponentSnapshot
     * const ComponentSnapshot = await prisma.componentSnapshot.create({
     *   data: {
     *     // ... data to create a ComponentSnapshot
     *   }
     * })
     * 
     */
    create<T extends ComponentSnapshotCreateArgs>(args: SelectSubset<T, ComponentSnapshotCreateArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ComponentSnapshots.
     * @param {ComponentSnapshotCreateManyArgs} args - Arguments to create many ComponentSnapshots.
     * @example
     * // Create many ComponentSnapshots
     * const componentSnapshot = await prisma.componentSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentSnapshotCreateManyArgs>(args?: SelectSubset<T, ComponentSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComponentSnapshots and returns the data saved in the database.
     * @param {ComponentSnapshotCreateManyAndReturnArgs} args - Arguments to create many ComponentSnapshots.
     * @example
     * // Create many ComponentSnapshots
     * const componentSnapshot = await prisma.componentSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComponentSnapshots and only return the `id`
     * const componentSnapshotWithIdOnly = await prisma.componentSnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ComponentSnapshot.
     * @param {ComponentSnapshotDeleteArgs} args - Arguments to delete one ComponentSnapshot.
     * @example
     * // Delete one ComponentSnapshot
     * const ComponentSnapshot = await prisma.componentSnapshot.delete({
     *   where: {
     *     // ... filter to delete one ComponentSnapshot
     *   }
     * })
     * 
     */
    delete<T extends ComponentSnapshotDeleteArgs>(args: SelectSubset<T, ComponentSnapshotDeleteArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ComponentSnapshot.
     * @param {ComponentSnapshotUpdateArgs} args - Arguments to update one ComponentSnapshot.
     * @example
     * // Update one ComponentSnapshot
     * const componentSnapshot = await prisma.componentSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentSnapshotUpdateArgs>(args: SelectSubset<T, ComponentSnapshotUpdateArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ComponentSnapshots.
     * @param {ComponentSnapshotDeleteManyArgs} args - Arguments to filter ComponentSnapshots to delete.
     * @example
     * // Delete a few ComponentSnapshots
     * const { count } = await prisma.componentSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentSnapshotDeleteManyArgs>(args?: SelectSubset<T, ComponentSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentSnapshots
     * const componentSnapshot = await prisma.componentSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentSnapshotUpdateManyArgs>(args: SelectSubset<T, ComponentSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentSnapshots and returns the data updated in the database.
     * @param {ComponentSnapshotUpdateManyAndReturnArgs} args - Arguments to update many ComponentSnapshots.
     * @example
     * // Update many ComponentSnapshots
     * const componentSnapshot = await prisma.componentSnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ComponentSnapshots and only return the `id`
     * const componentSnapshotWithIdOnly = await prisma.componentSnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ComponentSnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, ComponentSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ComponentSnapshot.
     * @param {ComponentSnapshotUpsertArgs} args - Arguments to update or create a ComponentSnapshot.
     * @example
     * // Update or create a ComponentSnapshot
     * const componentSnapshot = await prisma.componentSnapshot.upsert({
     *   create: {
     *     // ... data to create a ComponentSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends ComponentSnapshotUpsertArgs>(args: SelectSubset<T, ComponentSnapshotUpsertArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ComponentSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSnapshotCountArgs} args - Arguments to filter ComponentSnapshots to count.
     * @example
     * // Count the number of ComponentSnapshots
     * const count = await prisma.componentSnapshot.count({
     *   where: {
     *     // ... the filter for the ComponentSnapshots we want to count
     *   }
     * })
    **/
    count<T extends ComponentSnapshotCountArgs>(
      args?: Subset<T, ComponentSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentSnapshotAggregateArgs>(args: Subset<T, ComponentSnapshotAggregateArgs>): Prisma.PrismaPromise<GetComponentSnapshotAggregateType<T>>

    /**
     * Group by ComponentSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: ComponentSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentSnapshot model
   */
  readonly fields: ComponentSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    step<T extends FlowStepSnapshotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowStepSnapshotDefaultArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    progress<T extends ComponentSnapshot$progressArgs<ExtArgs> = {}>(args?: Subset<T, ComponentSnapshot$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentSnapshot model
   */
  interface ComponentSnapshotFieldRefs {
    readonly id: FieldRef<"ComponentSnapshot", 'String'>
    readonly order: FieldRef<"ComponentSnapshot", 'Int'>
    readonly isRequired: FieldRef<"ComponentSnapshot", 'Boolean'>
    readonly type: FieldRef<"ComponentSnapshot", 'String'>
    readonly typeVersion: FieldRef<"ComponentSnapshot", 'String'>
    readonly data: FieldRef<"ComponentSnapshot", 'Json'>
    readonly stepId: FieldRef<"ComponentSnapshot", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ComponentSnapshot findUnique
   */
  export type ComponentSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSnapshot to fetch.
     */
    where: ComponentSnapshotWhereUniqueInput
  }

  /**
   * ComponentSnapshot findUniqueOrThrow
   */
  export type ComponentSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSnapshot to fetch.
     */
    where: ComponentSnapshotWhereUniqueInput
  }

  /**
   * ComponentSnapshot findFirst
   */
  export type ComponentSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSnapshot to fetch.
     */
    where?: ComponentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSnapshots to fetch.
     */
    orderBy?: ComponentSnapshotOrderByWithRelationInput | ComponentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentSnapshots.
     */
    cursor?: ComponentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentSnapshots.
     */
    distinct?: ComponentSnapshotScalarFieldEnum | ComponentSnapshotScalarFieldEnum[]
  }

  /**
   * ComponentSnapshot findFirstOrThrow
   */
  export type ComponentSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSnapshot to fetch.
     */
    where?: ComponentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSnapshots to fetch.
     */
    orderBy?: ComponentSnapshotOrderByWithRelationInput | ComponentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentSnapshots.
     */
    cursor?: ComponentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentSnapshots.
     */
    distinct?: ComponentSnapshotScalarFieldEnum | ComponentSnapshotScalarFieldEnum[]
  }

  /**
   * ComponentSnapshot findMany
   */
  export type ComponentSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which ComponentSnapshots to fetch.
     */
    where?: ComponentSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentSnapshots to fetch.
     */
    orderBy?: ComponentSnapshotOrderByWithRelationInput | ComponentSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentSnapshots.
     */
    cursor?: ComponentSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentSnapshots.
     */
    skip?: number
    distinct?: ComponentSnapshotScalarFieldEnum | ComponentSnapshotScalarFieldEnum[]
  }

  /**
   * ComponentSnapshot create
   */
  export type ComponentSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentSnapshot.
     */
    data: XOR<ComponentSnapshotCreateInput, ComponentSnapshotUncheckedCreateInput>
  }

  /**
   * ComponentSnapshot createMany
   */
  export type ComponentSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentSnapshots.
     */
    data: ComponentSnapshotCreateManyInput | ComponentSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComponentSnapshot createManyAndReturn
   */
  export type ComponentSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many ComponentSnapshots.
     */
    data: ComponentSnapshotCreateManyInput | ComponentSnapshotCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentSnapshot update
   */
  export type ComponentSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentSnapshot.
     */
    data: XOR<ComponentSnapshotUpdateInput, ComponentSnapshotUncheckedUpdateInput>
    /**
     * Choose, which ComponentSnapshot to update.
     */
    where: ComponentSnapshotWhereUniqueInput
  }

  /**
   * ComponentSnapshot updateMany
   */
  export type ComponentSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentSnapshots.
     */
    data: XOR<ComponentSnapshotUpdateManyMutationInput, ComponentSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which ComponentSnapshots to update
     */
    where?: ComponentSnapshotWhereInput
    /**
     * Limit how many ComponentSnapshots to update.
     */
    limit?: number
  }

  /**
   * ComponentSnapshot updateManyAndReturn
   */
  export type ComponentSnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * The data used to update ComponentSnapshots.
     */
    data: XOR<ComponentSnapshotUpdateManyMutationInput, ComponentSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which ComponentSnapshots to update
     */
    where?: ComponentSnapshotWhereInput
    /**
     * Limit how many ComponentSnapshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentSnapshot upsert
   */
  export type ComponentSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentSnapshot to update in case it exists.
     */
    where: ComponentSnapshotWhereUniqueInput
    /**
     * In case the ComponentSnapshot found by the `where` argument doesn't exist, create a new ComponentSnapshot with this data.
     */
    create: XOR<ComponentSnapshotCreateInput, ComponentSnapshotUncheckedCreateInput>
    /**
     * In case the ComponentSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentSnapshotUpdateInput, ComponentSnapshotUncheckedUpdateInput>
  }

  /**
   * ComponentSnapshot delete
   */
  export type ComponentSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
    /**
     * Filter which ComponentSnapshot to delete.
     */
    where: ComponentSnapshotWhereUniqueInput
  }

  /**
   * ComponentSnapshot deleteMany
   */
  export type ComponentSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentSnapshots to delete
     */
    where?: ComponentSnapshotWhereInput
    /**
     * Limit how many ComponentSnapshots to delete.
     */
    limit?: number
  }

  /**
   * ComponentSnapshot.progress
   */
  export type ComponentSnapshot$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    where?: ComponentProgressWhereInput
    orderBy?: ComponentProgressOrderByWithRelationInput | ComponentProgressOrderByWithRelationInput[]
    cursor?: ComponentProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentProgressScalarFieldEnum | ComponentProgressScalarFieldEnum[]
  }

  /**
   * ComponentSnapshot without action
   */
  export type ComponentSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentSnapshot
     */
    select?: ComponentSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentSnapshot
     */
    omit?: ComponentSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentSnapshotInclude<ExtArgs> | null
  }


  /**
   * Model FlowAssignment
   */

  export type AggregateFlowAssignment = {
    _count: FlowAssignmentCountAggregateOutputType | null
    _avg: FlowAssignmentAvgAggregateOutputType | null
    _sum: FlowAssignmentSumAggregateOutputType | null
    _min: FlowAssignmentMinAggregateOutputType | null
    _max: FlowAssignmentMaxAggregateOutputType | null
  }

  export type FlowAssignmentAvgAggregateOutputType = {
    timeSpent: number | null
  }

  export type FlowAssignmentSumAggregateOutputType = {
    timeSpent: number | null
  }

  export type FlowAssignmentMinAggregateOutputType = {
    id: string | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    deadline: Date | null
    status: $Enums.AssignmentStatus | null
    isOverdue: boolean | null
    pauseReason: string | null
    pausedAt: Date | null
    timeSpent: number | null
    lastActivity: Date | null
    userId: string | null
    pausedById: string | null
  }

  export type FlowAssignmentMaxAggregateOutputType = {
    id: string | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    deadline: Date | null
    status: $Enums.AssignmentStatus | null
    isOverdue: boolean | null
    pauseReason: string | null
    pausedAt: Date | null
    timeSpent: number | null
    lastActivity: Date | null
    userId: string | null
    pausedById: string | null
  }

  export type FlowAssignmentCountAggregateOutputType = {
    id: number
    assignedAt: number
    startedAt: number
    completedAt: number
    deadline: number
    status: number
    isOverdue: number
    pauseReason: number
    pausedAt: number
    timeSpent: number
    lastActivity: number
    userId: number
    pausedById: number
    _all: number
  }


  export type FlowAssignmentAvgAggregateInputType = {
    timeSpent?: true
  }

  export type FlowAssignmentSumAggregateInputType = {
    timeSpent?: true
  }

  export type FlowAssignmentMinAggregateInputType = {
    id?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    deadline?: true
    status?: true
    isOverdue?: true
    pauseReason?: true
    pausedAt?: true
    timeSpent?: true
    lastActivity?: true
    userId?: true
    pausedById?: true
  }

  export type FlowAssignmentMaxAggregateInputType = {
    id?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    deadline?: true
    status?: true
    isOverdue?: true
    pauseReason?: true
    pausedAt?: true
    timeSpent?: true
    lastActivity?: true
    userId?: true
    pausedById?: true
  }

  export type FlowAssignmentCountAggregateInputType = {
    id?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    deadline?: true
    status?: true
    isOverdue?: true
    pauseReason?: true
    pausedAt?: true
    timeSpent?: true
    lastActivity?: true
    userId?: true
    pausedById?: true
    _all?: true
  }

  export type FlowAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowAssignment to aggregate.
     */
    where?: FlowAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowAssignments to fetch.
     */
    orderBy?: FlowAssignmentOrderByWithRelationInput | FlowAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlowAssignments
    **/
    _count?: true | FlowAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlowAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlowAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowAssignmentMaxAggregateInputType
  }

  export type GetFlowAssignmentAggregateType<T extends FlowAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateFlowAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlowAssignment[P]>
      : GetScalarType<T[P], AggregateFlowAssignment[P]>
  }




  export type FlowAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowAssignmentWhereInput
    orderBy?: FlowAssignmentOrderByWithAggregationInput | FlowAssignmentOrderByWithAggregationInput[]
    by: FlowAssignmentScalarFieldEnum[] | FlowAssignmentScalarFieldEnum
    having?: FlowAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowAssignmentCountAggregateInputType | true
    _avg?: FlowAssignmentAvgAggregateInputType
    _sum?: FlowAssignmentSumAggregateInputType
    _min?: FlowAssignmentMinAggregateInputType
    _max?: FlowAssignmentMaxAggregateInputType
  }

  export type FlowAssignmentGroupByOutputType = {
    id: string
    assignedAt: Date
    startedAt: Date | null
    completedAt: Date | null
    deadline: Date
    status: $Enums.AssignmentStatus
    isOverdue: boolean
    pauseReason: string | null
    pausedAt: Date | null
    timeSpent: number
    lastActivity: Date | null
    userId: string
    pausedById: string | null
    _count: FlowAssignmentCountAggregateOutputType | null
    _avg: FlowAssignmentAvgAggregateOutputType | null
    _sum: FlowAssignmentSumAggregateOutputType | null
    _min: FlowAssignmentMinAggregateOutputType | null
    _max: FlowAssignmentMaxAggregateOutputType | null
  }

  type GetFlowAssignmentGroupByPayload<T extends FlowAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], FlowAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type FlowAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    deadline?: boolean
    status?: boolean
    isOverdue?: boolean
    pauseReason?: boolean
    pausedAt?: boolean
    timeSpent?: boolean
    lastActivity?: boolean
    userId?: boolean
    pausedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    snapshot?: boolean | FlowAssignment$snapshotArgs<ExtArgs>
    buddies?: boolean | FlowAssignment$buddiesArgs<ExtArgs>
    pausedBy?: boolean | FlowAssignment$pausedByArgs<ExtArgs>
    flowProgress?: boolean | FlowAssignment$flowProgressArgs<ExtArgs>
    _count?: boolean | FlowAssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowAssignment"]>

  export type FlowAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    deadline?: boolean
    status?: boolean
    isOverdue?: boolean
    pauseReason?: boolean
    pausedAt?: boolean
    timeSpent?: boolean
    lastActivity?: boolean
    userId?: boolean
    pausedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    pausedBy?: boolean | FlowAssignment$pausedByArgs<ExtArgs>
  }, ExtArgs["result"]["flowAssignment"]>

  export type FlowAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    deadline?: boolean
    status?: boolean
    isOverdue?: boolean
    pauseReason?: boolean
    pausedAt?: boolean
    timeSpent?: boolean
    lastActivity?: boolean
    userId?: boolean
    pausedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    pausedBy?: boolean | FlowAssignment$pausedByArgs<ExtArgs>
  }, ExtArgs["result"]["flowAssignment"]>

  export type FlowAssignmentSelectScalar = {
    id?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    deadline?: boolean
    status?: boolean
    isOverdue?: boolean
    pauseReason?: boolean
    pausedAt?: boolean
    timeSpent?: boolean
    lastActivity?: boolean
    userId?: boolean
    pausedById?: boolean
  }

  export type FlowAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assignedAt" | "startedAt" | "completedAt" | "deadline" | "status" | "isOverdue" | "pauseReason" | "pausedAt" | "timeSpent" | "lastActivity" | "userId" | "pausedById", ExtArgs["result"]["flowAssignment"]>
  export type FlowAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    snapshot?: boolean | FlowAssignment$snapshotArgs<ExtArgs>
    buddies?: boolean | FlowAssignment$buddiesArgs<ExtArgs>
    pausedBy?: boolean | FlowAssignment$pausedByArgs<ExtArgs>
    flowProgress?: boolean | FlowAssignment$flowProgressArgs<ExtArgs>
    _count?: boolean | FlowAssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlowAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    pausedBy?: boolean | FlowAssignment$pausedByArgs<ExtArgs>
  }
  export type FlowAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    pausedBy?: boolean | FlowAssignment$pausedByArgs<ExtArgs>
  }

  export type $FlowAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlowAssignment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      snapshot: Prisma.$FlowSnapshotPayload<ExtArgs> | null
      buddies: Prisma.$UserPayload<ExtArgs>[]
      pausedBy: Prisma.$UserPayload<ExtArgs> | null
      flowProgress: Prisma.$FlowProgressPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assignedAt: Date
      startedAt: Date | null
      completedAt: Date | null
      deadline: Date
      status: $Enums.AssignmentStatus
      isOverdue: boolean
      pauseReason: string | null
      pausedAt: Date | null
      timeSpent: number
      lastActivity: Date | null
      userId: string
      pausedById: string | null
    }, ExtArgs["result"]["flowAssignment"]>
    composites: {}
  }

  type FlowAssignmentGetPayload<S extends boolean | null | undefined | FlowAssignmentDefaultArgs> = $Result.GetResult<Prisma.$FlowAssignmentPayload, S>

  type FlowAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowAssignmentCountAggregateInputType | true
    }

  export interface FlowAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlowAssignment'], meta: { name: 'FlowAssignment' } }
    /**
     * Find zero or one FlowAssignment that matches the filter.
     * @param {FlowAssignmentFindUniqueArgs} args - Arguments to find a FlowAssignment
     * @example
     * // Get one FlowAssignment
     * const flowAssignment = await prisma.flowAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowAssignmentFindUniqueArgs>(args: SelectSubset<T, FlowAssignmentFindUniqueArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlowAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowAssignmentFindUniqueOrThrowArgs} args - Arguments to find a FlowAssignment
     * @example
     * // Get one FlowAssignment
     * const flowAssignment = await prisma.flowAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAssignmentFindFirstArgs} args - Arguments to find a FlowAssignment
     * @example
     * // Get one FlowAssignment
     * const flowAssignment = await prisma.flowAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowAssignmentFindFirstArgs>(args?: SelectSubset<T, FlowAssignmentFindFirstArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAssignmentFindFirstOrThrowArgs} args - Arguments to find a FlowAssignment
     * @example
     * // Get one FlowAssignment
     * const flowAssignment = await prisma.flowAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlowAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlowAssignments
     * const flowAssignments = await prisma.flowAssignment.findMany()
     * 
     * // Get first 10 FlowAssignments
     * const flowAssignments = await prisma.flowAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flowAssignmentWithIdOnly = await prisma.flowAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlowAssignmentFindManyArgs>(args?: SelectSubset<T, FlowAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlowAssignment.
     * @param {FlowAssignmentCreateArgs} args - Arguments to create a FlowAssignment.
     * @example
     * // Create one FlowAssignment
     * const FlowAssignment = await prisma.flowAssignment.create({
     *   data: {
     *     // ... data to create a FlowAssignment
     *   }
     * })
     * 
     */
    create<T extends FlowAssignmentCreateArgs>(args: SelectSubset<T, FlowAssignmentCreateArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlowAssignments.
     * @param {FlowAssignmentCreateManyArgs} args - Arguments to create many FlowAssignments.
     * @example
     * // Create many FlowAssignments
     * const flowAssignment = await prisma.flowAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowAssignmentCreateManyArgs>(args?: SelectSubset<T, FlowAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlowAssignments and returns the data saved in the database.
     * @param {FlowAssignmentCreateManyAndReturnArgs} args - Arguments to create many FlowAssignments.
     * @example
     * // Create many FlowAssignments
     * const flowAssignment = await prisma.flowAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlowAssignments and only return the `id`
     * const flowAssignmentWithIdOnly = await prisma.flowAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlowAssignment.
     * @param {FlowAssignmentDeleteArgs} args - Arguments to delete one FlowAssignment.
     * @example
     * // Delete one FlowAssignment
     * const FlowAssignment = await prisma.flowAssignment.delete({
     *   where: {
     *     // ... filter to delete one FlowAssignment
     *   }
     * })
     * 
     */
    delete<T extends FlowAssignmentDeleteArgs>(args: SelectSubset<T, FlowAssignmentDeleteArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlowAssignment.
     * @param {FlowAssignmentUpdateArgs} args - Arguments to update one FlowAssignment.
     * @example
     * // Update one FlowAssignment
     * const flowAssignment = await prisma.flowAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowAssignmentUpdateArgs>(args: SelectSubset<T, FlowAssignmentUpdateArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlowAssignments.
     * @param {FlowAssignmentDeleteManyArgs} args - Arguments to filter FlowAssignments to delete.
     * @example
     * // Delete a few FlowAssignments
     * const { count } = await prisma.flowAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowAssignmentDeleteManyArgs>(args?: SelectSubset<T, FlowAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlowAssignments
     * const flowAssignment = await prisma.flowAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowAssignmentUpdateManyArgs>(args: SelectSubset<T, FlowAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowAssignments and returns the data updated in the database.
     * @param {FlowAssignmentUpdateManyAndReturnArgs} args - Arguments to update many FlowAssignments.
     * @example
     * // Update many FlowAssignments
     * const flowAssignment = await prisma.flowAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlowAssignments and only return the `id`
     * const flowAssignmentWithIdOnly = await prisma.flowAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlowAssignment.
     * @param {FlowAssignmentUpsertArgs} args - Arguments to update or create a FlowAssignment.
     * @example
     * // Update or create a FlowAssignment
     * const flowAssignment = await prisma.flowAssignment.upsert({
     *   create: {
     *     // ... data to create a FlowAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlowAssignment we want to update
     *   }
     * })
     */
    upsert<T extends FlowAssignmentUpsertArgs>(args: SelectSubset<T, FlowAssignmentUpsertArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlowAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAssignmentCountArgs} args - Arguments to filter FlowAssignments to count.
     * @example
     * // Count the number of FlowAssignments
     * const count = await prisma.flowAssignment.count({
     *   where: {
     *     // ... the filter for the FlowAssignments we want to count
     *   }
     * })
    **/
    count<T extends FlowAssignmentCountArgs>(
      args?: Subset<T, FlowAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlowAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowAssignmentAggregateArgs>(args: Subset<T, FlowAssignmentAggregateArgs>): Prisma.PrismaPromise<GetFlowAssignmentAggregateType<T>>

    /**
     * Group by FlowAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: FlowAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlowAssignment model
   */
  readonly fields: FlowAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlowAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    snapshot<T extends FlowAssignment$snapshotArgs<ExtArgs> = {}>(args?: Subset<T, FlowAssignment$snapshotArgs<ExtArgs>>): Prisma__FlowSnapshotClient<$Result.GetResult<Prisma.$FlowSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    buddies<T extends FlowAssignment$buddiesArgs<ExtArgs> = {}>(args?: Subset<T, FlowAssignment$buddiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pausedBy<T extends FlowAssignment$pausedByArgs<ExtArgs> = {}>(args?: Subset<T, FlowAssignment$pausedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    flowProgress<T extends FlowAssignment$flowProgressArgs<ExtArgs> = {}>(args?: Subset<T, FlowAssignment$flowProgressArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlowAssignment model
   */
  interface FlowAssignmentFieldRefs {
    readonly id: FieldRef<"FlowAssignment", 'String'>
    readonly assignedAt: FieldRef<"FlowAssignment", 'DateTime'>
    readonly startedAt: FieldRef<"FlowAssignment", 'DateTime'>
    readonly completedAt: FieldRef<"FlowAssignment", 'DateTime'>
    readonly deadline: FieldRef<"FlowAssignment", 'DateTime'>
    readonly status: FieldRef<"FlowAssignment", 'AssignmentStatus'>
    readonly isOverdue: FieldRef<"FlowAssignment", 'Boolean'>
    readonly pauseReason: FieldRef<"FlowAssignment", 'String'>
    readonly pausedAt: FieldRef<"FlowAssignment", 'DateTime'>
    readonly timeSpent: FieldRef<"FlowAssignment", 'Int'>
    readonly lastActivity: FieldRef<"FlowAssignment", 'DateTime'>
    readonly userId: FieldRef<"FlowAssignment", 'String'>
    readonly pausedById: FieldRef<"FlowAssignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FlowAssignment findUnique
   */
  export type FlowAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which FlowAssignment to fetch.
     */
    where: FlowAssignmentWhereUniqueInput
  }

  /**
   * FlowAssignment findUniqueOrThrow
   */
  export type FlowAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which FlowAssignment to fetch.
     */
    where: FlowAssignmentWhereUniqueInput
  }

  /**
   * FlowAssignment findFirst
   */
  export type FlowAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which FlowAssignment to fetch.
     */
    where?: FlowAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowAssignments to fetch.
     */
    orderBy?: FlowAssignmentOrderByWithRelationInput | FlowAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowAssignments.
     */
    cursor?: FlowAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowAssignments.
     */
    distinct?: FlowAssignmentScalarFieldEnum | FlowAssignmentScalarFieldEnum[]
  }

  /**
   * FlowAssignment findFirstOrThrow
   */
  export type FlowAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which FlowAssignment to fetch.
     */
    where?: FlowAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowAssignments to fetch.
     */
    orderBy?: FlowAssignmentOrderByWithRelationInput | FlowAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowAssignments.
     */
    cursor?: FlowAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowAssignments.
     */
    distinct?: FlowAssignmentScalarFieldEnum | FlowAssignmentScalarFieldEnum[]
  }

  /**
   * FlowAssignment findMany
   */
  export type FlowAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which FlowAssignments to fetch.
     */
    where?: FlowAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowAssignments to fetch.
     */
    orderBy?: FlowAssignmentOrderByWithRelationInput | FlowAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlowAssignments.
     */
    cursor?: FlowAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowAssignments.
     */
    skip?: number
    distinct?: FlowAssignmentScalarFieldEnum | FlowAssignmentScalarFieldEnum[]
  }

  /**
   * FlowAssignment create
   */
  export type FlowAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a FlowAssignment.
     */
    data: XOR<FlowAssignmentCreateInput, FlowAssignmentUncheckedCreateInput>
  }

  /**
   * FlowAssignment createMany
   */
  export type FlowAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlowAssignments.
     */
    data: FlowAssignmentCreateManyInput | FlowAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlowAssignment createManyAndReturn
   */
  export type FlowAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many FlowAssignments.
     */
    data: FlowAssignmentCreateManyInput | FlowAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowAssignment update
   */
  export type FlowAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a FlowAssignment.
     */
    data: XOR<FlowAssignmentUpdateInput, FlowAssignmentUncheckedUpdateInput>
    /**
     * Choose, which FlowAssignment to update.
     */
    where: FlowAssignmentWhereUniqueInput
  }

  /**
   * FlowAssignment updateMany
   */
  export type FlowAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlowAssignments.
     */
    data: XOR<FlowAssignmentUpdateManyMutationInput, FlowAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which FlowAssignments to update
     */
    where?: FlowAssignmentWhereInput
    /**
     * Limit how many FlowAssignments to update.
     */
    limit?: number
  }

  /**
   * FlowAssignment updateManyAndReturn
   */
  export type FlowAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update FlowAssignments.
     */
    data: XOR<FlowAssignmentUpdateManyMutationInput, FlowAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which FlowAssignments to update
     */
    where?: FlowAssignmentWhereInput
    /**
     * Limit how many FlowAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowAssignment upsert
   */
  export type FlowAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the FlowAssignment to update in case it exists.
     */
    where: FlowAssignmentWhereUniqueInput
    /**
     * In case the FlowAssignment found by the `where` argument doesn't exist, create a new FlowAssignment with this data.
     */
    create: XOR<FlowAssignmentCreateInput, FlowAssignmentUncheckedCreateInput>
    /**
     * In case the FlowAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowAssignmentUpdateInput, FlowAssignmentUncheckedUpdateInput>
  }

  /**
   * FlowAssignment delete
   */
  export type FlowAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
    /**
     * Filter which FlowAssignment to delete.
     */
    where: FlowAssignmentWhereUniqueInput
  }

  /**
   * FlowAssignment deleteMany
   */
  export type FlowAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowAssignments to delete
     */
    where?: FlowAssignmentWhereInput
    /**
     * Limit how many FlowAssignments to delete.
     */
    limit?: number
  }

  /**
   * FlowAssignment.snapshot
   */
  export type FlowAssignment$snapshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowSnapshot
     */
    select?: FlowSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowSnapshot
     */
    omit?: FlowSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowSnapshotInclude<ExtArgs> | null
    where?: FlowSnapshotWhereInput
  }

  /**
   * FlowAssignment.buddies
   */
  export type FlowAssignment$buddiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * FlowAssignment.pausedBy
   */
  export type FlowAssignment$pausedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FlowAssignment.flowProgress
   */
  export type FlowAssignment$flowProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    where?: FlowProgressWhereInput
  }

  /**
   * FlowAssignment without action
   */
  export type FlowAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowAssignment
     */
    select?: FlowAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowAssignment
     */
    omit?: FlowAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model UserProgress
   */

  export type AggregateUserProgress = {
    _count: UserProgressCountAggregateOutputType | null
    _avg: UserProgressAvgAggregateOutputType | null
    _sum: UserProgressSumAggregateOutputType | null
    _min: UserProgressMinAggregateOutputType | null
    _max: UserProgressMaxAggregateOutputType | null
  }

  export type UserProgressAvgAggregateOutputType = {
    totalTimeSpent: number | null
    streakDays: number | null
  }

  export type UserProgressSumAggregateOutputType = {
    totalTimeSpent: number | null
    streakDays: number | null
  }

  export type UserProgressMinAggregateOutputType = {
    id: string | null
    totalTimeSpent: number | null
    streakDays: number | null
    userId: string | null
  }

  export type UserProgressMaxAggregateOutputType = {
    id: string | null
    totalTimeSpent: number | null
    streakDays: number | null
    userId: string | null
  }

  export type UserProgressCountAggregateOutputType = {
    id: number
    totalTimeSpent: number
    streakDays: number
    userId: number
    _all: number
  }


  export type UserProgressAvgAggregateInputType = {
    totalTimeSpent?: true
    streakDays?: true
  }

  export type UserProgressSumAggregateInputType = {
    totalTimeSpent?: true
    streakDays?: true
  }

  export type UserProgressMinAggregateInputType = {
    id?: true
    totalTimeSpent?: true
    streakDays?: true
    userId?: true
  }

  export type UserProgressMaxAggregateInputType = {
    id?: true
    totalTimeSpent?: true
    streakDays?: true
    userId?: true
  }

  export type UserProgressCountAggregateInputType = {
    id?: true
    totalTimeSpent?: true
    streakDays?: true
    userId?: true
    _all?: true
  }

  export type UserProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProgress to aggregate.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProgresses
    **/
    _count?: true | UserProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProgressMaxAggregateInputType
  }

  export type GetUserProgressAggregateType<T extends UserProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProgress[P]>
      : GetScalarType<T[P], AggregateUserProgress[P]>
  }




  export type UserProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProgressWhereInput
    orderBy?: UserProgressOrderByWithAggregationInput | UserProgressOrderByWithAggregationInput[]
    by: UserProgressScalarFieldEnum[] | UserProgressScalarFieldEnum
    having?: UserProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProgressCountAggregateInputType | true
    _avg?: UserProgressAvgAggregateInputType
    _sum?: UserProgressSumAggregateInputType
    _min?: UserProgressMinAggregateInputType
    _max?: UserProgressMaxAggregateInputType
  }

  export type UserProgressGroupByOutputType = {
    id: string
    totalTimeSpent: number
    streakDays: number
    userId: string
    _count: UserProgressCountAggregateOutputType | null
    _avg: UserProgressAvgAggregateOutputType | null
    _sum: UserProgressSumAggregateOutputType | null
    _min: UserProgressMinAggregateOutputType | null
    _max: UserProgressMaxAggregateOutputType | null
  }

  type GetUserProgressGroupByPayload<T extends UserProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProgressGroupByOutputType[P]>
            : GetScalarType<T[P], UserProgressGroupByOutputType[P]>
        }
      >
    >


  export type UserProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalTimeSpent?: boolean
    streakDays?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProgress"]>

  export type UserProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalTimeSpent?: boolean
    streakDays?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProgress"]>

  export type UserProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    totalTimeSpent?: boolean
    streakDays?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProgress"]>

  export type UserProgressSelectScalar = {
    id?: boolean
    totalTimeSpent?: boolean
    streakDays?: boolean
    userId?: boolean
  }

  export type UserProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "totalTimeSpent" | "streakDays" | "userId", ExtArgs["result"]["userProgress"]>
  export type UserProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProgress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      totalTimeSpent: number
      streakDays: number
      userId: string
    }, ExtArgs["result"]["userProgress"]>
    composites: {}
  }

  type UserProgressGetPayload<S extends boolean | null | undefined | UserProgressDefaultArgs> = $Result.GetResult<Prisma.$UserProgressPayload, S>

  type UserProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProgressCountAggregateInputType | true
    }

  export interface UserProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProgress'], meta: { name: 'UserProgress' } }
    /**
     * Find zero or one UserProgress that matches the filter.
     * @param {UserProgressFindUniqueArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProgressFindUniqueArgs>(args: SelectSubset<T, UserProgressFindUniqueArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProgressFindUniqueOrThrowArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressFindFirstArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProgressFindFirstArgs>(args?: SelectSubset<T, UserProgressFindFirstArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressFindFirstOrThrowArgs} args - Arguments to find a UserProgress
     * @example
     * // Get one UserProgress
     * const userProgress = await prisma.userProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProgresses
     * const userProgresses = await prisma.userProgress.findMany()
     * 
     * // Get first 10 UserProgresses
     * const userProgresses = await prisma.userProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProgressWithIdOnly = await prisma.userProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProgressFindManyArgs>(args?: SelectSubset<T, UserProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProgress.
     * @param {UserProgressCreateArgs} args - Arguments to create a UserProgress.
     * @example
     * // Create one UserProgress
     * const UserProgress = await prisma.userProgress.create({
     *   data: {
     *     // ... data to create a UserProgress
     *   }
     * })
     * 
     */
    create<T extends UserProgressCreateArgs>(args: SelectSubset<T, UserProgressCreateArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProgresses.
     * @param {UserProgressCreateManyArgs} args - Arguments to create many UserProgresses.
     * @example
     * // Create many UserProgresses
     * const userProgress = await prisma.userProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProgressCreateManyArgs>(args?: SelectSubset<T, UserProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProgresses and returns the data saved in the database.
     * @param {UserProgressCreateManyAndReturnArgs} args - Arguments to create many UserProgresses.
     * @example
     * // Create many UserProgresses
     * const userProgress = await prisma.userProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProgresses and only return the `id`
     * const userProgressWithIdOnly = await prisma.userProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProgress.
     * @param {UserProgressDeleteArgs} args - Arguments to delete one UserProgress.
     * @example
     * // Delete one UserProgress
     * const UserProgress = await prisma.userProgress.delete({
     *   where: {
     *     // ... filter to delete one UserProgress
     *   }
     * })
     * 
     */
    delete<T extends UserProgressDeleteArgs>(args: SelectSubset<T, UserProgressDeleteArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProgress.
     * @param {UserProgressUpdateArgs} args - Arguments to update one UserProgress.
     * @example
     * // Update one UserProgress
     * const userProgress = await prisma.userProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProgressUpdateArgs>(args: SelectSubset<T, UserProgressUpdateArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProgresses.
     * @param {UserProgressDeleteManyArgs} args - Arguments to filter UserProgresses to delete.
     * @example
     * // Delete a few UserProgresses
     * const { count } = await prisma.userProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProgressDeleteManyArgs>(args?: SelectSubset<T, UserProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProgresses
     * const userProgress = await prisma.userProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProgressUpdateManyArgs>(args: SelectSubset<T, UserProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProgresses and returns the data updated in the database.
     * @param {UserProgressUpdateManyAndReturnArgs} args - Arguments to update many UserProgresses.
     * @example
     * // Update many UserProgresses
     * const userProgress = await prisma.userProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProgresses and only return the `id`
     * const userProgressWithIdOnly = await prisma.userProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProgress.
     * @param {UserProgressUpsertArgs} args - Arguments to update or create a UserProgress.
     * @example
     * // Update or create a UserProgress
     * const userProgress = await prisma.userProgress.upsert({
     *   create: {
     *     // ... data to create a UserProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProgress we want to update
     *   }
     * })
     */
    upsert<T extends UserProgressUpsertArgs>(args: SelectSubset<T, UserProgressUpsertArgs<ExtArgs>>): Prisma__UserProgressClient<$Result.GetResult<Prisma.$UserProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressCountArgs} args - Arguments to filter UserProgresses to count.
     * @example
     * // Count the number of UserProgresses
     * const count = await prisma.userProgress.count({
     *   where: {
     *     // ... the filter for the UserProgresses we want to count
     *   }
     * })
    **/
    count<T extends UserProgressCountArgs>(
      args?: Subset<T, UserProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProgressAggregateArgs>(args: Subset<T, UserProgressAggregateArgs>): Prisma.PrismaPromise<GetUserProgressAggregateType<T>>

    /**
     * Group by UserProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProgressGroupByArgs['orderBy'] }
        : { orderBy?: UserProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProgress model
   */
  readonly fields: UserProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProgress model
   */
  interface UserProgressFieldRefs {
    readonly id: FieldRef<"UserProgress", 'String'>
    readonly totalTimeSpent: FieldRef<"UserProgress", 'Int'>
    readonly streakDays: FieldRef<"UserProgress", 'Int'>
    readonly userId: FieldRef<"UserProgress", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserProgress findUnique
   */
  export type UserProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress findUniqueOrThrow
   */
  export type UserProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress findFirst
   */
  export type UserProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProgresses.
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProgresses.
     */
    distinct?: UserProgressScalarFieldEnum | UserProgressScalarFieldEnum[]
  }

  /**
   * UserProgress findFirstOrThrow
   */
  export type UserProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgress to fetch.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProgresses.
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProgresses.
     */
    distinct?: UserProgressScalarFieldEnum | UserProgressScalarFieldEnum[]
  }

  /**
   * UserProgress findMany
   */
  export type UserProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter, which UserProgresses to fetch.
     */
    where?: UserProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProgresses to fetch.
     */
    orderBy?: UserProgressOrderByWithRelationInput | UserProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProgresses.
     */
    cursor?: UserProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProgresses.
     */
    skip?: number
    distinct?: UserProgressScalarFieldEnum | UserProgressScalarFieldEnum[]
  }

  /**
   * UserProgress create
   */
  export type UserProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProgress.
     */
    data: XOR<UserProgressCreateInput, UserProgressUncheckedCreateInput>
  }

  /**
   * UserProgress createMany
   */
  export type UserProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProgresses.
     */
    data: UserProgressCreateManyInput | UserProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProgress createManyAndReturn
   */
  export type UserProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * The data used to create many UserProgresses.
     */
    data: UserProgressCreateManyInput | UserProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProgress update
   */
  export type UserProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProgress.
     */
    data: XOR<UserProgressUpdateInput, UserProgressUncheckedUpdateInput>
    /**
     * Choose, which UserProgress to update.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress updateMany
   */
  export type UserProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProgresses.
     */
    data: XOR<UserProgressUpdateManyMutationInput, UserProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserProgresses to update
     */
    where?: UserProgressWhereInput
    /**
     * Limit how many UserProgresses to update.
     */
    limit?: number
  }

  /**
   * UserProgress updateManyAndReturn
   */
  export type UserProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * The data used to update UserProgresses.
     */
    data: XOR<UserProgressUpdateManyMutationInput, UserProgressUncheckedUpdateManyInput>
    /**
     * Filter which UserProgresses to update
     */
    where?: UserProgressWhereInput
    /**
     * Limit how many UserProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProgress upsert
   */
  export type UserProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProgress to update in case it exists.
     */
    where: UserProgressWhereUniqueInput
    /**
     * In case the UserProgress found by the `where` argument doesn't exist, create a new UserProgress with this data.
     */
    create: XOR<UserProgressCreateInput, UserProgressUncheckedCreateInput>
    /**
     * In case the UserProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProgressUpdateInput, UserProgressUncheckedUpdateInput>
  }

  /**
   * UserProgress delete
   */
  export type UserProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
    /**
     * Filter which UserProgress to delete.
     */
    where: UserProgressWhereUniqueInput
  }

  /**
   * UserProgress deleteMany
   */
  export type UserProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProgresses to delete
     */
    where?: UserProgressWhereInput
    /**
     * Limit how many UserProgresses to delete.
     */
    limit?: number
  }

  /**
   * UserProgress without action
   */
  export type UserProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProgress
     */
    select?: UserProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProgress
     */
    omit?: UserProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProgressInclude<ExtArgs> | null
  }


  /**
   * Model FlowProgress
   */

  export type AggregateFlowProgress = {
    _count: FlowProgressCountAggregateOutputType | null
    _avg: FlowProgressAvgAggregateOutputType | null
    _sum: FlowProgressSumAggregateOutputType | null
    _min: FlowProgressMinAggregateOutputType | null
    _max: FlowProgressMaxAggregateOutputType | null
  }

  export type FlowProgressAvgAggregateOutputType = {
    percentage: number | null
  }

  export type FlowProgressSumAggregateOutputType = {
    percentage: number | null
  }

  export type FlowProgressMinAggregateOutputType = {
    id: string | null
    assignmentId: string | null
    status: $Enums.FlowStatus | null
    percentage: number | null
    lastActivity: Date | null
  }

  export type FlowProgressMaxAggregateOutputType = {
    id: string | null
    assignmentId: string | null
    status: $Enums.FlowStatus | null
    percentage: number | null
    lastActivity: Date | null
  }

  export type FlowProgressCountAggregateOutputType = {
    id: number
    assignmentId: number
    status: number
    percentage: number
    lastActivity: number
    _all: number
  }


  export type FlowProgressAvgAggregateInputType = {
    percentage?: true
  }

  export type FlowProgressSumAggregateInputType = {
    percentage?: true
  }

  export type FlowProgressMinAggregateInputType = {
    id?: true
    assignmentId?: true
    status?: true
    percentage?: true
    lastActivity?: true
  }

  export type FlowProgressMaxAggregateInputType = {
    id?: true
    assignmentId?: true
    status?: true
    percentage?: true
    lastActivity?: true
  }

  export type FlowProgressCountAggregateInputType = {
    id?: true
    assignmentId?: true
    status?: true
    percentage?: true
    lastActivity?: true
    _all?: true
  }

  export type FlowProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowProgress to aggregate.
     */
    where?: FlowProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowProgresses to fetch.
     */
    orderBy?: FlowProgressOrderByWithRelationInput | FlowProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FlowProgresses
    **/
    _count?: true | FlowProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlowProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlowProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowProgressMaxAggregateInputType
  }

  export type GetFlowProgressAggregateType<T extends FlowProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateFlowProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlowProgress[P]>
      : GetScalarType<T[P], AggregateFlowProgress[P]>
  }




  export type FlowProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowProgressWhereInput
    orderBy?: FlowProgressOrderByWithAggregationInput | FlowProgressOrderByWithAggregationInput[]
    by: FlowProgressScalarFieldEnum[] | FlowProgressScalarFieldEnum
    having?: FlowProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowProgressCountAggregateInputType | true
    _avg?: FlowProgressAvgAggregateInputType
    _sum?: FlowProgressSumAggregateInputType
    _min?: FlowProgressMinAggregateInputType
    _max?: FlowProgressMaxAggregateInputType
  }

  export type FlowProgressGroupByOutputType = {
    id: string
    assignmentId: string
    status: $Enums.FlowStatus
    percentage: number
    lastActivity: Date | null
    _count: FlowProgressCountAggregateOutputType | null
    _avg: FlowProgressAvgAggregateOutputType | null
    _sum: FlowProgressSumAggregateOutputType | null
    _min: FlowProgressMinAggregateOutputType | null
    _max: FlowProgressMaxAggregateOutputType | null
  }

  type GetFlowProgressGroupByPayload<T extends FlowProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowProgressGroupByOutputType[P]>
            : GetScalarType<T[P], FlowProgressGroupByOutputType[P]>
        }
      >
    >


  export type FlowProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    status?: boolean
    percentage?: boolean
    lastActivity?: boolean
    assignment?: boolean | FlowAssignmentDefaultArgs<ExtArgs>
    stepsProgress?: boolean | FlowProgress$stepsProgressArgs<ExtArgs>
    _count?: boolean | FlowProgressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowProgress"]>

  export type FlowProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    status?: boolean
    percentage?: boolean
    lastActivity?: boolean
    assignment?: boolean | FlowAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowProgress"]>

  export type FlowProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    status?: boolean
    percentage?: boolean
    lastActivity?: boolean
    assignment?: boolean | FlowAssignmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowProgress"]>

  export type FlowProgressSelectScalar = {
    id?: boolean
    assignmentId?: boolean
    status?: boolean
    percentage?: boolean
    lastActivity?: boolean
  }

  export type FlowProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assignmentId" | "status" | "percentage" | "lastActivity", ExtArgs["result"]["flowProgress"]>
  export type FlowProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | FlowAssignmentDefaultArgs<ExtArgs>
    stepsProgress?: boolean | FlowProgress$stepsProgressArgs<ExtArgs>
    _count?: boolean | FlowProgressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FlowProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | FlowAssignmentDefaultArgs<ExtArgs>
  }
  export type FlowProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | FlowAssignmentDefaultArgs<ExtArgs>
  }

  export type $FlowProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FlowProgress"
    objects: {
      assignment: Prisma.$FlowAssignmentPayload<ExtArgs>
      stepsProgress: Prisma.$StepProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assignmentId: string
      status: $Enums.FlowStatus
      percentage: number
      lastActivity: Date | null
    }, ExtArgs["result"]["flowProgress"]>
    composites: {}
  }

  type FlowProgressGetPayload<S extends boolean | null | undefined | FlowProgressDefaultArgs> = $Result.GetResult<Prisma.$FlowProgressPayload, S>

  type FlowProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowProgressCountAggregateInputType | true
    }

  export interface FlowProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FlowProgress'], meta: { name: 'FlowProgress' } }
    /**
     * Find zero or one FlowProgress that matches the filter.
     * @param {FlowProgressFindUniqueArgs} args - Arguments to find a FlowProgress
     * @example
     * // Get one FlowProgress
     * const flowProgress = await prisma.flowProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowProgressFindUniqueArgs>(args: SelectSubset<T, FlowProgressFindUniqueArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FlowProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowProgressFindUniqueOrThrowArgs} args - Arguments to find a FlowProgress
     * @example
     * // Get one FlowProgress
     * const flowProgress = await prisma.flowProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowProgressFindFirstArgs} args - Arguments to find a FlowProgress
     * @example
     * // Get one FlowProgress
     * const flowProgress = await prisma.flowProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowProgressFindFirstArgs>(args?: SelectSubset<T, FlowProgressFindFirstArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FlowProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowProgressFindFirstOrThrowArgs} args - Arguments to find a FlowProgress
     * @example
     * // Get one FlowProgress
     * const flowProgress = await prisma.flowProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FlowProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FlowProgresses
     * const flowProgresses = await prisma.flowProgress.findMany()
     * 
     * // Get first 10 FlowProgresses
     * const flowProgresses = await prisma.flowProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const flowProgressWithIdOnly = await prisma.flowProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FlowProgressFindManyArgs>(args?: SelectSubset<T, FlowProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FlowProgress.
     * @param {FlowProgressCreateArgs} args - Arguments to create a FlowProgress.
     * @example
     * // Create one FlowProgress
     * const FlowProgress = await prisma.flowProgress.create({
     *   data: {
     *     // ... data to create a FlowProgress
     *   }
     * })
     * 
     */
    create<T extends FlowProgressCreateArgs>(args: SelectSubset<T, FlowProgressCreateArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FlowProgresses.
     * @param {FlowProgressCreateManyArgs} args - Arguments to create many FlowProgresses.
     * @example
     * // Create many FlowProgresses
     * const flowProgress = await prisma.flowProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowProgressCreateManyArgs>(args?: SelectSubset<T, FlowProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FlowProgresses and returns the data saved in the database.
     * @param {FlowProgressCreateManyAndReturnArgs} args - Arguments to create many FlowProgresses.
     * @example
     * // Create many FlowProgresses
     * const flowProgress = await prisma.flowProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FlowProgresses and only return the `id`
     * const flowProgressWithIdOnly = await prisma.flowProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FlowProgress.
     * @param {FlowProgressDeleteArgs} args - Arguments to delete one FlowProgress.
     * @example
     * // Delete one FlowProgress
     * const FlowProgress = await prisma.flowProgress.delete({
     *   where: {
     *     // ... filter to delete one FlowProgress
     *   }
     * })
     * 
     */
    delete<T extends FlowProgressDeleteArgs>(args: SelectSubset<T, FlowProgressDeleteArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FlowProgress.
     * @param {FlowProgressUpdateArgs} args - Arguments to update one FlowProgress.
     * @example
     * // Update one FlowProgress
     * const flowProgress = await prisma.flowProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowProgressUpdateArgs>(args: SelectSubset<T, FlowProgressUpdateArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FlowProgresses.
     * @param {FlowProgressDeleteManyArgs} args - Arguments to filter FlowProgresses to delete.
     * @example
     * // Delete a few FlowProgresses
     * const { count } = await prisma.flowProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowProgressDeleteManyArgs>(args?: SelectSubset<T, FlowProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FlowProgresses
     * const flowProgress = await prisma.flowProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowProgressUpdateManyArgs>(args: SelectSubset<T, FlowProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FlowProgresses and returns the data updated in the database.
     * @param {FlowProgressUpdateManyAndReturnArgs} args - Arguments to update many FlowProgresses.
     * @example
     * // Update many FlowProgresses
     * const flowProgress = await prisma.flowProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FlowProgresses and only return the `id`
     * const flowProgressWithIdOnly = await prisma.flowProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FlowProgress.
     * @param {FlowProgressUpsertArgs} args - Arguments to update or create a FlowProgress.
     * @example
     * // Update or create a FlowProgress
     * const flowProgress = await prisma.flowProgress.upsert({
     *   create: {
     *     // ... data to create a FlowProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FlowProgress we want to update
     *   }
     * })
     */
    upsert<T extends FlowProgressUpsertArgs>(args: SelectSubset<T, FlowProgressUpsertArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FlowProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowProgressCountArgs} args - Arguments to filter FlowProgresses to count.
     * @example
     * // Count the number of FlowProgresses
     * const count = await prisma.flowProgress.count({
     *   where: {
     *     // ... the filter for the FlowProgresses we want to count
     *   }
     * })
    **/
    count<T extends FlowProgressCountArgs>(
      args?: Subset<T, FlowProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FlowProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowProgressAggregateArgs>(args: Subset<T, FlowProgressAggregateArgs>): Prisma.PrismaPromise<GetFlowProgressAggregateType<T>>

    /**
     * Group by FlowProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowProgressGroupByArgs['orderBy'] }
        : { orderBy?: FlowProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FlowProgress model
   */
  readonly fields: FlowProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FlowProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends FlowAssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowAssignmentDefaultArgs<ExtArgs>>): Prisma__FlowAssignmentClient<$Result.GetResult<Prisma.$FlowAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stepsProgress<T extends FlowProgress$stepsProgressArgs<ExtArgs> = {}>(args?: Subset<T, FlowProgress$stepsProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FlowProgress model
   */
  interface FlowProgressFieldRefs {
    readonly id: FieldRef<"FlowProgress", 'String'>
    readonly assignmentId: FieldRef<"FlowProgress", 'String'>
    readonly status: FieldRef<"FlowProgress", 'FlowStatus'>
    readonly percentage: FieldRef<"FlowProgress", 'Float'>
    readonly lastActivity: FieldRef<"FlowProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FlowProgress findUnique
   */
  export type FlowProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * Filter, which FlowProgress to fetch.
     */
    where: FlowProgressWhereUniqueInput
  }

  /**
   * FlowProgress findUniqueOrThrow
   */
  export type FlowProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * Filter, which FlowProgress to fetch.
     */
    where: FlowProgressWhereUniqueInput
  }

  /**
   * FlowProgress findFirst
   */
  export type FlowProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * Filter, which FlowProgress to fetch.
     */
    where?: FlowProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowProgresses to fetch.
     */
    orderBy?: FlowProgressOrderByWithRelationInput | FlowProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowProgresses.
     */
    cursor?: FlowProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowProgresses.
     */
    distinct?: FlowProgressScalarFieldEnum | FlowProgressScalarFieldEnum[]
  }

  /**
   * FlowProgress findFirstOrThrow
   */
  export type FlowProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * Filter, which FlowProgress to fetch.
     */
    where?: FlowProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowProgresses to fetch.
     */
    orderBy?: FlowProgressOrderByWithRelationInput | FlowProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FlowProgresses.
     */
    cursor?: FlowProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FlowProgresses.
     */
    distinct?: FlowProgressScalarFieldEnum | FlowProgressScalarFieldEnum[]
  }

  /**
   * FlowProgress findMany
   */
  export type FlowProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * Filter, which FlowProgresses to fetch.
     */
    where?: FlowProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FlowProgresses to fetch.
     */
    orderBy?: FlowProgressOrderByWithRelationInput | FlowProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FlowProgresses.
     */
    cursor?: FlowProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FlowProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FlowProgresses.
     */
    skip?: number
    distinct?: FlowProgressScalarFieldEnum | FlowProgressScalarFieldEnum[]
  }

  /**
   * FlowProgress create
   */
  export type FlowProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a FlowProgress.
     */
    data: XOR<FlowProgressCreateInput, FlowProgressUncheckedCreateInput>
  }

  /**
   * FlowProgress createMany
   */
  export type FlowProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FlowProgresses.
     */
    data: FlowProgressCreateManyInput | FlowProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FlowProgress createManyAndReturn
   */
  export type FlowProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * The data used to create many FlowProgresses.
     */
    data: FlowProgressCreateManyInput | FlowProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowProgress update
   */
  export type FlowProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a FlowProgress.
     */
    data: XOR<FlowProgressUpdateInput, FlowProgressUncheckedUpdateInput>
    /**
     * Choose, which FlowProgress to update.
     */
    where: FlowProgressWhereUniqueInput
  }

  /**
   * FlowProgress updateMany
   */
  export type FlowProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FlowProgresses.
     */
    data: XOR<FlowProgressUpdateManyMutationInput, FlowProgressUncheckedUpdateManyInput>
    /**
     * Filter which FlowProgresses to update
     */
    where?: FlowProgressWhereInput
    /**
     * Limit how many FlowProgresses to update.
     */
    limit?: number
  }

  /**
   * FlowProgress updateManyAndReturn
   */
  export type FlowProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * The data used to update FlowProgresses.
     */
    data: XOR<FlowProgressUpdateManyMutationInput, FlowProgressUncheckedUpdateManyInput>
    /**
     * Filter which FlowProgresses to update
     */
    where?: FlowProgressWhereInput
    /**
     * Limit how many FlowProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FlowProgress upsert
   */
  export type FlowProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the FlowProgress to update in case it exists.
     */
    where: FlowProgressWhereUniqueInput
    /**
     * In case the FlowProgress found by the `where` argument doesn't exist, create a new FlowProgress with this data.
     */
    create: XOR<FlowProgressCreateInput, FlowProgressUncheckedCreateInput>
    /**
     * In case the FlowProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowProgressUpdateInput, FlowProgressUncheckedUpdateInput>
  }

  /**
   * FlowProgress delete
   */
  export type FlowProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
    /**
     * Filter which FlowProgress to delete.
     */
    where: FlowProgressWhereUniqueInput
  }

  /**
   * FlowProgress deleteMany
   */
  export type FlowProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FlowProgresses to delete
     */
    where?: FlowProgressWhereInput
    /**
     * Limit how many FlowProgresses to delete.
     */
    limit?: number
  }

  /**
   * FlowProgress.stepsProgress
   */
  export type FlowProgress$stepsProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    where?: StepProgressWhereInput
    orderBy?: StepProgressOrderByWithRelationInput | StepProgressOrderByWithRelationInput[]
    cursor?: StepProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StepProgressScalarFieldEnum | StepProgressScalarFieldEnum[]
  }

  /**
   * FlowProgress without action
   */
  export type FlowProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FlowProgress
     */
    select?: FlowProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FlowProgress
     */
    omit?: FlowProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowProgressInclude<ExtArgs> | null
  }


  /**
   * Model StepProgress
   */

  export type AggregateStepProgress = {
    _count: StepProgressCountAggregateOutputType | null
    _avg: StepProgressAvgAggregateOutputType | null
    _sum: StepProgressSumAggregateOutputType | null
    _min: StepProgressMinAggregateOutputType | null
    _max: StepProgressMaxAggregateOutputType | null
  }

  export type StepProgressAvgAggregateOutputType = {
    percentage: number | null
    timeSpent: number | null
  }

  export type StepProgressSumAggregateOutputType = {
    percentage: number | null
    timeSpent: number | null
  }

  export type StepProgressMinAggregateOutputType = {
    id: string | null
    stepSnapshotId: string | null
    status: $Enums.StepStatus | null
    percentage: number | null
    startedAt: Date | null
    completedAt: Date | null
    timeSpent: number | null
    flowProgressId: string | null
  }

  export type StepProgressMaxAggregateOutputType = {
    id: string | null
    stepSnapshotId: string | null
    status: $Enums.StepStatus | null
    percentage: number | null
    startedAt: Date | null
    completedAt: Date | null
    timeSpent: number | null
    flowProgressId: string | null
  }

  export type StepProgressCountAggregateOutputType = {
    id: number
    stepSnapshotId: number
    status: number
    percentage: number
    startedAt: number
    completedAt: number
    timeSpent: number
    flowProgressId: number
    _all: number
  }


  export type StepProgressAvgAggregateInputType = {
    percentage?: true
    timeSpent?: true
  }

  export type StepProgressSumAggregateInputType = {
    percentage?: true
    timeSpent?: true
  }

  export type StepProgressMinAggregateInputType = {
    id?: true
    stepSnapshotId?: true
    status?: true
    percentage?: true
    startedAt?: true
    completedAt?: true
    timeSpent?: true
    flowProgressId?: true
  }

  export type StepProgressMaxAggregateInputType = {
    id?: true
    stepSnapshotId?: true
    status?: true
    percentage?: true
    startedAt?: true
    completedAt?: true
    timeSpent?: true
    flowProgressId?: true
  }

  export type StepProgressCountAggregateInputType = {
    id?: true
    stepSnapshotId?: true
    status?: true
    percentage?: true
    startedAt?: true
    completedAt?: true
    timeSpent?: true
    flowProgressId?: true
    _all?: true
  }

  export type StepProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StepProgress to aggregate.
     */
    where?: StepProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepProgresses to fetch.
     */
    orderBy?: StepProgressOrderByWithRelationInput | StepProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StepProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StepProgresses
    **/
    _count?: true | StepProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StepProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StepProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StepProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StepProgressMaxAggregateInputType
  }

  export type GetStepProgressAggregateType<T extends StepProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateStepProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStepProgress[P]>
      : GetScalarType<T[P], AggregateStepProgress[P]>
  }




  export type StepProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StepProgressWhereInput
    orderBy?: StepProgressOrderByWithAggregationInput | StepProgressOrderByWithAggregationInput[]
    by: StepProgressScalarFieldEnum[] | StepProgressScalarFieldEnum
    having?: StepProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StepProgressCountAggregateInputType | true
    _avg?: StepProgressAvgAggregateInputType
    _sum?: StepProgressSumAggregateInputType
    _min?: StepProgressMinAggregateInputType
    _max?: StepProgressMaxAggregateInputType
  }

  export type StepProgressGroupByOutputType = {
    id: string
    stepSnapshotId: string
    status: $Enums.StepStatus
    percentage: number
    startedAt: Date | null
    completedAt: Date | null
    timeSpent: number
    flowProgressId: string
    _count: StepProgressCountAggregateOutputType | null
    _avg: StepProgressAvgAggregateOutputType | null
    _sum: StepProgressSumAggregateOutputType | null
    _min: StepProgressMinAggregateOutputType | null
    _max: StepProgressMaxAggregateOutputType | null
  }

  type GetStepProgressGroupByPayload<T extends StepProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StepProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StepProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StepProgressGroupByOutputType[P]>
            : GetScalarType<T[P], StepProgressGroupByOutputType[P]>
        }
      >
    >


  export type StepProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stepSnapshotId?: boolean
    status?: boolean
    percentage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    flowProgressId?: boolean
    stepSnapshot?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    flowProgress?: boolean | FlowProgressDefaultArgs<ExtArgs>
    componentProgress?: boolean | StepProgress$componentProgressArgs<ExtArgs>
    _count?: boolean | StepProgressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepProgress"]>

  export type StepProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stepSnapshotId?: boolean
    status?: boolean
    percentage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    flowProgressId?: boolean
    stepSnapshot?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    flowProgress?: boolean | FlowProgressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepProgress"]>

  export type StepProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stepSnapshotId?: boolean
    status?: boolean
    percentage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    flowProgressId?: boolean
    stepSnapshot?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    flowProgress?: boolean | FlowProgressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stepProgress"]>

  export type StepProgressSelectScalar = {
    id?: boolean
    stepSnapshotId?: boolean
    status?: boolean
    percentage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    flowProgressId?: boolean
  }

  export type StepProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stepSnapshotId" | "status" | "percentage" | "startedAt" | "completedAt" | "timeSpent" | "flowProgressId", ExtArgs["result"]["stepProgress"]>
  export type StepProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stepSnapshot?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    flowProgress?: boolean | FlowProgressDefaultArgs<ExtArgs>
    componentProgress?: boolean | StepProgress$componentProgressArgs<ExtArgs>
    _count?: boolean | StepProgressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StepProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stepSnapshot?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    flowProgress?: boolean | FlowProgressDefaultArgs<ExtArgs>
  }
  export type StepProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stepSnapshot?: boolean | FlowStepSnapshotDefaultArgs<ExtArgs>
    flowProgress?: boolean | FlowProgressDefaultArgs<ExtArgs>
  }

  export type $StepProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StepProgress"
    objects: {
      stepSnapshot: Prisma.$FlowStepSnapshotPayload<ExtArgs>
      flowProgress: Prisma.$FlowProgressPayload<ExtArgs>
      componentProgress: Prisma.$ComponentProgressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stepSnapshotId: string
      status: $Enums.StepStatus
      percentage: number
      startedAt: Date | null
      completedAt: Date | null
      timeSpent: number
      flowProgressId: string
    }, ExtArgs["result"]["stepProgress"]>
    composites: {}
  }

  type StepProgressGetPayload<S extends boolean | null | undefined | StepProgressDefaultArgs> = $Result.GetResult<Prisma.$StepProgressPayload, S>

  type StepProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StepProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StepProgressCountAggregateInputType | true
    }

  export interface StepProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StepProgress'], meta: { name: 'StepProgress' } }
    /**
     * Find zero or one StepProgress that matches the filter.
     * @param {StepProgressFindUniqueArgs} args - Arguments to find a StepProgress
     * @example
     * // Get one StepProgress
     * const stepProgress = await prisma.stepProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StepProgressFindUniqueArgs>(args: SelectSubset<T, StepProgressFindUniqueArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StepProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StepProgressFindUniqueOrThrowArgs} args - Arguments to find a StepProgress
     * @example
     * // Get one StepProgress
     * const stepProgress = await prisma.stepProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StepProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, StepProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StepProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepProgressFindFirstArgs} args - Arguments to find a StepProgress
     * @example
     * // Get one StepProgress
     * const stepProgress = await prisma.stepProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StepProgressFindFirstArgs>(args?: SelectSubset<T, StepProgressFindFirstArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StepProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepProgressFindFirstOrThrowArgs} args - Arguments to find a StepProgress
     * @example
     * // Get one StepProgress
     * const stepProgress = await prisma.stepProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StepProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, StepProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StepProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StepProgresses
     * const stepProgresses = await prisma.stepProgress.findMany()
     * 
     * // Get first 10 StepProgresses
     * const stepProgresses = await prisma.stepProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stepProgressWithIdOnly = await prisma.stepProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StepProgressFindManyArgs>(args?: SelectSubset<T, StepProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StepProgress.
     * @param {StepProgressCreateArgs} args - Arguments to create a StepProgress.
     * @example
     * // Create one StepProgress
     * const StepProgress = await prisma.stepProgress.create({
     *   data: {
     *     // ... data to create a StepProgress
     *   }
     * })
     * 
     */
    create<T extends StepProgressCreateArgs>(args: SelectSubset<T, StepProgressCreateArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StepProgresses.
     * @param {StepProgressCreateManyArgs} args - Arguments to create many StepProgresses.
     * @example
     * // Create many StepProgresses
     * const stepProgress = await prisma.stepProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StepProgressCreateManyArgs>(args?: SelectSubset<T, StepProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StepProgresses and returns the data saved in the database.
     * @param {StepProgressCreateManyAndReturnArgs} args - Arguments to create many StepProgresses.
     * @example
     * // Create many StepProgresses
     * const stepProgress = await prisma.stepProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StepProgresses and only return the `id`
     * const stepProgressWithIdOnly = await prisma.stepProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StepProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, StepProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StepProgress.
     * @param {StepProgressDeleteArgs} args - Arguments to delete one StepProgress.
     * @example
     * // Delete one StepProgress
     * const StepProgress = await prisma.stepProgress.delete({
     *   where: {
     *     // ... filter to delete one StepProgress
     *   }
     * })
     * 
     */
    delete<T extends StepProgressDeleteArgs>(args: SelectSubset<T, StepProgressDeleteArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StepProgress.
     * @param {StepProgressUpdateArgs} args - Arguments to update one StepProgress.
     * @example
     * // Update one StepProgress
     * const stepProgress = await prisma.stepProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StepProgressUpdateArgs>(args: SelectSubset<T, StepProgressUpdateArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StepProgresses.
     * @param {StepProgressDeleteManyArgs} args - Arguments to filter StepProgresses to delete.
     * @example
     * // Delete a few StepProgresses
     * const { count } = await prisma.stepProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StepProgressDeleteManyArgs>(args?: SelectSubset<T, StepProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StepProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StepProgresses
     * const stepProgress = await prisma.stepProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StepProgressUpdateManyArgs>(args: SelectSubset<T, StepProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StepProgresses and returns the data updated in the database.
     * @param {StepProgressUpdateManyAndReturnArgs} args - Arguments to update many StepProgresses.
     * @example
     * // Update many StepProgresses
     * const stepProgress = await prisma.stepProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StepProgresses and only return the `id`
     * const stepProgressWithIdOnly = await prisma.stepProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StepProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, StepProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StepProgress.
     * @param {StepProgressUpsertArgs} args - Arguments to update or create a StepProgress.
     * @example
     * // Update or create a StepProgress
     * const stepProgress = await prisma.stepProgress.upsert({
     *   create: {
     *     // ... data to create a StepProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StepProgress we want to update
     *   }
     * })
     */
    upsert<T extends StepProgressUpsertArgs>(args: SelectSubset<T, StepProgressUpsertArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StepProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepProgressCountArgs} args - Arguments to filter StepProgresses to count.
     * @example
     * // Count the number of StepProgresses
     * const count = await prisma.stepProgress.count({
     *   where: {
     *     // ... the filter for the StepProgresses we want to count
     *   }
     * })
    **/
    count<T extends StepProgressCountArgs>(
      args?: Subset<T, StepProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StepProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StepProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StepProgressAggregateArgs>(args: Subset<T, StepProgressAggregateArgs>): Prisma.PrismaPromise<GetStepProgressAggregateType<T>>

    /**
     * Group by StepProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StepProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StepProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StepProgressGroupByArgs['orderBy'] }
        : { orderBy?: StepProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StepProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStepProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StepProgress model
   */
  readonly fields: StepProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StepProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StepProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stepSnapshot<T extends FlowStepSnapshotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowStepSnapshotDefaultArgs<ExtArgs>>): Prisma__FlowStepSnapshotClient<$Result.GetResult<Prisma.$FlowStepSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    flowProgress<T extends FlowProgressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FlowProgressDefaultArgs<ExtArgs>>): Prisma__FlowProgressClient<$Result.GetResult<Prisma.$FlowProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    componentProgress<T extends StepProgress$componentProgressArgs<ExtArgs> = {}>(args?: Subset<T, StepProgress$componentProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StepProgress model
   */
  interface StepProgressFieldRefs {
    readonly id: FieldRef<"StepProgress", 'String'>
    readonly stepSnapshotId: FieldRef<"StepProgress", 'String'>
    readonly status: FieldRef<"StepProgress", 'StepStatus'>
    readonly percentage: FieldRef<"StepProgress", 'Float'>
    readonly startedAt: FieldRef<"StepProgress", 'DateTime'>
    readonly completedAt: FieldRef<"StepProgress", 'DateTime'>
    readonly timeSpent: FieldRef<"StepProgress", 'Int'>
    readonly flowProgressId: FieldRef<"StepProgress", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StepProgress findUnique
   */
  export type StepProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * Filter, which StepProgress to fetch.
     */
    where: StepProgressWhereUniqueInput
  }

  /**
   * StepProgress findUniqueOrThrow
   */
  export type StepProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * Filter, which StepProgress to fetch.
     */
    where: StepProgressWhereUniqueInput
  }

  /**
   * StepProgress findFirst
   */
  export type StepProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * Filter, which StepProgress to fetch.
     */
    where?: StepProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepProgresses to fetch.
     */
    orderBy?: StepProgressOrderByWithRelationInput | StepProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StepProgresses.
     */
    cursor?: StepProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StepProgresses.
     */
    distinct?: StepProgressScalarFieldEnum | StepProgressScalarFieldEnum[]
  }

  /**
   * StepProgress findFirstOrThrow
   */
  export type StepProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * Filter, which StepProgress to fetch.
     */
    where?: StepProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepProgresses to fetch.
     */
    orderBy?: StepProgressOrderByWithRelationInput | StepProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StepProgresses.
     */
    cursor?: StepProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StepProgresses.
     */
    distinct?: StepProgressScalarFieldEnum | StepProgressScalarFieldEnum[]
  }

  /**
   * StepProgress findMany
   */
  export type StepProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * Filter, which StepProgresses to fetch.
     */
    where?: StepProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StepProgresses to fetch.
     */
    orderBy?: StepProgressOrderByWithRelationInput | StepProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StepProgresses.
     */
    cursor?: StepProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StepProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StepProgresses.
     */
    skip?: number
    distinct?: StepProgressScalarFieldEnum | StepProgressScalarFieldEnum[]
  }

  /**
   * StepProgress create
   */
  export type StepProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a StepProgress.
     */
    data: XOR<StepProgressCreateInput, StepProgressUncheckedCreateInput>
  }

  /**
   * StepProgress createMany
   */
  export type StepProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StepProgresses.
     */
    data: StepProgressCreateManyInput | StepProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StepProgress createManyAndReturn
   */
  export type StepProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * The data used to create many StepProgresses.
     */
    data: StepProgressCreateManyInput | StepProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StepProgress update
   */
  export type StepProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a StepProgress.
     */
    data: XOR<StepProgressUpdateInput, StepProgressUncheckedUpdateInput>
    /**
     * Choose, which StepProgress to update.
     */
    where: StepProgressWhereUniqueInput
  }

  /**
   * StepProgress updateMany
   */
  export type StepProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StepProgresses.
     */
    data: XOR<StepProgressUpdateManyMutationInput, StepProgressUncheckedUpdateManyInput>
    /**
     * Filter which StepProgresses to update
     */
    where?: StepProgressWhereInput
    /**
     * Limit how many StepProgresses to update.
     */
    limit?: number
  }

  /**
   * StepProgress updateManyAndReturn
   */
  export type StepProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * The data used to update StepProgresses.
     */
    data: XOR<StepProgressUpdateManyMutationInput, StepProgressUncheckedUpdateManyInput>
    /**
     * Filter which StepProgresses to update
     */
    where?: StepProgressWhereInput
    /**
     * Limit how many StepProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StepProgress upsert
   */
  export type StepProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the StepProgress to update in case it exists.
     */
    where: StepProgressWhereUniqueInput
    /**
     * In case the StepProgress found by the `where` argument doesn't exist, create a new StepProgress with this data.
     */
    create: XOR<StepProgressCreateInput, StepProgressUncheckedCreateInput>
    /**
     * In case the StepProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StepProgressUpdateInput, StepProgressUncheckedUpdateInput>
  }

  /**
   * StepProgress delete
   */
  export type StepProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
    /**
     * Filter which StepProgress to delete.
     */
    where: StepProgressWhereUniqueInput
  }

  /**
   * StepProgress deleteMany
   */
  export type StepProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StepProgresses to delete
     */
    where?: StepProgressWhereInput
    /**
     * Limit how many StepProgresses to delete.
     */
    limit?: number
  }

  /**
   * StepProgress.componentProgress
   */
  export type StepProgress$componentProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    where?: ComponentProgressWhereInput
    orderBy?: ComponentProgressOrderByWithRelationInput | ComponentProgressOrderByWithRelationInput[]
    cursor?: ComponentProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComponentProgressScalarFieldEnum | ComponentProgressScalarFieldEnum[]
  }

  /**
   * StepProgress without action
   */
  export type StepProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StepProgress
     */
    select?: StepProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StepProgress
     */
    omit?: StepProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StepProgressInclude<ExtArgs> | null
  }


  /**
   * Model ComponentProgress
   */

  export type AggregateComponentProgress = {
    _count: ComponentProgressCountAggregateOutputType | null
    _avg: ComponentProgressAvgAggregateOutputType | null
    _sum: ComponentProgressSumAggregateOutputType | null
    _min: ComponentProgressMinAggregateOutputType | null
    _max: ComponentProgressMaxAggregateOutputType | null
  }

  export type ComponentProgressAvgAggregateOutputType = {
    timeSpent: number | null
  }

  export type ComponentProgressSumAggregateOutputType = {
    timeSpent: number | null
  }

  export type ComponentProgressMinAggregateOutputType = {
    id: string | null
    componentSnapshotId: string | null
    status: $Enums.ComponentStatus | null
    startedAt: Date | null
    completedAt: Date | null
    timeSpent: number | null
    stepProgressId: string | null
  }

  export type ComponentProgressMaxAggregateOutputType = {
    id: string | null
    componentSnapshotId: string | null
    status: $Enums.ComponentStatus | null
    startedAt: Date | null
    completedAt: Date | null
    timeSpent: number | null
    stepProgressId: string | null
  }

  export type ComponentProgressCountAggregateOutputType = {
    id: number
    componentSnapshotId: number
    status: number
    startedAt: number
    completedAt: number
    timeSpent: number
    progressData: number
    stepProgressId: number
    _all: number
  }


  export type ComponentProgressAvgAggregateInputType = {
    timeSpent?: true
  }

  export type ComponentProgressSumAggregateInputType = {
    timeSpent?: true
  }

  export type ComponentProgressMinAggregateInputType = {
    id?: true
    componentSnapshotId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    timeSpent?: true
    stepProgressId?: true
  }

  export type ComponentProgressMaxAggregateInputType = {
    id?: true
    componentSnapshotId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    timeSpent?: true
    stepProgressId?: true
  }

  export type ComponentProgressCountAggregateInputType = {
    id?: true
    componentSnapshotId?: true
    status?: true
    startedAt?: true
    completedAt?: true
    timeSpent?: true
    progressData?: true
    stepProgressId?: true
    _all?: true
  }

  export type ComponentProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentProgress to aggregate.
     */
    where?: ComponentProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProgresses to fetch.
     */
    orderBy?: ComponentProgressOrderByWithRelationInput | ComponentProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComponentProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComponentProgresses
    **/
    _count?: true | ComponentProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComponentProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComponentProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComponentProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComponentProgressMaxAggregateInputType
  }

  export type GetComponentProgressAggregateType<T extends ComponentProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateComponentProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComponentProgress[P]>
      : GetScalarType<T[P], AggregateComponentProgress[P]>
  }




  export type ComponentProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComponentProgressWhereInput
    orderBy?: ComponentProgressOrderByWithAggregationInput | ComponentProgressOrderByWithAggregationInput[]
    by: ComponentProgressScalarFieldEnum[] | ComponentProgressScalarFieldEnum
    having?: ComponentProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComponentProgressCountAggregateInputType | true
    _avg?: ComponentProgressAvgAggregateInputType
    _sum?: ComponentProgressSumAggregateInputType
    _min?: ComponentProgressMinAggregateInputType
    _max?: ComponentProgressMaxAggregateInputType
  }

  export type ComponentProgressGroupByOutputType = {
    id: string
    componentSnapshotId: string
    status: $Enums.ComponentStatus
    startedAt: Date | null
    completedAt: Date | null
    timeSpent: number
    progressData: JsonValue | null
    stepProgressId: string
    _count: ComponentProgressCountAggregateOutputType | null
    _avg: ComponentProgressAvgAggregateOutputType | null
    _sum: ComponentProgressSumAggregateOutputType | null
    _min: ComponentProgressMinAggregateOutputType | null
    _max: ComponentProgressMaxAggregateOutputType | null
  }

  type GetComponentProgressGroupByPayload<T extends ComponentProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComponentProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComponentProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComponentProgressGroupByOutputType[P]>
            : GetScalarType<T[P], ComponentProgressGroupByOutputType[P]>
        }
      >
    >


  export type ComponentProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    componentSnapshotId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    progressData?: boolean
    stepProgressId?: boolean
    componentSnapshot?: boolean | ComponentSnapshotDefaultArgs<ExtArgs>
    stepProgress?: boolean | StepProgressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentProgress"]>

  export type ComponentProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    componentSnapshotId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    progressData?: boolean
    stepProgressId?: boolean
    componentSnapshot?: boolean | ComponentSnapshotDefaultArgs<ExtArgs>
    stepProgress?: boolean | StepProgressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentProgress"]>

  export type ComponentProgressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    componentSnapshotId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    progressData?: boolean
    stepProgressId?: boolean
    componentSnapshot?: boolean | ComponentSnapshotDefaultArgs<ExtArgs>
    stepProgress?: boolean | StepProgressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["componentProgress"]>

  export type ComponentProgressSelectScalar = {
    id?: boolean
    componentSnapshotId?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    timeSpent?: boolean
    progressData?: boolean
    stepProgressId?: boolean
  }

  export type ComponentProgressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "componentSnapshotId" | "status" | "startedAt" | "completedAt" | "timeSpent" | "progressData" | "stepProgressId", ExtArgs["result"]["componentProgress"]>
  export type ComponentProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    componentSnapshot?: boolean | ComponentSnapshotDefaultArgs<ExtArgs>
    stepProgress?: boolean | StepProgressDefaultArgs<ExtArgs>
  }
  export type ComponentProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    componentSnapshot?: boolean | ComponentSnapshotDefaultArgs<ExtArgs>
    stepProgress?: boolean | StepProgressDefaultArgs<ExtArgs>
  }
  export type ComponentProgressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    componentSnapshot?: boolean | ComponentSnapshotDefaultArgs<ExtArgs>
    stepProgress?: boolean | StepProgressDefaultArgs<ExtArgs>
  }

  export type $ComponentProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComponentProgress"
    objects: {
      componentSnapshot: Prisma.$ComponentSnapshotPayload<ExtArgs>
      stepProgress: Prisma.$StepProgressPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      componentSnapshotId: string
      status: $Enums.ComponentStatus
      startedAt: Date | null
      completedAt: Date | null
      timeSpent: number
      progressData: Prisma.JsonValue | null
      stepProgressId: string
    }, ExtArgs["result"]["componentProgress"]>
    composites: {}
  }

  type ComponentProgressGetPayload<S extends boolean | null | undefined | ComponentProgressDefaultArgs> = $Result.GetResult<Prisma.$ComponentProgressPayload, S>

  type ComponentProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComponentProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComponentProgressCountAggregateInputType | true
    }

  export interface ComponentProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComponentProgress'], meta: { name: 'ComponentProgress' } }
    /**
     * Find zero or one ComponentProgress that matches the filter.
     * @param {ComponentProgressFindUniqueArgs} args - Arguments to find a ComponentProgress
     * @example
     * // Get one ComponentProgress
     * const componentProgress = await prisma.componentProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComponentProgressFindUniqueArgs>(args: SelectSubset<T, ComponentProgressFindUniqueArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ComponentProgress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComponentProgressFindUniqueOrThrowArgs} args - Arguments to find a ComponentProgress
     * @example
     * // Get one ComponentProgress
     * const componentProgress = await prisma.componentProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComponentProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, ComponentProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComponentProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentProgressFindFirstArgs} args - Arguments to find a ComponentProgress
     * @example
     * // Get one ComponentProgress
     * const componentProgress = await prisma.componentProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComponentProgressFindFirstArgs>(args?: SelectSubset<T, ComponentProgressFindFirstArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComponentProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentProgressFindFirstOrThrowArgs} args - Arguments to find a ComponentProgress
     * @example
     * // Get one ComponentProgress
     * const componentProgress = await prisma.componentProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComponentProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, ComponentProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComponentProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComponentProgresses
     * const componentProgresses = await prisma.componentProgress.findMany()
     * 
     * // Get first 10 ComponentProgresses
     * const componentProgresses = await prisma.componentProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const componentProgressWithIdOnly = await prisma.componentProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComponentProgressFindManyArgs>(args?: SelectSubset<T, ComponentProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ComponentProgress.
     * @param {ComponentProgressCreateArgs} args - Arguments to create a ComponentProgress.
     * @example
     * // Create one ComponentProgress
     * const ComponentProgress = await prisma.componentProgress.create({
     *   data: {
     *     // ... data to create a ComponentProgress
     *   }
     * })
     * 
     */
    create<T extends ComponentProgressCreateArgs>(args: SelectSubset<T, ComponentProgressCreateArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ComponentProgresses.
     * @param {ComponentProgressCreateManyArgs} args - Arguments to create many ComponentProgresses.
     * @example
     * // Create many ComponentProgresses
     * const componentProgress = await prisma.componentProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComponentProgressCreateManyArgs>(args?: SelectSubset<T, ComponentProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ComponentProgresses and returns the data saved in the database.
     * @param {ComponentProgressCreateManyAndReturnArgs} args - Arguments to create many ComponentProgresses.
     * @example
     * // Create many ComponentProgresses
     * const componentProgress = await prisma.componentProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ComponentProgresses and only return the `id`
     * const componentProgressWithIdOnly = await prisma.componentProgress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ComponentProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, ComponentProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ComponentProgress.
     * @param {ComponentProgressDeleteArgs} args - Arguments to delete one ComponentProgress.
     * @example
     * // Delete one ComponentProgress
     * const ComponentProgress = await prisma.componentProgress.delete({
     *   where: {
     *     // ... filter to delete one ComponentProgress
     *   }
     * })
     * 
     */
    delete<T extends ComponentProgressDeleteArgs>(args: SelectSubset<T, ComponentProgressDeleteArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ComponentProgress.
     * @param {ComponentProgressUpdateArgs} args - Arguments to update one ComponentProgress.
     * @example
     * // Update one ComponentProgress
     * const componentProgress = await prisma.componentProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComponentProgressUpdateArgs>(args: SelectSubset<T, ComponentProgressUpdateArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ComponentProgresses.
     * @param {ComponentProgressDeleteManyArgs} args - Arguments to filter ComponentProgresses to delete.
     * @example
     * // Delete a few ComponentProgresses
     * const { count } = await prisma.componentProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComponentProgressDeleteManyArgs>(args?: SelectSubset<T, ComponentProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComponentProgresses
     * const componentProgress = await prisma.componentProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComponentProgressUpdateManyArgs>(args: SelectSubset<T, ComponentProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComponentProgresses and returns the data updated in the database.
     * @param {ComponentProgressUpdateManyAndReturnArgs} args - Arguments to update many ComponentProgresses.
     * @example
     * // Update many ComponentProgresses
     * const componentProgress = await prisma.componentProgress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ComponentProgresses and only return the `id`
     * const componentProgressWithIdOnly = await prisma.componentProgress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ComponentProgressUpdateManyAndReturnArgs>(args: SelectSubset<T, ComponentProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ComponentProgress.
     * @param {ComponentProgressUpsertArgs} args - Arguments to update or create a ComponentProgress.
     * @example
     * // Update or create a ComponentProgress
     * const componentProgress = await prisma.componentProgress.upsert({
     *   create: {
     *     // ... data to create a ComponentProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComponentProgress we want to update
     *   }
     * })
     */
    upsert<T extends ComponentProgressUpsertArgs>(args: SelectSubset<T, ComponentProgressUpsertArgs<ExtArgs>>): Prisma__ComponentProgressClient<$Result.GetResult<Prisma.$ComponentProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ComponentProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentProgressCountArgs} args - Arguments to filter ComponentProgresses to count.
     * @example
     * // Count the number of ComponentProgresses
     * const count = await prisma.componentProgress.count({
     *   where: {
     *     // ... the filter for the ComponentProgresses we want to count
     *   }
     * })
    **/
    count<T extends ComponentProgressCountArgs>(
      args?: Subset<T, ComponentProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComponentProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComponentProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComponentProgressAggregateArgs>(args: Subset<T, ComponentProgressAggregateArgs>): Prisma.PrismaPromise<GetComponentProgressAggregateType<T>>

    /**
     * Group by ComponentProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComponentProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComponentProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComponentProgressGroupByArgs['orderBy'] }
        : { orderBy?: ComponentProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComponentProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComponentProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComponentProgress model
   */
  readonly fields: ComponentProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComponentProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComponentProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    componentSnapshot<T extends ComponentSnapshotDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComponentSnapshotDefaultArgs<ExtArgs>>): Prisma__ComponentSnapshotClient<$Result.GetResult<Prisma.$ComponentSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stepProgress<T extends StepProgressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StepProgressDefaultArgs<ExtArgs>>): Prisma__StepProgressClient<$Result.GetResult<Prisma.$StepProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComponentProgress model
   */
  interface ComponentProgressFieldRefs {
    readonly id: FieldRef<"ComponentProgress", 'String'>
    readonly componentSnapshotId: FieldRef<"ComponentProgress", 'String'>
    readonly status: FieldRef<"ComponentProgress", 'ComponentStatus'>
    readonly startedAt: FieldRef<"ComponentProgress", 'DateTime'>
    readonly completedAt: FieldRef<"ComponentProgress", 'DateTime'>
    readonly timeSpent: FieldRef<"ComponentProgress", 'Int'>
    readonly progressData: FieldRef<"ComponentProgress", 'Json'>
    readonly stepProgressId: FieldRef<"ComponentProgress", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ComponentProgress findUnique
   */
  export type ComponentProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProgress to fetch.
     */
    where: ComponentProgressWhereUniqueInput
  }

  /**
   * ComponentProgress findUniqueOrThrow
   */
  export type ComponentProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProgress to fetch.
     */
    where: ComponentProgressWhereUniqueInput
  }

  /**
   * ComponentProgress findFirst
   */
  export type ComponentProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProgress to fetch.
     */
    where?: ComponentProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProgresses to fetch.
     */
    orderBy?: ComponentProgressOrderByWithRelationInput | ComponentProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentProgresses.
     */
    cursor?: ComponentProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentProgresses.
     */
    distinct?: ComponentProgressScalarFieldEnum | ComponentProgressScalarFieldEnum[]
  }

  /**
   * ComponentProgress findFirstOrThrow
   */
  export type ComponentProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProgress to fetch.
     */
    where?: ComponentProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProgresses to fetch.
     */
    orderBy?: ComponentProgressOrderByWithRelationInput | ComponentProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComponentProgresses.
     */
    cursor?: ComponentProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComponentProgresses.
     */
    distinct?: ComponentProgressScalarFieldEnum | ComponentProgressScalarFieldEnum[]
  }

  /**
   * ComponentProgress findMany
   */
  export type ComponentProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * Filter, which ComponentProgresses to fetch.
     */
    where?: ComponentProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComponentProgresses to fetch.
     */
    orderBy?: ComponentProgressOrderByWithRelationInput | ComponentProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComponentProgresses.
     */
    cursor?: ComponentProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComponentProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComponentProgresses.
     */
    skip?: number
    distinct?: ComponentProgressScalarFieldEnum | ComponentProgressScalarFieldEnum[]
  }

  /**
   * ComponentProgress create
   */
  export type ComponentProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a ComponentProgress.
     */
    data: XOR<ComponentProgressCreateInput, ComponentProgressUncheckedCreateInput>
  }

  /**
   * ComponentProgress createMany
   */
  export type ComponentProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComponentProgresses.
     */
    data: ComponentProgressCreateManyInput | ComponentProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComponentProgress createManyAndReturn
   */
  export type ComponentProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * The data used to create many ComponentProgresses.
     */
    data: ComponentProgressCreateManyInput | ComponentProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentProgress update
   */
  export type ComponentProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a ComponentProgress.
     */
    data: XOR<ComponentProgressUpdateInput, ComponentProgressUncheckedUpdateInput>
    /**
     * Choose, which ComponentProgress to update.
     */
    where: ComponentProgressWhereUniqueInput
  }

  /**
   * ComponentProgress updateMany
   */
  export type ComponentProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComponentProgresses.
     */
    data: XOR<ComponentProgressUpdateManyMutationInput, ComponentProgressUncheckedUpdateManyInput>
    /**
     * Filter which ComponentProgresses to update
     */
    where?: ComponentProgressWhereInput
    /**
     * Limit how many ComponentProgresses to update.
     */
    limit?: number
  }

  /**
   * ComponentProgress updateManyAndReturn
   */
  export type ComponentProgressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * The data used to update ComponentProgresses.
     */
    data: XOR<ComponentProgressUpdateManyMutationInput, ComponentProgressUncheckedUpdateManyInput>
    /**
     * Filter which ComponentProgresses to update
     */
    where?: ComponentProgressWhereInput
    /**
     * Limit how many ComponentProgresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ComponentProgress upsert
   */
  export type ComponentProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the ComponentProgress to update in case it exists.
     */
    where: ComponentProgressWhereUniqueInput
    /**
     * In case the ComponentProgress found by the `where` argument doesn't exist, create a new ComponentProgress with this data.
     */
    create: XOR<ComponentProgressCreateInput, ComponentProgressUncheckedCreateInput>
    /**
     * In case the ComponentProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComponentProgressUpdateInput, ComponentProgressUncheckedUpdateInput>
  }

  /**
   * ComponentProgress delete
   */
  export type ComponentProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
    /**
     * Filter which ComponentProgress to delete.
     */
    where: ComponentProgressWhereUniqueInput
  }

  /**
   * ComponentProgress deleteMany
   */
  export type ComponentProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComponentProgresses to delete
     */
    where?: ComponentProgressWhereInput
    /**
     * Limit how many ComponentProgresses to delete.
     */
    limit?: number
  }

  /**
   * ComponentProgress without action
   */
  export type ComponentProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComponentProgress
     */
    select?: ComponentProgressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComponentProgress
     */
    omit?: ComponentProgressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComponentProgressInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    type: string | null
    title: string | null
    message: string | null
    priority: $Enums.NotificationPriority | null
    status: $Enums.NotificationStatus | null
    readAt: Date | null
    scheduledFor: Date | null
    expiresAt: Date | null
    recipientId: string | null
    senderId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    type: string | null
    title: string | null
    message: string | null
    priority: $Enums.NotificationPriority | null
    status: $Enums.NotificationStatus | null
    readAt: Date | null
    scheduledFor: Date | null
    expiresAt: Date | null
    recipientId: string | null
    senderId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    createdAt: number
    type: number
    title: number
    message: number
    priority: number
    status: number
    readAt: number
    scheduledFor: number
    expiresAt: number
    context: number
    actions: number
    recipientId: number
    senderId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    status?: true
    readAt?: true
    scheduledFor?: true
    expiresAt?: true
    recipientId?: true
    senderId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    status?: true
    readAt?: true
    scheduledFor?: true
    expiresAt?: true
    recipientId?: true
    senderId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    createdAt?: true
    type?: true
    title?: true
    message?: true
    priority?: true
    status?: true
    readAt?: true
    scheduledFor?: true
    expiresAt?: true
    context?: true
    actions?: true
    recipientId?: true
    senderId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    createdAt: Date
    type: string
    title: string
    message: string
    priority: $Enums.NotificationPriority
    status: $Enums.NotificationStatus
    readAt: Date | null
    scheduledFor: Date | null
    expiresAt: Date | null
    context: JsonValue | null
    actions: JsonValue | null
    recipientId: string
    senderId: string | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    status?: boolean
    readAt?: boolean
    scheduledFor?: boolean
    expiresAt?: boolean
    context?: boolean
    actions?: boolean
    recipientId?: boolean
    senderId?: boolean
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | Notification$senderArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    status?: boolean
    readAt?: boolean
    scheduledFor?: boolean
    expiresAt?: boolean
    context?: boolean
    actions?: boolean
    recipientId?: boolean
    senderId?: boolean
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | Notification$senderArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    status?: boolean
    readAt?: boolean
    scheduledFor?: boolean
    expiresAt?: boolean
    context?: boolean
    actions?: boolean
    recipientId?: boolean
    senderId?: boolean
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | Notification$senderArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    priority?: boolean
    status?: boolean
    readAt?: boolean
    scheduledFor?: boolean
    expiresAt?: boolean
    context?: boolean
    actions?: boolean
    recipientId?: boolean
    senderId?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "type" | "title" | "message" | "priority" | "status" | "readAt" | "scheduledFor" | "expiresAt" | "context" | "actions" | "recipientId" | "senderId", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | Notification$senderArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | Notification$senderArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    sender?: boolean | Notification$senderArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      recipient: Prisma.$UserPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      type: string
      title: string
      message: string
      priority: $Enums.NotificationPriority
      status: $Enums.NotificationStatus
      readAt: Date | null
      scheduledFor: Date | null
      expiresAt: Date | null
      context: Prisma.JsonValue | null
      actions: Prisma.JsonValue | null
      recipientId: string
      senderId: string | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends Notification$senderArgs<ExtArgs> = {}>(args?: Subset<T, Notification$senderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly priority: FieldRef<"Notification", 'NotificationPriority'>
    readonly status: FieldRef<"Notification", 'NotificationStatus'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly scheduledFor: FieldRef<"Notification", 'DateTime'>
    readonly expiresAt: FieldRef<"Notification", 'DateTime'>
    readonly context: FieldRef<"Notification", 'Json'>
    readonly actions: FieldRef<"Notification", 'Json'>
    readonly recipientId: FieldRef<"Notification", 'String'>
    readonly senderId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.sender
   */
  export type Notification$senderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Achievement
   */

  export type AggregateAchievement = {
    _count: AchievementCountAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  export type AchievementMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    key: string | null
    title: string | null
    description: string | null
    icon: string | null
    rarity: $Enums.AchievementRarity | null
  }

  export type AchievementMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    key: string | null
    title: string | null
    description: string | null
    icon: string | null
    rarity: $Enums.AchievementRarity | null
  }

  export type AchievementCountAggregateOutputType = {
    id: number
    createdAt: number
    key: number
    title: number
    description: number
    icon: number
    rarity: number
    criteria: number
    _all: number
  }


  export type AchievementMinAggregateInputType = {
    id?: true
    createdAt?: true
    key?: true
    title?: true
    description?: true
    icon?: true
    rarity?: true
  }

  export type AchievementMaxAggregateInputType = {
    id?: true
    createdAt?: true
    key?: true
    title?: true
    description?: true
    icon?: true
    rarity?: true
  }

  export type AchievementCountAggregateInputType = {
    id?: true
    createdAt?: true
    key?: true
    title?: true
    description?: true
    icon?: true
    rarity?: true
    criteria?: true
    _all?: true
  }

  export type AchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievement to aggregate.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Achievements
    **/
    _count?: true | AchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AchievementMaxAggregateInputType
  }

  export type GetAchievementAggregateType<T extends AchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAchievement[P]>
      : GetScalarType<T[P], AggregateAchievement[P]>
  }




  export type AchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AchievementWhereInput
    orderBy?: AchievementOrderByWithAggregationInput | AchievementOrderByWithAggregationInput[]
    by: AchievementScalarFieldEnum[] | AchievementScalarFieldEnum
    having?: AchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AchievementCountAggregateInputType | true
    _min?: AchievementMinAggregateInputType
    _max?: AchievementMaxAggregateInputType
  }

  export type AchievementGroupByOutputType = {
    id: string
    createdAt: Date
    key: string
    title: string
    description: string
    icon: string
    rarity: $Enums.AchievementRarity
    criteria: JsonValue
    _count: AchievementCountAggregateOutputType | null
    _min: AchievementMinAggregateOutputType | null
    _max: AchievementMaxAggregateOutputType | null
  }

  type GetAchievementGroupByPayload<T extends AchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AchievementGroupByOutputType[P]>
            : GetScalarType<T[P], AchievementGroupByOutputType[P]>
        }
      >
    >


  export type AchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    key?: boolean
    title?: boolean
    description?: boolean
    icon?: boolean
    rarity?: boolean
    criteria?: boolean
    userAchievements?: boolean | Achievement$userAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    key?: boolean
    title?: boolean
    description?: boolean
    icon?: boolean
    rarity?: boolean
    criteria?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    key?: boolean
    title?: boolean
    description?: boolean
    icon?: boolean
    rarity?: boolean
    criteria?: boolean
  }, ExtArgs["result"]["achievement"]>

  export type AchievementSelectScalar = {
    id?: boolean
    createdAt?: boolean
    key?: boolean
    title?: boolean
    description?: boolean
    icon?: boolean
    rarity?: boolean
    criteria?: boolean
  }

  export type AchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "key" | "title" | "description" | "icon" | "rarity" | "criteria", ExtArgs["result"]["achievement"]>
  export type AchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAchievements?: boolean | Achievement$userAchievementsArgs<ExtArgs>
    _count?: boolean | AchievementCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Achievement"
    objects: {
      userAchievements: Prisma.$UserAchievementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      key: string
      title: string
      description: string
      icon: string
      rarity: $Enums.AchievementRarity
      criteria: Prisma.JsonValue
    }, ExtArgs["result"]["achievement"]>
    composites: {}
  }

  type AchievementGetPayload<S extends boolean | null | undefined | AchievementDefaultArgs> = $Result.GetResult<Prisma.$AchievementPayload, S>

  type AchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AchievementCountAggregateInputType | true
    }

  export interface AchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Achievement'], meta: { name: 'Achievement' } }
    /**
     * Find zero or one Achievement that matches the filter.
     * @param {AchievementFindUniqueArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AchievementFindUniqueArgs>(args: SelectSubset<T, AchievementFindUniqueArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Achievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AchievementFindUniqueOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, AchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AchievementFindFirstArgs>(args?: SelectSubset<T, AchievementFindFirstArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Achievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindFirstOrThrowArgs} args - Arguments to find a Achievement
     * @example
     * // Get one Achievement
     * const achievement = await prisma.achievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, AchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Achievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Achievements
     * const achievements = await prisma.achievement.findMany()
     * 
     * // Get first 10 Achievements
     * const achievements = await prisma.achievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const achievementWithIdOnly = await prisma.achievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AchievementFindManyArgs>(args?: SelectSubset<T, AchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Achievement.
     * @param {AchievementCreateArgs} args - Arguments to create a Achievement.
     * @example
     * // Create one Achievement
     * const Achievement = await prisma.achievement.create({
     *   data: {
     *     // ... data to create a Achievement
     *   }
     * })
     * 
     */
    create<T extends AchievementCreateArgs>(args: SelectSubset<T, AchievementCreateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Achievements.
     * @param {AchievementCreateManyArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AchievementCreateManyArgs>(args?: SelectSubset<T, AchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Achievements and returns the data saved in the database.
     * @param {AchievementCreateManyAndReturnArgs} args - Arguments to create many Achievements.
     * @example
     * // Create many Achievements
     * const achievement = await prisma.achievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, AchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Achievement.
     * @param {AchievementDeleteArgs} args - Arguments to delete one Achievement.
     * @example
     * // Delete one Achievement
     * const Achievement = await prisma.achievement.delete({
     *   where: {
     *     // ... filter to delete one Achievement
     *   }
     * })
     * 
     */
    delete<T extends AchievementDeleteArgs>(args: SelectSubset<T, AchievementDeleteArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Achievement.
     * @param {AchievementUpdateArgs} args - Arguments to update one Achievement.
     * @example
     * // Update one Achievement
     * const achievement = await prisma.achievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AchievementUpdateArgs>(args: SelectSubset<T, AchievementUpdateArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Achievements.
     * @param {AchievementDeleteManyArgs} args - Arguments to filter Achievements to delete.
     * @example
     * // Delete a few Achievements
     * const { count } = await prisma.achievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AchievementDeleteManyArgs>(args?: SelectSubset<T, AchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AchievementUpdateManyArgs>(args: SelectSubset<T, AchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Achievements and returns the data updated in the database.
     * @param {AchievementUpdateManyAndReturnArgs} args - Arguments to update many Achievements.
     * @example
     * // Update many Achievements
     * const achievement = await prisma.achievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Achievements and only return the `id`
     * const achievementWithIdOnly = await prisma.achievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, AchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Achievement.
     * @param {AchievementUpsertArgs} args - Arguments to update or create a Achievement.
     * @example
     * // Update or create a Achievement
     * const achievement = await prisma.achievement.upsert({
     *   create: {
     *     // ... data to create a Achievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Achievement we want to update
     *   }
     * })
     */
    upsert<T extends AchievementUpsertArgs>(args: SelectSubset<T, AchievementUpsertArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Achievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementCountArgs} args - Arguments to filter Achievements to count.
     * @example
     * // Count the number of Achievements
     * const count = await prisma.achievement.count({
     *   where: {
     *     // ... the filter for the Achievements we want to count
     *   }
     * })
    **/
    count<T extends AchievementCountArgs>(
      args?: Subset<T, AchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AchievementAggregateArgs>(args: Subset<T, AchievementAggregateArgs>): Prisma.PrismaPromise<GetAchievementAggregateType<T>>

    /**
     * Group by Achievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AchievementGroupByArgs['orderBy'] }
        : { orderBy?: AchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Achievement model
   */
  readonly fields: AchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Achievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userAchievements<T extends Achievement$userAchievementsArgs<ExtArgs> = {}>(args?: Subset<T, Achievement$userAchievementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Achievement model
   */
  interface AchievementFieldRefs {
    readonly id: FieldRef<"Achievement", 'String'>
    readonly createdAt: FieldRef<"Achievement", 'DateTime'>
    readonly key: FieldRef<"Achievement", 'String'>
    readonly title: FieldRef<"Achievement", 'String'>
    readonly description: FieldRef<"Achievement", 'String'>
    readonly icon: FieldRef<"Achievement", 'String'>
    readonly rarity: FieldRef<"Achievement", 'AchievementRarity'>
    readonly criteria: FieldRef<"Achievement", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Achievement findUnique
   */
  export type AchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findUniqueOrThrow
   */
  export type AchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement findFirst
   */
  export type AchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findFirstOrThrow
   */
  export type AchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievement to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Achievements.
     */
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement findMany
   */
  export type AchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter, which Achievements to fetch.
     */
    where?: AchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Achievements to fetch.
     */
    orderBy?: AchievementOrderByWithRelationInput | AchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Achievements.
     */
    cursor?: AchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Achievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Achievements.
     */
    skip?: number
    distinct?: AchievementScalarFieldEnum | AchievementScalarFieldEnum[]
  }

  /**
   * Achievement create
   */
  export type AchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a Achievement.
     */
    data: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
  }

  /**
   * Achievement createMany
   */
  export type AchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement createManyAndReturn
   */
  export type AchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to create many Achievements.
     */
    data: AchievementCreateManyInput | AchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Achievement update
   */
  export type AchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a Achievement.
     */
    data: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
    /**
     * Choose, which Achievement to update.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement updateMany
   */
  export type AchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement updateManyAndReturn
   */
  export type AchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * The data used to update Achievements.
     */
    data: XOR<AchievementUpdateManyMutationInput, AchievementUncheckedUpdateManyInput>
    /**
     * Filter which Achievements to update
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to update.
     */
    limit?: number
  }

  /**
   * Achievement upsert
   */
  export type AchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the Achievement to update in case it exists.
     */
    where: AchievementWhereUniqueInput
    /**
     * In case the Achievement found by the `where` argument doesn't exist, create a new Achievement with this data.
     */
    create: XOR<AchievementCreateInput, AchievementUncheckedCreateInput>
    /**
     * In case the Achievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AchievementUpdateInput, AchievementUncheckedUpdateInput>
  }

  /**
   * Achievement delete
   */
  export type AchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
    /**
     * Filter which Achievement to delete.
     */
    where: AchievementWhereUniqueInput
  }

  /**
   * Achievement deleteMany
   */
  export type AchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Achievements to delete
     */
    where?: AchievementWhereInput
    /**
     * Limit how many Achievements to delete.
     */
    limit?: number
  }

  /**
   * Achievement.userAchievements
   */
  export type Achievement$userAchievementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    cursor?: UserAchievementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * Achievement without action
   */
  export type AchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Achievement
     */
    select?: AchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Achievement
     */
    omit?: AchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AchievementInclude<ExtArgs> | null
  }


  /**
   * Model UserAchievement
   */

  export type AggregateUserAchievement = {
    _count: UserAchievementCountAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  export type UserAchievementMinAggregateOutputType = {
    id: string | null
    earnedAt: Date | null
    userId: string | null
    achievementId: string | null
  }

  export type UserAchievementMaxAggregateOutputType = {
    id: string | null
    earnedAt: Date | null
    userId: string | null
    achievementId: string | null
  }

  export type UserAchievementCountAggregateOutputType = {
    id: number
    earnedAt: number
    context: number
    userId: number
    achievementId: number
    _all: number
  }


  export type UserAchievementMinAggregateInputType = {
    id?: true
    earnedAt?: true
    userId?: true
    achievementId?: true
  }

  export type UserAchievementMaxAggregateInputType = {
    id?: true
    earnedAt?: true
    userId?: true
    achievementId?: true
  }

  export type UserAchievementCountAggregateInputType = {
    id?: true
    earnedAt?: true
    context?: true
    userId?: true
    achievementId?: true
    _all?: true
  }

  export type UserAchievementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievement to aggregate.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserAchievements
    **/
    _count?: true | UserAchievementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserAchievementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserAchievementMaxAggregateInputType
  }

  export type GetUserAchievementAggregateType<T extends UserAchievementAggregateArgs> = {
        [P in keyof T & keyof AggregateUserAchievement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserAchievement[P]>
      : GetScalarType<T[P], AggregateUserAchievement[P]>
  }




  export type UserAchievementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserAchievementWhereInput
    orderBy?: UserAchievementOrderByWithAggregationInput | UserAchievementOrderByWithAggregationInput[]
    by: UserAchievementScalarFieldEnum[] | UserAchievementScalarFieldEnum
    having?: UserAchievementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserAchievementCountAggregateInputType | true
    _min?: UserAchievementMinAggregateInputType
    _max?: UserAchievementMaxAggregateInputType
  }

  export type UserAchievementGroupByOutputType = {
    id: string
    earnedAt: Date
    context: JsonValue | null
    userId: string
    achievementId: string
    _count: UserAchievementCountAggregateOutputType | null
    _min: UserAchievementMinAggregateOutputType | null
    _max: UserAchievementMaxAggregateOutputType | null
  }

  type GetUserAchievementGroupByPayload<T extends UserAchievementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserAchievementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserAchievementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
            : GetScalarType<T[P], UserAchievementGroupByOutputType[P]>
        }
      >
    >


  export type UserAchievementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    earnedAt?: boolean
    context?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    earnedAt?: boolean
    context?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    earnedAt?: boolean
    context?: boolean
    userId?: boolean
    achievementId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userAchievement"]>

  export type UserAchievementSelectScalar = {
    id?: boolean
    earnedAt?: boolean
    context?: boolean
    userId?: boolean
    achievementId?: boolean
  }

  export type UserAchievementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "earnedAt" | "context" | "userId" | "achievementId", ExtArgs["result"]["userAchievement"]>
  export type UserAchievementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }
  export type UserAchievementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    achievement?: boolean | AchievementDefaultArgs<ExtArgs>
  }

  export type $UserAchievementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserAchievement"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      achievement: Prisma.$AchievementPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      earnedAt: Date
      context: Prisma.JsonValue | null
      userId: string
      achievementId: string
    }, ExtArgs["result"]["userAchievement"]>
    composites: {}
  }

  type UserAchievementGetPayload<S extends boolean | null | undefined | UserAchievementDefaultArgs> = $Result.GetResult<Prisma.$UserAchievementPayload, S>

  type UserAchievementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserAchievementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserAchievementCountAggregateInputType | true
    }

  export interface UserAchievementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserAchievement'], meta: { name: 'UserAchievement' } }
    /**
     * Find zero or one UserAchievement that matches the filter.
     * @param {UserAchievementFindUniqueArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserAchievementFindUniqueArgs>(args: SelectSubset<T, UserAchievementFindUniqueArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserAchievement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserAchievementFindUniqueOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserAchievementFindUniqueOrThrowArgs>(args: SelectSubset<T, UserAchievementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAchievement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserAchievementFindFirstArgs>(args?: SelectSubset<T, UserAchievementFindFirstArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserAchievement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindFirstOrThrowArgs} args - Arguments to find a UserAchievement
     * @example
     * // Get one UserAchievement
     * const userAchievement = await prisma.userAchievement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserAchievementFindFirstOrThrowArgs>(args?: SelectSubset<T, UserAchievementFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserAchievements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany()
     * 
     * // Get first 10 UserAchievements
     * const userAchievements = await prisma.userAchievement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserAchievementFindManyArgs>(args?: SelectSubset<T, UserAchievementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserAchievement.
     * @param {UserAchievementCreateArgs} args - Arguments to create a UserAchievement.
     * @example
     * // Create one UserAchievement
     * const UserAchievement = await prisma.userAchievement.create({
     *   data: {
     *     // ... data to create a UserAchievement
     *   }
     * })
     * 
     */
    create<T extends UserAchievementCreateArgs>(args: SelectSubset<T, UserAchievementCreateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserAchievements.
     * @param {UserAchievementCreateManyArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserAchievementCreateManyArgs>(args?: SelectSubset<T, UserAchievementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserAchievements and returns the data saved in the database.
     * @param {UserAchievementCreateManyAndReturnArgs} args - Arguments to create many UserAchievements.
     * @example
     * // Create many UserAchievements
     * const userAchievement = await prisma.userAchievement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserAchievementCreateManyAndReturnArgs>(args?: SelectSubset<T, UserAchievementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserAchievement.
     * @param {UserAchievementDeleteArgs} args - Arguments to delete one UserAchievement.
     * @example
     * // Delete one UserAchievement
     * const UserAchievement = await prisma.userAchievement.delete({
     *   where: {
     *     // ... filter to delete one UserAchievement
     *   }
     * })
     * 
     */
    delete<T extends UserAchievementDeleteArgs>(args: SelectSubset<T, UserAchievementDeleteArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserAchievement.
     * @param {UserAchievementUpdateArgs} args - Arguments to update one UserAchievement.
     * @example
     * // Update one UserAchievement
     * const userAchievement = await prisma.userAchievement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserAchievementUpdateArgs>(args: SelectSubset<T, UserAchievementUpdateArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserAchievements.
     * @param {UserAchievementDeleteManyArgs} args - Arguments to filter UserAchievements to delete.
     * @example
     * // Delete a few UserAchievements
     * const { count } = await prisma.userAchievement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserAchievementDeleteManyArgs>(args?: SelectSubset<T, UserAchievementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserAchievementUpdateManyArgs>(args: SelectSubset<T, UserAchievementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserAchievements and returns the data updated in the database.
     * @param {UserAchievementUpdateManyAndReturnArgs} args - Arguments to update many UserAchievements.
     * @example
     * // Update many UserAchievements
     * const userAchievement = await prisma.userAchievement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserAchievements and only return the `id`
     * const userAchievementWithIdOnly = await prisma.userAchievement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserAchievementUpdateManyAndReturnArgs>(args: SelectSubset<T, UserAchievementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserAchievement.
     * @param {UserAchievementUpsertArgs} args - Arguments to update or create a UserAchievement.
     * @example
     * // Update or create a UserAchievement
     * const userAchievement = await prisma.userAchievement.upsert({
     *   create: {
     *     // ... data to create a UserAchievement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserAchievement we want to update
     *   }
     * })
     */
    upsert<T extends UserAchievementUpsertArgs>(args: SelectSubset<T, UserAchievementUpsertArgs<ExtArgs>>): Prisma__UserAchievementClient<$Result.GetResult<Prisma.$UserAchievementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserAchievements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementCountArgs} args - Arguments to filter UserAchievements to count.
     * @example
     * // Count the number of UserAchievements
     * const count = await prisma.userAchievement.count({
     *   where: {
     *     // ... the filter for the UserAchievements we want to count
     *   }
     * })
    **/
    count<T extends UserAchievementCountArgs>(
      args?: Subset<T, UserAchievementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserAchievementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAchievementAggregateArgs>(args: Subset<T, UserAchievementAggregateArgs>): Prisma.PrismaPromise<GetUserAchievementAggregateType<T>>

    /**
     * Group by UserAchievement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAchievementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserAchievementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserAchievementGroupByArgs['orderBy'] }
        : { orderBy?: UserAchievementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserAchievementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserAchievementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserAchievement model
   */
  readonly fields: UserAchievementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserAchievement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserAchievementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    achievement<T extends AchievementDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AchievementDefaultArgs<ExtArgs>>): Prisma__AchievementClient<$Result.GetResult<Prisma.$AchievementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserAchievement model
   */
  interface UserAchievementFieldRefs {
    readonly id: FieldRef<"UserAchievement", 'String'>
    readonly earnedAt: FieldRef<"UserAchievement", 'DateTime'>
    readonly context: FieldRef<"UserAchievement", 'Json'>
    readonly userId: FieldRef<"UserAchievement", 'String'>
    readonly achievementId: FieldRef<"UserAchievement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserAchievement findUnique
   */
  export type UserAchievementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findUniqueOrThrow
   */
  export type UserAchievementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement findFirst
   */
  export type UserAchievementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findFirstOrThrow
   */
  export type UserAchievementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievement to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserAchievements.
     */
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement findMany
   */
  export type UserAchievementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter, which UserAchievements to fetch.
     */
    where?: UserAchievementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserAchievements to fetch.
     */
    orderBy?: UserAchievementOrderByWithRelationInput | UserAchievementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserAchievements.
     */
    cursor?: UserAchievementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserAchievements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserAchievements.
     */
    skip?: number
    distinct?: UserAchievementScalarFieldEnum | UserAchievementScalarFieldEnum[]
  }

  /**
   * UserAchievement create
   */
  export type UserAchievementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to create a UserAchievement.
     */
    data: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
  }

  /**
   * UserAchievement createMany
   */
  export type UserAchievementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserAchievement createManyAndReturn
   */
  export type UserAchievementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * The data used to create many UserAchievements.
     */
    data: UserAchievementCreateManyInput | UserAchievementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement update
   */
  export type UserAchievementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The data needed to update a UserAchievement.
     */
    data: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
    /**
     * Choose, which UserAchievement to update.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement updateMany
   */
  export type UserAchievementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to update.
     */
    limit?: number
  }

  /**
   * UserAchievement updateManyAndReturn
   */
  export type UserAchievementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * The data used to update UserAchievements.
     */
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyInput>
    /**
     * Filter which UserAchievements to update
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserAchievement upsert
   */
  export type UserAchievementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * The filter to search for the UserAchievement to update in case it exists.
     */
    where: UserAchievementWhereUniqueInput
    /**
     * In case the UserAchievement found by the `where` argument doesn't exist, create a new UserAchievement with this data.
     */
    create: XOR<UserAchievementCreateInput, UserAchievementUncheckedCreateInput>
    /**
     * In case the UserAchievement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserAchievementUpdateInput, UserAchievementUncheckedUpdateInput>
  }

  /**
   * UserAchievement delete
   */
  export type UserAchievementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
    /**
     * Filter which UserAchievement to delete.
     */
    where: UserAchievementWhereUniqueInput
  }

  /**
   * UserAchievement deleteMany
   */
  export type UserAchievementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserAchievements to delete
     */
    where?: UserAchievementWhereInput
    /**
     * Limit how many UserAchievements to delete.
     */
    limit?: number
  }

  /**
   * UserAchievement without action
   */
  export type UserAchievementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserAchievement
     */
    select?: UserAchievementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserAchievement
     */
    omit?: UserAchievementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserAchievementInclude<ExtArgs> | null
  }


  /**
   * Model SystemSettings
   */

  export type AggregateSystemSettings = {
    _count: SystemSettingsCountAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  export type SystemSettingsMinAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    workingHoursStart: string | null
    workingHoursEnd: string | null
    timezone: string | null
    updatedById: string | null
  }

  export type SystemSettingsMaxAggregateOutputType = {
    id: string | null
    updatedAt: Date | null
    workingHoursStart: string | null
    workingHoursEnd: string | null
    timezone: string | null
    updatedById: string | null
  }

  export type SystemSettingsCountAggregateOutputType = {
    id: number
    updatedAt: number
    workingDays: number
    workingHoursStart: number
    workingHoursEnd: number
    timezone: number
    updatedById: number
    _all: number
  }


  export type SystemSettingsMinAggregateInputType = {
    id?: true
    updatedAt?: true
    workingHoursStart?: true
    workingHoursEnd?: true
    timezone?: true
    updatedById?: true
  }

  export type SystemSettingsMaxAggregateInputType = {
    id?: true
    updatedAt?: true
    workingHoursStart?: true
    workingHoursEnd?: true
    timezone?: true
    updatedById?: true
  }

  export type SystemSettingsCountAggregateInputType = {
    id?: true
    updatedAt?: true
    workingDays?: true
    workingHoursStart?: true
    workingHoursEnd?: true
    timezone?: true
    updatedById?: true
    _all?: true
  }

  export type SystemSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to aggregate.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type GetSystemSettingsAggregateType<T extends SystemSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSettings[P]>
      : GetScalarType<T[P], AggregateSystemSettings[P]>
  }




  export type SystemSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithAggregationInput | SystemSettingsOrderByWithAggregationInput[]
    by: SystemSettingsScalarFieldEnum[] | SystemSettingsScalarFieldEnum
    having?: SystemSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingsCountAggregateInputType | true
    _min?: SystemSettingsMinAggregateInputType
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type SystemSettingsGroupByOutputType = {
    id: string
    updatedAt: Date
    workingDays: $Enums.DayOfWeek[]
    workingHoursStart: string
    workingHoursEnd: string
    timezone: string
    updatedById: string
    _count: SystemSettingsCountAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  type GetSystemSettingsGroupByPayload<T extends SystemSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    workingDays?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timezone?: boolean
    updatedById?: boolean
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    workingDays?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timezone?: boolean
    updatedById?: boolean
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    updatedAt?: boolean
    workingDays?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timezone?: boolean
    updatedById?: boolean
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectScalar = {
    id?: boolean
    updatedAt?: boolean
    workingDays?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timezone?: boolean
    updatedById?: boolean
  }

  export type SystemSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "updatedAt" | "workingDays" | "workingHoursStart" | "workingHoursEnd" | "timezone" | "updatedById", ExtArgs["result"]["systemSettings"]>
  export type SystemSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SystemSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SystemSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SystemSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSettings"
    objects: {
      updatedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      updatedAt: Date
      workingDays: $Enums.DayOfWeek[]
      workingHoursStart: string
      workingHoursEnd: string
      timezone: string
      updatedById: string
    }, ExtArgs["result"]["systemSettings"]>
    composites: {}
  }

  type SystemSettingsGetPayload<S extends boolean | null | undefined | SystemSettingsDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingsPayload, S>

  type SystemSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemSettingsCountAggregateInputType | true
    }

  export interface SystemSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSettings'], meta: { name: 'SystemSettings' } }
    /**
     * Find zero or one SystemSettings that matches the filter.
     * @param {SystemSettingsFindUniqueArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingsFindUniqueArgs>(args: SelectSubset<T, SystemSettingsFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemSettingsFindUniqueOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingsFindFirstArgs>(args?: SelectSubset<T, SystemSettingsFindFirstArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingsFindManyArgs>(args?: SelectSubset<T, SystemSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemSettings.
     * @param {SystemSettingsCreateArgs} args - Arguments to create a SystemSettings.
     * @example
     * // Create one SystemSettings
     * const SystemSettings = await prisma.systemSettings.create({
     *   data: {
     *     // ... data to create a SystemSettings
     *   }
     * })
     * 
     */
    create<T extends SystemSettingsCreateArgs>(args: SelectSubset<T, SystemSettingsCreateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingsCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingsCreateManyArgs>(args?: SelectSubset<T, SystemSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingsCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemSettings.
     * @param {SystemSettingsDeleteArgs} args - Arguments to delete one SystemSettings.
     * @example
     * // Delete one SystemSettings
     * const SystemSettings = await prisma.systemSettings.delete({
     *   where: {
     *     // ... filter to delete one SystemSettings
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingsDeleteArgs>(args: SelectSubset<T, SystemSettingsDeleteArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemSettings.
     * @param {SystemSettingsUpdateArgs} args - Arguments to update one SystemSettings.
     * @example
     * // Update one SystemSettings
     * const systemSettings = await prisma.systemSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingsUpdateArgs>(args: SelectSubset<T, SystemSettingsUpdateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingsDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingsDeleteManyArgs>(args?: SelectSubset<T, SystemSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingsUpdateManyArgs>(args: SelectSubset<T, SystemSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings and returns the data updated in the database.
     * @param {SystemSettingsUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemSettings.
     * @param {SystemSettingsUpsertArgs} args - Arguments to update or create a SystemSettings.
     * @example
     * // Update or create a SystemSettings
     * const systemSettings = await prisma.systemSettings.upsert({
     *   create: {
     *     // ... data to create a SystemSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSettings we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingsUpsertArgs>(args: SelectSubset<T, SystemSettingsUpsertArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSettings.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingsCountArgs>(
      args?: Subset<T, SystemSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingsAggregateArgs>(args: Subset<T, SystemSettingsAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingsAggregateType<T>>

    /**
     * Group by SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingsGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSettings model
   */
  readonly fields: SystemSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    updatedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSettings model
   */
  interface SystemSettingsFieldRefs {
    readonly id: FieldRef<"SystemSettings", 'String'>
    readonly updatedAt: FieldRef<"SystemSettings", 'DateTime'>
    readonly workingDays: FieldRef<"SystemSettings", 'DayOfWeek[]'>
    readonly workingHoursStart: FieldRef<"SystemSettings", 'String'>
    readonly workingHoursEnd: FieldRef<"SystemSettings", 'String'>
    readonly timezone: FieldRef<"SystemSettings", 'String'>
    readonly updatedById: FieldRef<"SystemSettings", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SystemSettings findUnique
   */
  export type SystemSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findUniqueOrThrow
   */
  export type SystemSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findFirst
   */
  export type SystemSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findFirstOrThrow
   */
  export type SystemSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findMany
   */
  export type SystemSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings create
   */
  export type SystemSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a SystemSettings.
     */
    data: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
  }

  /**
   * SystemSettings createMany
   */
  export type SystemSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSettings createManyAndReturn
   */
  export type SystemSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SystemSettings update
   */
  export type SystemSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a SystemSettings.
     */
    data: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
    /**
     * Choose, which SystemSettings to update.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings updateMany
   */
  export type SystemSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSettings updateManyAndReturn
   */
  export type SystemSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SystemSettings upsert
   */
  export type SystemSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the SystemSettings to update in case it exists.
     */
    where: SystemSettingsWhereUniqueInput
    /**
     * In case the SystemSettings found by the `where` argument doesn't exist, create a new SystemSettings with this data.
     */
    create: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
    /**
     * In case the SystemSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
  }

  /**
   * SystemSettings delete
   */
  export type SystemSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter which SystemSettings to delete.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings deleteMany
   */
  export type SystemSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to delete.
     */
    limit?: number
  }

  /**
   * SystemSettings without action
   */
  export type SystemSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
  }


  /**
   * Model Holiday
   */

  export type AggregateHoliday = {
    _count: HolidayCountAggregateOutputType | null
    _min: HolidayMinAggregateOutputType | null
    _max: HolidayMaxAggregateOutputType | null
  }

  export type HolidayMinAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    isRecurring: boolean | null
  }

  export type HolidayMaxAggregateOutputType = {
    id: string | null
    name: string | null
    date: Date | null
    isRecurring: boolean | null
  }

  export type HolidayCountAggregateOutputType = {
    id: number
    name: number
    date: number
    isRecurring: number
    _all: number
  }


  export type HolidayMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    isRecurring?: true
  }

  export type HolidayMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    isRecurring?: true
  }

  export type HolidayCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    isRecurring?: true
    _all?: true
  }

  export type HolidayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holiday to aggregate.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Holidays
    **/
    _count?: true | HolidayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HolidayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HolidayMaxAggregateInputType
  }

  export type GetHolidayAggregateType<T extends HolidayAggregateArgs> = {
        [P in keyof T & keyof AggregateHoliday]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHoliday[P]>
      : GetScalarType<T[P], AggregateHoliday[P]>
  }




  export type HolidayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HolidayWhereInput
    orderBy?: HolidayOrderByWithAggregationInput | HolidayOrderByWithAggregationInput[]
    by: HolidayScalarFieldEnum[] | HolidayScalarFieldEnum
    having?: HolidayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HolidayCountAggregateInputType | true
    _min?: HolidayMinAggregateInputType
    _max?: HolidayMaxAggregateInputType
  }

  export type HolidayGroupByOutputType = {
    id: string
    name: string
    date: Date
    isRecurring: boolean
    _count: HolidayCountAggregateOutputType | null
    _min: HolidayMinAggregateOutputType | null
    _max: HolidayMaxAggregateOutputType | null
  }

  type GetHolidayGroupByPayload<T extends HolidayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HolidayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HolidayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HolidayGroupByOutputType[P]>
            : GetScalarType<T[P], HolidayGroupByOutputType[P]>
        }
      >
    >


  export type HolidaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    isRecurring?: boolean
  }, ExtArgs["result"]["holiday"]>

  export type HolidaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    isRecurring?: boolean
  }, ExtArgs["result"]["holiday"]>

  export type HolidaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    isRecurring?: boolean
  }, ExtArgs["result"]["holiday"]>

  export type HolidaySelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    isRecurring?: boolean
  }

  export type HolidayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "date" | "isRecurring", ExtArgs["result"]["holiday"]>

  export type $HolidayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Holiday"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      date: Date
      isRecurring: boolean
    }, ExtArgs["result"]["holiday"]>
    composites: {}
  }

  type HolidayGetPayload<S extends boolean | null | undefined | HolidayDefaultArgs> = $Result.GetResult<Prisma.$HolidayPayload, S>

  type HolidayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HolidayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HolidayCountAggregateInputType | true
    }

  export interface HolidayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Holiday'], meta: { name: 'Holiday' } }
    /**
     * Find zero or one Holiday that matches the filter.
     * @param {HolidayFindUniqueArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HolidayFindUniqueArgs>(args: SelectSubset<T, HolidayFindUniqueArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Holiday that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HolidayFindUniqueOrThrowArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HolidayFindUniqueOrThrowArgs>(args: SelectSubset<T, HolidayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holiday that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayFindFirstArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HolidayFindFirstArgs>(args?: SelectSubset<T, HolidayFindFirstArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Holiday that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayFindFirstOrThrowArgs} args - Arguments to find a Holiday
     * @example
     * // Get one Holiday
     * const holiday = await prisma.holiday.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HolidayFindFirstOrThrowArgs>(args?: SelectSubset<T, HolidayFindFirstOrThrowArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Holidays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Holidays
     * const holidays = await prisma.holiday.findMany()
     * 
     * // Get first 10 Holidays
     * const holidays = await prisma.holiday.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const holidayWithIdOnly = await prisma.holiday.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HolidayFindManyArgs>(args?: SelectSubset<T, HolidayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Holiday.
     * @param {HolidayCreateArgs} args - Arguments to create a Holiday.
     * @example
     * // Create one Holiday
     * const Holiday = await prisma.holiday.create({
     *   data: {
     *     // ... data to create a Holiday
     *   }
     * })
     * 
     */
    create<T extends HolidayCreateArgs>(args: SelectSubset<T, HolidayCreateArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Holidays.
     * @param {HolidayCreateManyArgs} args - Arguments to create many Holidays.
     * @example
     * // Create many Holidays
     * const holiday = await prisma.holiday.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HolidayCreateManyArgs>(args?: SelectSubset<T, HolidayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Holidays and returns the data saved in the database.
     * @param {HolidayCreateManyAndReturnArgs} args - Arguments to create many Holidays.
     * @example
     * // Create many Holidays
     * const holiday = await prisma.holiday.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Holidays and only return the `id`
     * const holidayWithIdOnly = await prisma.holiday.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HolidayCreateManyAndReturnArgs>(args?: SelectSubset<T, HolidayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Holiday.
     * @param {HolidayDeleteArgs} args - Arguments to delete one Holiday.
     * @example
     * // Delete one Holiday
     * const Holiday = await prisma.holiday.delete({
     *   where: {
     *     // ... filter to delete one Holiday
     *   }
     * })
     * 
     */
    delete<T extends HolidayDeleteArgs>(args: SelectSubset<T, HolidayDeleteArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Holiday.
     * @param {HolidayUpdateArgs} args - Arguments to update one Holiday.
     * @example
     * // Update one Holiday
     * const holiday = await prisma.holiday.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HolidayUpdateArgs>(args: SelectSubset<T, HolidayUpdateArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Holidays.
     * @param {HolidayDeleteManyArgs} args - Arguments to filter Holidays to delete.
     * @example
     * // Delete a few Holidays
     * const { count } = await prisma.holiday.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HolidayDeleteManyArgs>(args?: SelectSubset<T, HolidayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Holidays
     * const holiday = await prisma.holiday.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HolidayUpdateManyArgs>(args: SelectSubset<T, HolidayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Holidays and returns the data updated in the database.
     * @param {HolidayUpdateManyAndReturnArgs} args - Arguments to update many Holidays.
     * @example
     * // Update many Holidays
     * const holiday = await prisma.holiday.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Holidays and only return the `id`
     * const holidayWithIdOnly = await prisma.holiday.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HolidayUpdateManyAndReturnArgs>(args: SelectSubset<T, HolidayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Holiday.
     * @param {HolidayUpsertArgs} args - Arguments to update or create a Holiday.
     * @example
     * // Update or create a Holiday
     * const holiday = await prisma.holiday.upsert({
     *   create: {
     *     // ... data to create a Holiday
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Holiday we want to update
     *   }
     * })
     */
    upsert<T extends HolidayUpsertArgs>(args: SelectSubset<T, HolidayUpsertArgs<ExtArgs>>): Prisma__HolidayClient<$Result.GetResult<Prisma.$HolidayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Holidays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayCountArgs} args - Arguments to filter Holidays to count.
     * @example
     * // Count the number of Holidays
     * const count = await prisma.holiday.count({
     *   where: {
     *     // ... the filter for the Holidays we want to count
     *   }
     * })
    **/
    count<T extends HolidayCountArgs>(
      args?: Subset<T, HolidayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HolidayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Holiday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HolidayAggregateArgs>(args: Subset<T, HolidayAggregateArgs>): Prisma.PrismaPromise<GetHolidayAggregateType<T>>

    /**
     * Group by Holiday.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HolidayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HolidayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HolidayGroupByArgs['orderBy'] }
        : { orderBy?: HolidayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HolidayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHolidayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Holiday model
   */
  readonly fields: HolidayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Holiday.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HolidayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Holiday model
   */
  interface HolidayFieldRefs {
    readonly id: FieldRef<"Holiday", 'String'>
    readonly name: FieldRef<"Holiday", 'String'>
    readonly date: FieldRef<"Holiday", 'DateTime'>
    readonly isRecurring: FieldRef<"Holiday", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Holiday findUnique
   */
  export type HolidayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday findUniqueOrThrow
   */
  export type HolidayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday findFirst
   */
  export type HolidayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holidays.
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holidays.
     */
    distinct?: HolidayScalarFieldEnum | HolidayScalarFieldEnum[]
  }

  /**
   * Holiday findFirstOrThrow
   */
  export type HolidayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Filter, which Holiday to fetch.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Holidays.
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Holidays.
     */
    distinct?: HolidayScalarFieldEnum | HolidayScalarFieldEnum[]
  }

  /**
   * Holiday findMany
   */
  export type HolidayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Filter, which Holidays to fetch.
     */
    where?: HolidayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Holidays to fetch.
     */
    orderBy?: HolidayOrderByWithRelationInput | HolidayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Holidays.
     */
    cursor?: HolidayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Holidays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Holidays.
     */
    skip?: number
    distinct?: HolidayScalarFieldEnum | HolidayScalarFieldEnum[]
  }

  /**
   * Holiday create
   */
  export type HolidayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * The data needed to create a Holiday.
     */
    data: XOR<HolidayCreateInput, HolidayUncheckedCreateInput>
  }

  /**
   * Holiday createMany
   */
  export type HolidayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Holidays.
     */
    data: HolidayCreateManyInput | HolidayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Holiday createManyAndReturn
   */
  export type HolidayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * The data used to create many Holidays.
     */
    data: HolidayCreateManyInput | HolidayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Holiday update
   */
  export type HolidayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * The data needed to update a Holiday.
     */
    data: XOR<HolidayUpdateInput, HolidayUncheckedUpdateInput>
    /**
     * Choose, which Holiday to update.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday updateMany
   */
  export type HolidayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Holidays.
     */
    data: XOR<HolidayUpdateManyMutationInput, HolidayUncheckedUpdateManyInput>
    /**
     * Filter which Holidays to update
     */
    where?: HolidayWhereInput
    /**
     * Limit how many Holidays to update.
     */
    limit?: number
  }

  /**
   * Holiday updateManyAndReturn
   */
  export type HolidayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * The data used to update Holidays.
     */
    data: XOR<HolidayUpdateManyMutationInput, HolidayUncheckedUpdateManyInput>
    /**
     * Filter which Holidays to update
     */
    where?: HolidayWhereInput
    /**
     * Limit how many Holidays to update.
     */
    limit?: number
  }

  /**
   * Holiday upsert
   */
  export type HolidayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * The filter to search for the Holiday to update in case it exists.
     */
    where: HolidayWhereUniqueInput
    /**
     * In case the Holiday found by the `where` argument doesn't exist, create a new Holiday with this data.
     */
    create: XOR<HolidayCreateInput, HolidayUncheckedCreateInput>
    /**
     * In case the Holiday was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HolidayUpdateInput, HolidayUncheckedUpdateInput>
  }

  /**
   * Holiday delete
   */
  export type HolidayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
    /**
     * Filter which Holiday to delete.
     */
    where: HolidayWhereUniqueInput
  }

  /**
   * Holiday deleteMany
   */
  export type HolidayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Holidays to delete
     */
    where?: HolidayWhereInput
    /**
     * Limit how many Holidays to delete.
     */
    limit?: number
  }

  /**
   * Holiday without action
   */
  export type HolidayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Holiday
     */
    select?: HolidaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Holiday
     */
    omit?: HolidayOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    telegramId: 'telegramId',
    telegramUsername: 'telegramUsername',
    name: 'name',
    avatarUrl: 'avatarUrl',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    roles: 'roles'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FlowScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    version: 'version',
    title: 'title',
    description: 'description',
    isActive: 'isActive',
    defaultDeadlineDays: 'defaultDeadlineDays',
    stepsCount: 'stepsCount',
    creatorId: 'creatorId'
  };

  export type FlowScalarFieldEnum = (typeof FlowScalarFieldEnum)[keyof typeof FlowScalarFieldEnum]


  export const FlowStepScalarFieldEnum: {
    id: 'id',
    order: 'order',
    title: 'title',
    description: 'description',
    templateComponents: 'templateComponents',
    componentsCount: 'componentsCount',
    flowId: 'flowId'
  };

  export type FlowStepScalarFieldEnum = (typeof FlowStepScalarFieldEnum)[keyof typeof FlowStepScalarFieldEnum]


  export const FlowComponentScalarFieldEnum: {
    id: 'id',
    order: 'order',
    isRequired: 'isRequired',
    type: 'type',
    typeVersion: 'typeVersion',
    data: 'data',
    stepId: 'stepId'
  };

  export type FlowComponentScalarFieldEnum = (typeof FlowComponentScalarFieldEnum)[keyof typeof FlowComponentScalarFieldEnum]


  export const FlowSnapshotScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    description: 'description',
    snapshotVersion: 'snapshotVersion',
    originalFlowVersion: 'originalFlowVersion',
    originalFlowId: 'originalFlowId',
    assignmentId: 'assignmentId'
  };

  export type FlowSnapshotScalarFieldEnum = (typeof FlowSnapshotScalarFieldEnum)[keyof typeof FlowSnapshotScalarFieldEnum]


  export const FlowStepSnapshotScalarFieldEnum: {
    id: 'id',
    order: 'order',
    title: 'title',
    description: 'description',
    snapshotId: 'snapshotId'
  };

  export type FlowStepSnapshotScalarFieldEnum = (typeof FlowStepSnapshotScalarFieldEnum)[keyof typeof FlowStepSnapshotScalarFieldEnum]


  export const ComponentSnapshotScalarFieldEnum: {
    id: 'id',
    order: 'order',
    isRequired: 'isRequired',
    type: 'type',
    typeVersion: 'typeVersion',
    data: 'data',
    stepId: 'stepId'
  };

  export type ComponentSnapshotScalarFieldEnum = (typeof ComponentSnapshotScalarFieldEnum)[keyof typeof ComponentSnapshotScalarFieldEnum]


  export const FlowAssignmentScalarFieldEnum: {
    id: 'id',
    assignedAt: 'assignedAt',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    deadline: 'deadline',
    status: 'status',
    isOverdue: 'isOverdue',
    pauseReason: 'pauseReason',
    pausedAt: 'pausedAt',
    timeSpent: 'timeSpent',
    lastActivity: 'lastActivity',
    userId: 'userId',
    pausedById: 'pausedById'
  };

  export type FlowAssignmentScalarFieldEnum = (typeof FlowAssignmentScalarFieldEnum)[keyof typeof FlowAssignmentScalarFieldEnum]


  export const UserProgressScalarFieldEnum: {
    id: 'id',
    totalTimeSpent: 'totalTimeSpent',
    streakDays: 'streakDays',
    userId: 'userId'
  };

  export type UserProgressScalarFieldEnum = (typeof UserProgressScalarFieldEnum)[keyof typeof UserProgressScalarFieldEnum]


  export const FlowProgressScalarFieldEnum: {
    id: 'id',
    assignmentId: 'assignmentId',
    status: 'status',
    percentage: 'percentage',
    lastActivity: 'lastActivity'
  };

  export type FlowProgressScalarFieldEnum = (typeof FlowProgressScalarFieldEnum)[keyof typeof FlowProgressScalarFieldEnum]


  export const StepProgressScalarFieldEnum: {
    id: 'id',
    stepSnapshotId: 'stepSnapshotId',
    status: 'status',
    percentage: 'percentage',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    timeSpent: 'timeSpent',
    flowProgressId: 'flowProgressId'
  };

  export type StepProgressScalarFieldEnum = (typeof StepProgressScalarFieldEnum)[keyof typeof StepProgressScalarFieldEnum]


  export const ComponentProgressScalarFieldEnum: {
    id: 'id',
    componentSnapshotId: 'componentSnapshotId',
    status: 'status',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    timeSpent: 'timeSpent',
    progressData: 'progressData',
    stepProgressId: 'stepProgressId'
  };

  export type ComponentProgressScalarFieldEnum = (typeof ComponentProgressScalarFieldEnum)[keyof typeof ComponentProgressScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    type: 'type',
    title: 'title',
    message: 'message',
    priority: 'priority',
    status: 'status',
    readAt: 'readAt',
    scheduledFor: 'scheduledFor',
    expiresAt: 'expiresAt',
    context: 'context',
    actions: 'actions',
    recipientId: 'recipientId',
    senderId: 'senderId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AchievementScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    key: 'key',
    title: 'title',
    description: 'description',
    icon: 'icon',
    rarity: 'rarity',
    criteria: 'criteria'
  };

  export type AchievementScalarFieldEnum = (typeof AchievementScalarFieldEnum)[keyof typeof AchievementScalarFieldEnum]


  export const UserAchievementScalarFieldEnum: {
    id: 'id',
    earnedAt: 'earnedAt',
    context: 'context',
    userId: 'userId',
    achievementId: 'achievementId'
  };

  export type UserAchievementScalarFieldEnum = (typeof UserAchievementScalarFieldEnum)[keyof typeof UserAchievementScalarFieldEnum]


  export const SystemSettingsScalarFieldEnum: {
    id: 'id',
    updatedAt: 'updatedAt',
    workingDays: 'workingDays',
    workingHoursStart: 'workingHoursStart',
    workingHoursEnd: 'workingHoursEnd',
    timezone: 'timezone',
    updatedById: 'updatedById'
  };

  export type SystemSettingsScalarFieldEnum = (typeof SystemSettingsScalarFieldEnum)[keyof typeof SystemSettingsScalarFieldEnum]


  export const HolidayScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    isRecurring: 'isRecurring'
  };

  export type HolidayScalarFieldEnum = (typeof HolidayScalarFieldEnum)[keyof typeof HolidayScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json[]'
   */
  export type ListJsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'AssignmentStatus'
   */
  export type EnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus'>
    


  /**
   * Reference to a field of type 'AssignmentStatus[]'
   */
  export type ListEnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus[]'>
    


  /**
   * Reference to a field of type 'FlowStatus'
   */
  export type EnumFlowStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FlowStatus'>
    


  /**
   * Reference to a field of type 'FlowStatus[]'
   */
  export type ListEnumFlowStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FlowStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'StepStatus'
   */
  export type EnumStepStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StepStatus'>
    


  /**
   * Reference to a field of type 'StepStatus[]'
   */
  export type ListEnumStepStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StepStatus[]'>
    


  /**
   * Reference to a field of type 'ComponentStatus'
   */
  export type EnumComponentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComponentStatus'>
    


  /**
   * Reference to a field of type 'ComponentStatus[]'
   */
  export type ListEnumComponentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComponentStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationPriority'
   */
  export type EnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority'>
    


  /**
   * Reference to a field of type 'NotificationPriority[]'
   */
  export type ListEnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority[]'>
    


  /**
   * Reference to a field of type 'NotificationStatus'
   */
  export type EnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus'>
    


  /**
   * Reference to a field of type 'NotificationStatus[]'
   */
  export type ListEnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus[]'>
    


  /**
   * Reference to a field of type 'AchievementRarity'
   */
  export type EnumAchievementRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementRarity'>
    


  /**
   * Reference to a field of type 'AchievementRarity[]'
   */
  export type ListEnumAchievementRarityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AchievementRarity[]'>
    


  /**
   * Reference to a field of type 'DayOfWeek[]'
   */
  export type ListEnumDayOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DayOfWeek[]'>
    


  /**
   * Reference to a field of type 'DayOfWeek'
   */
  export type EnumDayOfWeekFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DayOfWeek'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    telegramId?: StringFilter<"User"> | string
    telegramUsername?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    roles?: EnumRoleNullableListFilter<"User">
    createdFlows?: FlowListRelationFilter
    assignedFlowsAsUser?: FlowAssignmentListRelationFilter
    assignedFlowsAsBuddy?: FlowAssignmentListRelationFilter
    notifications?: NotificationListRelationFilter
    userAchievements?: UserAchievementListRelationFilter
    createdNotifications?: NotificationListRelationFilter
    pausedAssignments?: FlowAssignmentListRelationFilter
    updatedSettings?: SystemSettingsListRelationFilter
    userProgress?: XOR<UserProgressNullableScalarRelationFilter, UserProgressWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    telegramId?: SortOrder
    telegramUsername?: SortOrderInput | SortOrder
    name?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    roles?: SortOrder
    createdFlows?: FlowOrderByRelationAggregateInput
    assignedFlowsAsUser?: FlowAssignmentOrderByRelationAggregateInput
    assignedFlowsAsBuddy?: FlowAssignmentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    userAchievements?: UserAchievementOrderByRelationAggregateInput
    createdNotifications?: NotificationOrderByRelationAggregateInput
    pausedAssignments?: FlowAssignmentOrderByRelationAggregateInput
    updatedSettings?: SystemSettingsOrderByRelationAggregateInput
    userProgress?: UserProgressOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    telegramId?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    telegramUsername?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    roles?: EnumRoleNullableListFilter<"User">
    createdFlows?: FlowListRelationFilter
    assignedFlowsAsUser?: FlowAssignmentListRelationFilter
    assignedFlowsAsBuddy?: FlowAssignmentListRelationFilter
    notifications?: NotificationListRelationFilter
    userAchievements?: UserAchievementListRelationFilter
    createdNotifications?: NotificationListRelationFilter
    pausedAssignments?: FlowAssignmentListRelationFilter
    updatedSettings?: SystemSettingsListRelationFilter
    userProgress?: XOR<UserProgressNullableScalarRelationFilter, UserProgressWhereInput> | null
  }, "id" | "telegramId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    telegramId?: SortOrder
    telegramUsername?: SortOrderInput | SortOrder
    name?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    roles?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    telegramId?: StringWithAggregatesFilter<"User"> | string
    telegramUsername?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    roles?: EnumRoleNullableListFilter<"User">
  }

  export type FlowWhereInput = {
    AND?: FlowWhereInput | FlowWhereInput[]
    OR?: FlowWhereInput[]
    NOT?: FlowWhereInput | FlowWhereInput[]
    id?: StringFilter<"Flow"> | string
    createdAt?: DateTimeFilter<"Flow"> | Date | string
    updatedAt?: DateTimeFilter<"Flow"> | Date | string
    version?: StringFilter<"Flow"> | string
    title?: StringFilter<"Flow"> | string
    description?: StringFilter<"Flow"> | string
    isActive?: BoolFilter<"Flow"> | boolean
    defaultDeadlineDays?: IntNullableFilter<"Flow"> | number | null
    stepsCount?: IntFilter<"Flow"> | number
    creatorId?: StringFilter<"Flow"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    steps?: FlowStepListRelationFilter
    snapshots?: FlowSnapshotListRelationFilter
  }

  export type FlowOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    defaultDeadlineDays?: SortOrderInput | SortOrder
    stepsCount?: SortOrder
    creatorId?: SortOrder
    creator?: UserOrderByWithRelationInput
    steps?: FlowStepOrderByRelationAggregateInput
    snapshots?: FlowSnapshotOrderByRelationAggregateInput
  }

  export type FlowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FlowWhereInput | FlowWhereInput[]
    OR?: FlowWhereInput[]
    NOT?: FlowWhereInput | FlowWhereInput[]
    createdAt?: DateTimeFilter<"Flow"> | Date | string
    updatedAt?: DateTimeFilter<"Flow"> | Date | string
    version?: StringFilter<"Flow"> | string
    title?: StringFilter<"Flow"> | string
    description?: StringFilter<"Flow"> | string
    isActive?: BoolFilter<"Flow"> | boolean
    defaultDeadlineDays?: IntNullableFilter<"Flow"> | number | null
    stepsCount?: IntFilter<"Flow"> | number
    creatorId?: StringFilter<"Flow"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    steps?: FlowStepListRelationFilter
    snapshots?: FlowSnapshotListRelationFilter
  }, "id">

  export type FlowOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    defaultDeadlineDays?: SortOrderInput | SortOrder
    stepsCount?: SortOrder
    creatorId?: SortOrder
    _count?: FlowCountOrderByAggregateInput
    _avg?: FlowAvgOrderByAggregateInput
    _max?: FlowMaxOrderByAggregateInput
    _min?: FlowMinOrderByAggregateInput
    _sum?: FlowSumOrderByAggregateInput
  }

  export type FlowScalarWhereWithAggregatesInput = {
    AND?: FlowScalarWhereWithAggregatesInput | FlowScalarWhereWithAggregatesInput[]
    OR?: FlowScalarWhereWithAggregatesInput[]
    NOT?: FlowScalarWhereWithAggregatesInput | FlowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Flow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Flow"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Flow"> | Date | string
    version?: StringWithAggregatesFilter<"Flow"> | string
    title?: StringWithAggregatesFilter<"Flow"> | string
    description?: StringWithAggregatesFilter<"Flow"> | string
    isActive?: BoolWithAggregatesFilter<"Flow"> | boolean
    defaultDeadlineDays?: IntNullableWithAggregatesFilter<"Flow"> | number | null
    stepsCount?: IntWithAggregatesFilter<"Flow"> | number
    creatorId?: StringWithAggregatesFilter<"Flow"> | string
  }

  export type FlowStepWhereInput = {
    AND?: FlowStepWhereInput | FlowStepWhereInput[]
    OR?: FlowStepWhereInput[]
    NOT?: FlowStepWhereInput | FlowStepWhereInput[]
    id?: StringFilter<"FlowStep"> | string
    order?: IntFilter<"FlowStep"> | number
    title?: StringFilter<"FlowStep"> | string
    description?: StringFilter<"FlowStep"> | string
    templateComponents?: JsonNullableListFilter<"FlowStep">
    componentsCount?: IntFilter<"FlowStep"> | number
    flowId?: StringFilter<"FlowStep"> | string
    flow?: XOR<FlowScalarRelationFilter, FlowWhereInput>
    components?: FlowComponentListRelationFilter
  }

  export type FlowStepOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    templateComponents?: SortOrder
    componentsCount?: SortOrder
    flowId?: SortOrder
    flow?: FlowOrderByWithRelationInput
    components?: FlowComponentOrderByRelationAggregateInput
  }

  export type FlowStepWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    flowId_order?: FlowStepFlowIdOrderCompoundUniqueInput
    AND?: FlowStepWhereInput | FlowStepWhereInput[]
    OR?: FlowStepWhereInput[]
    NOT?: FlowStepWhereInput | FlowStepWhereInput[]
    order?: IntFilter<"FlowStep"> | number
    title?: StringFilter<"FlowStep"> | string
    description?: StringFilter<"FlowStep"> | string
    templateComponents?: JsonNullableListFilter<"FlowStep">
    componentsCount?: IntFilter<"FlowStep"> | number
    flowId?: StringFilter<"FlowStep"> | string
    flow?: XOR<FlowScalarRelationFilter, FlowWhereInput>
    components?: FlowComponentListRelationFilter
  }, "id" | "flowId_order">

  export type FlowStepOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    templateComponents?: SortOrder
    componentsCount?: SortOrder
    flowId?: SortOrder
    _count?: FlowStepCountOrderByAggregateInput
    _avg?: FlowStepAvgOrderByAggregateInput
    _max?: FlowStepMaxOrderByAggregateInput
    _min?: FlowStepMinOrderByAggregateInput
    _sum?: FlowStepSumOrderByAggregateInput
  }

  export type FlowStepScalarWhereWithAggregatesInput = {
    AND?: FlowStepScalarWhereWithAggregatesInput | FlowStepScalarWhereWithAggregatesInput[]
    OR?: FlowStepScalarWhereWithAggregatesInput[]
    NOT?: FlowStepScalarWhereWithAggregatesInput | FlowStepScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlowStep"> | string
    order?: IntWithAggregatesFilter<"FlowStep"> | number
    title?: StringWithAggregatesFilter<"FlowStep"> | string
    description?: StringWithAggregatesFilter<"FlowStep"> | string
    templateComponents?: JsonNullableListFilter<"FlowStep">
    componentsCount?: IntWithAggregatesFilter<"FlowStep"> | number
    flowId?: StringWithAggregatesFilter<"FlowStep"> | string
  }

  export type FlowComponentWhereInput = {
    AND?: FlowComponentWhereInput | FlowComponentWhereInput[]
    OR?: FlowComponentWhereInput[]
    NOT?: FlowComponentWhereInput | FlowComponentWhereInput[]
    id?: StringFilter<"FlowComponent"> | string
    order?: IntFilter<"FlowComponent"> | number
    isRequired?: BoolFilter<"FlowComponent"> | boolean
    type?: StringFilter<"FlowComponent"> | string
    typeVersion?: StringFilter<"FlowComponent"> | string
    data?: JsonFilter<"FlowComponent">
    stepId?: StringFilter<"FlowComponent"> | string
    step?: XOR<FlowStepScalarRelationFilter, FlowStepWhereInput>
  }

  export type FlowComponentOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
    step?: FlowStepOrderByWithRelationInput
  }

  export type FlowComponentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stepId_order?: FlowComponentStepIdOrderCompoundUniqueInput
    AND?: FlowComponentWhereInput | FlowComponentWhereInput[]
    OR?: FlowComponentWhereInput[]
    NOT?: FlowComponentWhereInput | FlowComponentWhereInput[]
    order?: IntFilter<"FlowComponent"> | number
    isRequired?: BoolFilter<"FlowComponent"> | boolean
    type?: StringFilter<"FlowComponent"> | string
    typeVersion?: StringFilter<"FlowComponent"> | string
    data?: JsonFilter<"FlowComponent">
    stepId?: StringFilter<"FlowComponent"> | string
    step?: XOR<FlowStepScalarRelationFilter, FlowStepWhereInput>
  }, "id" | "stepId_order">

  export type FlowComponentOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
    _count?: FlowComponentCountOrderByAggregateInput
    _avg?: FlowComponentAvgOrderByAggregateInput
    _max?: FlowComponentMaxOrderByAggregateInput
    _min?: FlowComponentMinOrderByAggregateInput
    _sum?: FlowComponentSumOrderByAggregateInput
  }

  export type FlowComponentScalarWhereWithAggregatesInput = {
    AND?: FlowComponentScalarWhereWithAggregatesInput | FlowComponentScalarWhereWithAggregatesInput[]
    OR?: FlowComponentScalarWhereWithAggregatesInput[]
    NOT?: FlowComponentScalarWhereWithAggregatesInput | FlowComponentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlowComponent"> | string
    order?: IntWithAggregatesFilter<"FlowComponent"> | number
    isRequired?: BoolWithAggregatesFilter<"FlowComponent"> | boolean
    type?: StringWithAggregatesFilter<"FlowComponent"> | string
    typeVersion?: StringWithAggregatesFilter<"FlowComponent"> | string
    data?: JsonWithAggregatesFilter<"FlowComponent">
    stepId?: StringWithAggregatesFilter<"FlowComponent"> | string
  }

  export type FlowSnapshotWhereInput = {
    AND?: FlowSnapshotWhereInput | FlowSnapshotWhereInput[]
    OR?: FlowSnapshotWhereInput[]
    NOT?: FlowSnapshotWhereInput | FlowSnapshotWhereInput[]
    id?: StringFilter<"FlowSnapshot"> | string
    createdAt?: DateTimeFilter<"FlowSnapshot"> | Date | string
    title?: StringFilter<"FlowSnapshot"> | string
    description?: StringFilter<"FlowSnapshot"> | string
    snapshotVersion?: DateTimeFilter<"FlowSnapshot"> | Date | string
    originalFlowVersion?: StringFilter<"FlowSnapshot"> | string
    originalFlowId?: StringFilter<"FlowSnapshot"> | string
    assignmentId?: StringNullableFilter<"FlowSnapshot"> | string | null
    originalFlow?: XOR<FlowScalarRelationFilter, FlowWhereInput>
    assignment?: XOR<FlowAssignmentNullableScalarRelationFilter, FlowAssignmentWhereInput> | null
    steps?: FlowStepSnapshotListRelationFilter
  }

  export type FlowSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotVersion?: SortOrder
    originalFlowVersion?: SortOrder
    originalFlowId?: SortOrder
    assignmentId?: SortOrderInput | SortOrder
    originalFlow?: FlowOrderByWithRelationInput
    assignment?: FlowAssignmentOrderByWithRelationInput
    steps?: FlowStepSnapshotOrderByRelationAggregateInput
  }

  export type FlowSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assignmentId?: string
    AND?: FlowSnapshotWhereInput | FlowSnapshotWhereInput[]
    OR?: FlowSnapshotWhereInput[]
    NOT?: FlowSnapshotWhereInput | FlowSnapshotWhereInput[]
    createdAt?: DateTimeFilter<"FlowSnapshot"> | Date | string
    title?: StringFilter<"FlowSnapshot"> | string
    description?: StringFilter<"FlowSnapshot"> | string
    snapshotVersion?: DateTimeFilter<"FlowSnapshot"> | Date | string
    originalFlowVersion?: StringFilter<"FlowSnapshot"> | string
    originalFlowId?: StringFilter<"FlowSnapshot"> | string
    originalFlow?: XOR<FlowScalarRelationFilter, FlowWhereInput>
    assignment?: XOR<FlowAssignmentNullableScalarRelationFilter, FlowAssignmentWhereInput> | null
    steps?: FlowStepSnapshotListRelationFilter
  }, "id" | "assignmentId">

  export type FlowSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotVersion?: SortOrder
    originalFlowVersion?: SortOrder
    originalFlowId?: SortOrder
    assignmentId?: SortOrderInput | SortOrder
    _count?: FlowSnapshotCountOrderByAggregateInput
    _max?: FlowSnapshotMaxOrderByAggregateInput
    _min?: FlowSnapshotMinOrderByAggregateInput
  }

  export type FlowSnapshotScalarWhereWithAggregatesInput = {
    AND?: FlowSnapshotScalarWhereWithAggregatesInput | FlowSnapshotScalarWhereWithAggregatesInput[]
    OR?: FlowSnapshotScalarWhereWithAggregatesInput[]
    NOT?: FlowSnapshotScalarWhereWithAggregatesInput | FlowSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlowSnapshot"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FlowSnapshot"> | Date | string
    title?: StringWithAggregatesFilter<"FlowSnapshot"> | string
    description?: StringWithAggregatesFilter<"FlowSnapshot"> | string
    snapshotVersion?: DateTimeWithAggregatesFilter<"FlowSnapshot"> | Date | string
    originalFlowVersion?: StringWithAggregatesFilter<"FlowSnapshot"> | string
    originalFlowId?: StringWithAggregatesFilter<"FlowSnapshot"> | string
    assignmentId?: StringNullableWithAggregatesFilter<"FlowSnapshot"> | string | null
  }

  export type FlowStepSnapshotWhereInput = {
    AND?: FlowStepSnapshotWhereInput | FlowStepSnapshotWhereInput[]
    OR?: FlowStepSnapshotWhereInput[]
    NOT?: FlowStepSnapshotWhereInput | FlowStepSnapshotWhereInput[]
    id?: StringFilter<"FlowStepSnapshot"> | string
    order?: IntFilter<"FlowStepSnapshot"> | number
    title?: StringFilter<"FlowStepSnapshot"> | string
    description?: StringFilter<"FlowStepSnapshot"> | string
    snapshotId?: StringFilter<"FlowStepSnapshot"> | string
    snapshot?: XOR<FlowSnapshotScalarRelationFilter, FlowSnapshotWhereInput>
    components?: ComponentSnapshotListRelationFilter
    progress?: StepProgressListRelationFilter
  }

  export type FlowStepSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotId?: SortOrder
    snapshot?: FlowSnapshotOrderByWithRelationInput
    components?: ComponentSnapshotOrderByRelationAggregateInput
    progress?: StepProgressOrderByRelationAggregateInput
  }

  export type FlowStepSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    snapshotId_order?: FlowStepSnapshotSnapshotIdOrderCompoundUniqueInput
    AND?: FlowStepSnapshotWhereInput | FlowStepSnapshotWhereInput[]
    OR?: FlowStepSnapshotWhereInput[]
    NOT?: FlowStepSnapshotWhereInput | FlowStepSnapshotWhereInput[]
    order?: IntFilter<"FlowStepSnapshot"> | number
    title?: StringFilter<"FlowStepSnapshot"> | string
    description?: StringFilter<"FlowStepSnapshot"> | string
    snapshotId?: StringFilter<"FlowStepSnapshot"> | string
    snapshot?: XOR<FlowSnapshotScalarRelationFilter, FlowSnapshotWhereInput>
    components?: ComponentSnapshotListRelationFilter
    progress?: StepProgressListRelationFilter
  }, "id" | "snapshotId_order">

  export type FlowStepSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotId?: SortOrder
    _count?: FlowStepSnapshotCountOrderByAggregateInput
    _avg?: FlowStepSnapshotAvgOrderByAggregateInput
    _max?: FlowStepSnapshotMaxOrderByAggregateInput
    _min?: FlowStepSnapshotMinOrderByAggregateInput
    _sum?: FlowStepSnapshotSumOrderByAggregateInput
  }

  export type FlowStepSnapshotScalarWhereWithAggregatesInput = {
    AND?: FlowStepSnapshotScalarWhereWithAggregatesInput | FlowStepSnapshotScalarWhereWithAggregatesInput[]
    OR?: FlowStepSnapshotScalarWhereWithAggregatesInput[]
    NOT?: FlowStepSnapshotScalarWhereWithAggregatesInput | FlowStepSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlowStepSnapshot"> | string
    order?: IntWithAggregatesFilter<"FlowStepSnapshot"> | number
    title?: StringWithAggregatesFilter<"FlowStepSnapshot"> | string
    description?: StringWithAggregatesFilter<"FlowStepSnapshot"> | string
    snapshotId?: StringWithAggregatesFilter<"FlowStepSnapshot"> | string
  }

  export type ComponentSnapshotWhereInput = {
    AND?: ComponentSnapshotWhereInput | ComponentSnapshotWhereInput[]
    OR?: ComponentSnapshotWhereInput[]
    NOT?: ComponentSnapshotWhereInput | ComponentSnapshotWhereInput[]
    id?: StringFilter<"ComponentSnapshot"> | string
    order?: IntFilter<"ComponentSnapshot"> | number
    isRequired?: BoolFilter<"ComponentSnapshot"> | boolean
    type?: StringFilter<"ComponentSnapshot"> | string
    typeVersion?: StringFilter<"ComponentSnapshot"> | string
    data?: JsonFilter<"ComponentSnapshot">
    stepId?: StringFilter<"ComponentSnapshot"> | string
    step?: XOR<FlowStepSnapshotScalarRelationFilter, FlowStepSnapshotWhereInput>
    progress?: ComponentProgressListRelationFilter
  }

  export type ComponentSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
    step?: FlowStepSnapshotOrderByWithRelationInput
    progress?: ComponentProgressOrderByRelationAggregateInput
  }

  export type ComponentSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stepId_order?: ComponentSnapshotStepIdOrderCompoundUniqueInput
    AND?: ComponentSnapshotWhereInput | ComponentSnapshotWhereInput[]
    OR?: ComponentSnapshotWhereInput[]
    NOT?: ComponentSnapshotWhereInput | ComponentSnapshotWhereInput[]
    order?: IntFilter<"ComponentSnapshot"> | number
    isRequired?: BoolFilter<"ComponentSnapshot"> | boolean
    type?: StringFilter<"ComponentSnapshot"> | string
    typeVersion?: StringFilter<"ComponentSnapshot"> | string
    data?: JsonFilter<"ComponentSnapshot">
    stepId?: StringFilter<"ComponentSnapshot"> | string
    step?: XOR<FlowStepSnapshotScalarRelationFilter, FlowStepSnapshotWhereInput>
    progress?: ComponentProgressListRelationFilter
  }, "id" | "stepId_order">

  export type ComponentSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
    _count?: ComponentSnapshotCountOrderByAggregateInput
    _avg?: ComponentSnapshotAvgOrderByAggregateInput
    _max?: ComponentSnapshotMaxOrderByAggregateInput
    _min?: ComponentSnapshotMinOrderByAggregateInput
    _sum?: ComponentSnapshotSumOrderByAggregateInput
  }

  export type ComponentSnapshotScalarWhereWithAggregatesInput = {
    AND?: ComponentSnapshotScalarWhereWithAggregatesInput | ComponentSnapshotScalarWhereWithAggregatesInput[]
    OR?: ComponentSnapshotScalarWhereWithAggregatesInput[]
    NOT?: ComponentSnapshotScalarWhereWithAggregatesInput | ComponentSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComponentSnapshot"> | string
    order?: IntWithAggregatesFilter<"ComponentSnapshot"> | number
    isRequired?: BoolWithAggregatesFilter<"ComponentSnapshot"> | boolean
    type?: StringWithAggregatesFilter<"ComponentSnapshot"> | string
    typeVersion?: StringWithAggregatesFilter<"ComponentSnapshot"> | string
    data?: JsonWithAggregatesFilter<"ComponentSnapshot">
    stepId?: StringWithAggregatesFilter<"ComponentSnapshot"> | string
  }

  export type FlowAssignmentWhereInput = {
    AND?: FlowAssignmentWhereInput | FlowAssignmentWhereInput[]
    OR?: FlowAssignmentWhereInput[]
    NOT?: FlowAssignmentWhereInput | FlowAssignmentWhereInput[]
    id?: StringFilter<"FlowAssignment"> | string
    assignedAt?: DateTimeFilter<"FlowAssignment"> | Date | string
    startedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    deadline?: DateTimeFilter<"FlowAssignment"> | Date | string
    status?: EnumAssignmentStatusFilter<"FlowAssignment"> | $Enums.AssignmentStatus
    isOverdue?: BoolFilter<"FlowAssignment"> | boolean
    pauseReason?: StringNullableFilter<"FlowAssignment"> | string | null
    pausedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    timeSpent?: IntFilter<"FlowAssignment"> | number
    lastActivity?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    userId?: StringFilter<"FlowAssignment"> | string
    pausedById?: StringNullableFilter<"FlowAssignment"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    snapshot?: XOR<FlowSnapshotNullableScalarRelationFilter, FlowSnapshotWhereInput> | null
    buddies?: UserListRelationFilter
    pausedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    flowProgress?: XOR<FlowProgressNullableScalarRelationFilter, FlowProgressWhereInput> | null
  }

  export type FlowAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    deadline?: SortOrder
    status?: SortOrder
    isOverdue?: SortOrder
    pauseReason?: SortOrderInput | SortOrder
    pausedAt?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    userId?: SortOrder
    pausedById?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    snapshot?: FlowSnapshotOrderByWithRelationInput
    buddies?: UserOrderByRelationAggregateInput
    pausedBy?: UserOrderByWithRelationInput
    flowProgress?: FlowProgressOrderByWithRelationInput
  }

  export type FlowAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FlowAssignmentWhereInput | FlowAssignmentWhereInput[]
    OR?: FlowAssignmentWhereInput[]
    NOT?: FlowAssignmentWhereInput | FlowAssignmentWhereInput[]
    assignedAt?: DateTimeFilter<"FlowAssignment"> | Date | string
    startedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    deadline?: DateTimeFilter<"FlowAssignment"> | Date | string
    status?: EnumAssignmentStatusFilter<"FlowAssignment"> | $Enums.AssignmentStatus
    isOverdue?: BoolFilter<"FlowAssignment"> | boolean
    pauseReason?: StringNullableFilter<"FlowAssignment"> | string | null
    pausedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    timeSpent?: IntFilter<"FlowAssignment"> | number
    lastActivity?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    userId?: StringFilter<"FlowAssignment"> | string
    pausedById?: StringNullableFilter<"FlowAssignment"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    snapshot?: XOR<FlowSnapshotNullableScalarRelationFilter, FlowSnapshotWhereInput> | null
    buddies?: UserListRelationFilter
    pausedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    flowProgress?: XOR<FlowProgressNullableScalarRelationFilter, FlowProgressWhereInput> | null
  }, "id">

  export type FlowAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    deadline?: SortOrder
    status?: SortOrder
    isOverdue?: SortOrder
    pauseReason?: SortOrderInput | SortOrder
    pausedAt?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    userId?: SortOrder
    pausedById?: SortOrderInput | SortOrder
    _count?: FlowAssignmentCountOrderByAggregateInput
    _avg?: FlowAssignmentAvgOrderByAggregateInput
    _max?: FlowAssignmentMaxOrderByAggregateInput
    _min?: FlowAssignmentMinOrderByAggregateInput
    _sum?: FlowAssignmentSumOrderByAggregateInput
  }

  export type FlowAssignmentScalarWhereWithAggregatesInput = {
    AND?: FlowAssignmentScalarWhereWithAggregatesInput | FlowAssignmentScalarWhereWithAggregatesInput[]
    OR?: FlowAssignmentScalarWhereWithAggregatesInput[]
    NOT?: FlowAssignmentScalarWhereWithAggregatesInput | FlowAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlowAssignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"FlowAssignment"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"FlowAssignment"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"FlowAssignment"> | Date | string | null
    deadline?: DateTimeWithAggregatesFilter<"FlowAssignment"> | Date | string
    status?: EnumAssignmentStatusWithAggregatesFilter<"FlowAssignment"> | $Enums.AssignmentStatus
    isOverdue?: BoolWithAggregatesFilter<"FlowAssignment"> | boolean
    pauseReason?: StringNullableWithAggregatesFilter<"FlowAssignment"> | string | null
    pausedAt?: DateTimeNullableWithAggregatesFilter<"FlowAssignment"> | Date | string | null
    timeSpent?: IntWithAggregatesFilter<"FlowAssignment"> | number
    lastActivity?: DateTimeNullableWithAggregatesFilter<"FlowAssignment"> | Date | string | null
    userId?: StringWithAggregatesFilter<"FlowAssignment"> | string
    pausedById?: StringNullableWithAggregatesFilter<"FlowAssignment"> | string | null
  }

  export type UserProgressWhereInput = {
    AND?: UserProgressWhereInput | UserProgressWhereInput[]
    OR?: UserProgressWhereInput[]
    NOT?: UserProgressWhereInput | UserProgressWhereInput[]
    id?: StringFilter<"UserProgress"> | string
    totalTimeSpent?: IntFilter<"UserProgress"> | number
    streakDays?: IntFilter<"UserProgress"> | number
    userId?: StringFilter<"UserProgress"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserProgressOrderByWithRelationInput = {
    id?: SortOrder
    totalTimeSpent?: SortOrder
    streakDays?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserProgressWhereInput | UserProgressWhereInput[]
    OR?: UserProgressWhereInput[]
    NOT?: UserProgressWhereInput | UserProgressWhereInput[]
    totalTimeSpent?: IntFilter<"UserProgress"> | number
    streakDays?: IntFilter<"UserProgress"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserProgressOrderByWithAggregationInput = {
    id?: SortOrder
    totalTimeSpent?: SortOrder
    streakDays?: SortOrder
    userId?: SortOrder
    _count?: UserProgressCountOrderByAggregateInput
    _avg?: UserProgressAvgOrderByAggregateInput
    _max?: UserProgressMaxOrderByAggregateInput
    _min?: UserProgressMinOrderByAggregateInput
    _sum?: UserProgressSumOrderByAggregateInput
  }

  export type UserProgressScalarWhereWithAggregatesInput = {
    AND?: UserProgressScalarWhereWithAggregatesInput | UserProgressScalarWhereWithAggregatesInput[]
    OR?: UserProgressScalarWhereWithAggregatesInput[]
    NOT?: UserProgressScalarWhereWithAggregatesInput | UserProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProgress"> | string
    totalTimeSpent?: IntWithAggregatesFilter<"UserProgress"> | number
    streakDays?: IntWithAggregatesFilter<"UserProgress"> | number
    userId?: StringWithAggregatesFilter<"UserProgress"> | string
  }

  export type FlowProgressWhereInput = {
    AND?: FlowProgressWhereInput | FlowProgressWhereInput[]
    OR?: FlowProgressWhereInput[]
    NOT?: FlowProgressWhereInput | FlowProgressWhereInput[]
    id?: StringFilter<"FlowProgress"> | string
    assignmentId?: StringFilter<"FlowProgress"> | string
    status?: EnumFlowStatusFilter<"FlowProgress"> | $Enums.FlowStatus
    percentage?: FloatFilter<"FlowProgress"> | number
    lastActivity?: DateTimeNullableFilter<"FlowProgress"> | Date | string | null
    assignment?: XOR<FlowAssignmentScalarRelationFilter, FlowAssignmentWhereInput>
    stepsProgress?: StepProgressListRelationFilter
  }

  export type FlowProgressOrderByWithRelationInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    assignment?: FlowAssignmentOrderByWithRelationInput
    stepsProgress?: StepProgressOrderByRelationAggregateInput
  }

  export type FlowProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assignmentId?: string
    AND?: FlowProgressWhereInput | FlowProgressWhereInput[]
    OR?: FlowProgressWhereInput[]
    NOT?: FlowProgressWhereInput | FlowProgressWhereInput[]
    status?: EnumFlowStatusFilter<"FlowProgress"> | $Enums.FlowStatus
    percentage?: FloatFilter<"FlowProgress"> | number
    lastActivity?: DateTimeNullableFilter<"FlowProgress"> | Date | string | null
    assignment?: XOR<FlowAssignmentScalarRelationFilter, FlowAssignmentWhereInput>
    stepsProgress?: StepProgressListRelationFilter
  }, "id" | "assignmentId">

  export type FlowProgressOrderByWithAggregationInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    lastActivity?: SortOrderInput | SortOrder
    _count?: FlowProgressCountOrderByAggregateInput
    _avg?: FlowProgressAvgOrderByAggregateInput
    _max?: FlowProgressMaxOrderByAggregateInput
    _min?: FlowProgressMinOrderByAggregateInput
    _sum?: FlowProgressSumOrderByAggregateInput
  }

  export type FlowProgressScalarWhereWithAggregatesInput = {
    AND?: FlowProgressScalarWhereWithAggregatesInput | FlowProgressScalarWhereWithAggregatesInput[]
    OR?: FlowProgressScalarWhereWithAggregatesInput[]
    NOT?: FlowProgressScalarWhereWithAggregatesInput | FlowProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FlowProgress"> | string
    assignmentId?: StringWithAggregatesFilter<"FlowProgress"> | string
    status?: EnumFlowStatusWithAggregatesFilter<"FlowProgress"> | $Enums.FlowStatus
    percentage?: FloatWithAggregatesFilter<"FlowProgress"> | number
    lastActivity?: DateTimeNullableWithAggregatesFilter<"FlowProgress"> | Date | string | null
  }

  export type StepProgressWhereInput = {
    AND?: StepProgressWhereInput | StepProgressWhereInput[]
    OR?: StepProgressWhereInput[]
    NOT?: StepProgressWhereInput | StepProgressWhereInput[]
    id?: StringFilter<"StepProgress"> | string
    stepSnapshotId?: StringFilter<"StepProgress"> | string
    status?: EnumStepStatusFilter<"StepProgress"> | $Enums.StepStatus
    percentage?: FloatFilter<"StepProgress"> | number
    startedAt?: DateTimeNullableFilter<"StepProgress"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"StepProgress"> | Date | string | null
    timeSpent?: IntFilter<"StepProgress"> | number
    flowProgressId?: StringFilter<"StepProgress"> | string
    stepSnapshot?: XOR<FlowStepSnapshotScalarRelationFilter, FlowStepSnapshotWhereInput>
    flowProgress?: XOR<FlowProgressScalarRelationFilter, FlowProgressWhereInput>
    componentProgress?: ComponentProgressListRelationFilter
  }

  export type StepProgressOrderByWithRelationInput = {
    id?: SortOrder
    stepSnapshotId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    flowProgressId?: SortOrder
    stepSnapshot?: FlowStepSnapshotOrderByWithRelationInput
    flowProgress?: FlowProgressOrderByWithRelationInput
    componentProgress?: ComponentProgressOrderByRelationAggregateInput
  }

  export type StepProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    flowProgressId_stepSnapshotId?: StepProgressFlowProgressIdStepSnapshotIdCompoundUniqueInput
    AND?: StepProgressWhereInput | StepProgressWhereInput[]
    OR?: StepProgressWhereInput[]
    NOT?: StepProgressWhereInput | StepProgressWhereInput[]
    stepSnapshotId?: StringFilter<"StepProgress"> | string
    status?: EnumStepStatusFilter<"StepProgress"> | $Enums.StepStatus
    percentage?: FloatFilter<"StepProgress"> | number
    startedAt?: DateTimeNullableFilter<"StepProgress"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"StepProgress"> | Date | string | null
    timeSpent?: IntFilter<"StepProgress"> | number
    flowProgressId?: StringFilter<"StepProgress"> | string
    stepSnapshot?: XOR<FlowStepSnapshotScalarRelationFilter, FlowStepSnapshotWhereInput>
    flowProgress?: XOR<FlowProgressScalarRelationFilter, FlowProgressWhereInput>
    componentProgress?: ComponentProgressListRelationFilter
  }, "id" | "flowProgressId_stepSnapshotId">

  export type StepProgressOrderByWithAggregationInput = {
    id?: SortOrder
    stepSnapshotId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    flowProgressId?: SortOrder
    _count?: StepProgressCountOrderByAggregateInput
    _avg?: StepProgressAvgOrderByAggregateInput
    _max?: StepProgressMaxOrderByAggregateInput
    _min?: StepProgressMinOrderByAggregateInput
    _sum?: StepProgressSumOrderByAggregateInput
  }

  export type StepProgressScalarWhereWithAggregatesInput = {
    AND?: StepProgressScalarWhereWithAggregatesInput | StepProgressScalarWhereWithAggregatesInput[]
    OR?: StepProgressScalarWhereWithAggregatesInput[]
    NOT?: StepProgressScalarWhereWithAggregatesInput | StepProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StepProgress"> | string
    stepSnapshotId?: StringWithAggregatesFilter<"StepProgress"> | string
    status?: EnumStepStatusWithAggregatesFilter<"StepProgress"> | $Enums.StepStatus
    percentage?: FloatWithAggregatesFilter<"StepProgress"> | number
    startedAt?: DateTimeNullableWithAggregatesFilter<"StepProgress"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"StepProgress"> | Date | string | null
    timeSpent?: IntWithAggregatesFilter<"StepProgress"> | number
    flowProgressId?: StringWithAggregatesFilter<"StepProgress"> | string
  }

  export type ComponentProgressWhereInput = {
    AND?: ComponentProgressWhereInput | ComponentProgressWhereInput[]
    OR?: ComponentProgressWhereInput[]
    NOT?: ComponentProgressWhereInput | ComponentProgressWhereInput[]
    id?: StringFilter<"ComponentProgress"> | string
    componentSnapshotId?: StringFilter<"ComponentProgress"> | string
    status?: EnumComponentStatusFilter<"ComponentProgress"> | $Enums.ComponentStatus
    startedAt?: DateTimeNullableFilter<"ComponentProgress"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ComponentProgress"> | Date | string | null
    timeSpent?: IntFilter<"ComponentProgress"> | number
    progressData?: JsonNullableFilter<"ComponentProgress">
    stepProgressId?: StringFilter<"ComponentProgress"> | string
    componentSnapshot?: XOR<ComponentSnapshotScalarRelationFilter, ComponentSnapshotWhereInput>
    stepProgress?: XOR<StepProgressScalarRelationFilter, StepProgressWhereInput>
  }

  export type ComponentProgressOrderByWithRelationInput = {
    id?: SortOrder
    componentSnapshotId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    progressData?: SortOrderInput | SortOrder
    stepProgressId?: SortOrder
    componentSnapshot?: ComponentSnapshotOrderByWithRelationInput
    stepProgress?: StepProgressOrderByWithRelationInput
  }

  export type ComponentProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stepProgressId_componentSnapshotId?: ComponentProgressStepProgressIdComponentSnapshotIdCompoundUniqueInput
    AND?: ComponentProgressWhereInput | ComponentProgressWhereInput[]
    OR?: ComponentProgressWhereInput[]
    NOT?: ComponentProgressWhereInput | ComponentProgressWhereInput[]
    componentSnapshotId?: StringFilter<"ComponentProgress"> | string
    status?: EnumComponentStatusFilter<"ComponentProgress"> | $Enums.ComponentStatus
    startedAt?: DateTimeNullableFilter<"ComponentProgress"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ComponentProgress"> | Date | string | null
    timeSpent?: IntFilter<"ComponentProgress"> | number
    progressData?: JsonNullableFilter<"ComponentProgress">
    stepProgressId?: StringFilter<"ComponentProgress"> | string
    componentSnapshot?: XOR<ComponentSnapshotScalarRelationFilter, ComponentSnapshotWhereInput>
    stepProgress?: XOR<StepProgressScalarRelationFilter, StepProgressWhereInput>
  }, "id" | "stepProgressId_componentSnapshotId">

  export type ComponentProgressOrderByWithAggregationInput = {
    id?: SortOrder
    componentSnapshotId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    timeSpent?: SortOrder
    progressData?: SortOrderInput | SortOrder
    stepProgressId?: SortOrder
    _count?: ComponentProgressCountOrderByAggregateInput
    _avg?: ComponentProgressAvgOrderByAggregateInput
    _max?: ComponentProgressMaxOrderByAggregateInput
    _min?: ComponentProgressMinOrderByAggregateInput
    _sum?: ComponentProgressSumOrderByAggregateInput
  }

  export type ComponentProgressScalarWhereWithAggregatesInput = {
    AND?: ComponentProgressScalarWhereWithAggregatesInput | ComponentProgressScalarWhereWithAggregatesInput[]
    OR?: ComponentProgressScalarWhereWithAggregatesInput[]
    NOT?: ComponentProgressScalarWhereWithAggregatesInput | ComponentProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComponentProgress"> | string
    componentSnapshotId?: StringWithAggregatesFilter<"ComponentProgress"> | string
    status?: EnumComponentStatusWithAggregatesFilter<"ComponentProgress"> | $Enums.ComponentStatus
    startedAt?: DateTimeNullableWithAggregatesFilter<"ComponentProgress"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"ComponentProgress"> | Date | string | null
    timeSpent?: IntWithAggregatesFilter<"ComponentProgress"> | number
    progressData?: JsonNullableWithAggregatesFilter<"ComponentProgress">
    stepProgressId?: StringWithAggregatesFilter<"ComponentProgress"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    scheduledFor?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    context?: JsonNullableFilter<"Notification">
    actions?: JsonNullableFilter<"Notification">
    recipientId?: StringFilter<"Notification"> | string
    senderId?: StringNullableFilter<"Notification"> | string | null
    recipient?: XOR<UserScalarRelationFilter, UserWhereInput>
    sender?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    readAt?: SortOrderInput | SortOrder
    scheduledFor?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    actions?: SortOrderInput | SortOrder
    recipientId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    recipient?: UserOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    scheduledFor?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    context?: JsonNullableFilter<"Notification">
    actions?: JsonNullableFilter<"Notification">
    recipientId?: StringFilter<"Notification"> | string
    senderId?: StringNullableFilter<"Notification"> | string | null
    recipient?: XOR<UserScalarRelationFilter, UserWhereInput>
    sender?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    readAt?: SortOrderInput | SortOrder
    scheduledFor?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    context?: SortOrderInput | SortOrder
    actions?: SortOrderInput | SortOrder
    recipientId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    type?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    priority?: EnumNotificationPriorityWithAggregatesFilter<"Notification"> | $Enums.NotificationPriority
    status?: EnumNotificationStatusWithAggregatesFilter<"Notification"> | $Enums.NotificationStatus
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    scheduledFor?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    context?: JsonNullableWithAggregatesFilter<"Notification">
    actions?: JsonNullableWithAggregatesFilter<"Notification">
    recipientId?: StringWithAggregatesFilter<"Notification"> | string
    senderId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
  }

  export type AchievementWhereInput = {
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    id?: StringFilter<"Achievement"> | string
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    key?: StringFilter<"Achievement"> | string
    title?: StringFilter<"Achievement"> | string
    description?: StringFilter<"Achievement"> | string
    icon?: StringFilter<"Achievement"> | string
    rarity?: EnumAchievementRarityFilter<"Achievement"> | $Enums.AchievementRarity
    criteria?: JsonFilter<"Achievement">
    userAchievements?: UserAchievementListRelationFilter
  }

  export type AchievementOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    key?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    rarity?: SortOrder
    criteria?: SortOrder
    userAchievements?: UserAchievementOrderByRelationAggregateInput
  }

  export type AchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: AchievementWhereInput | AchievementWhereInput[]
    OR?: AchievementWhereInput[]
    NOT?: AchievementWhereInput | AchievementWhereInput[]
    createdAt?: DateTimeFilter<"Achievement"> | Date | string
    title?: StringFilter<"Achievement"> | string
    description?: StringFilter<"Achievement"> | string
    icon?: StringFilter<"Achievement"> | string
    rarity?: EnumAchievementRarityFilter<"Achievement"> | $Enums.AchievementRarity
    criteria?: JsonFilter<"Achievement">
    userAchievements?: UserAchievementListRelationFilter
  }, "id" | "key">

  export type AchievementOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    key?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    rarity?: SortOrder
    criteria?: SortOrder
    _count?: AchievementCountOrderByAggregateInput
    _max?: AchievementMaxOrderByAggregateInput
    _min?: AchievementMinOrderByAggregateInput
  }

  export type AchievementScalarWhereWithAggregatesInput = {
    AND?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    OR?: AchievementScalarWhereWithAggregatesInput[]
    NOT?: AchievementScalarWhereWithAggregatesInput | AchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Achievement"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Achievement"> | Date | string
    key?: StringWithAggregatesFilter<"Achievement"> | string
    title?: StringWithAggregatesFilter<"Achievement"> | string
    description?: StringWithAggregatesFilter<"Achievement"> | string
    icon?: StringWithAggregatesFilter<"Achievement"> | string
    rarity?: EnumAchievementRarityWithAggregatesFilter<"Achievement"> | $Enums.AchievementRarity
    criteria?: JsonWithAggregatesFilter<"Achievement">
  }

  export type UserAchievementWhereInput = {
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    earnedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    context?: JsonNullableFilter<"UserAchievement">
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }

  export type UserAchievementOrderByWithRelationInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    context?: SortOrderInput | SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    user?: UserOrderByWithRelationInput
    achievement?: AchievementOrderByWithRelationInput
  }

  export type UserAchievementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_achievementId?: UserAchievementUserIdAchievementIdCompoundUniqueInput
    AND?: UserAchievementWhereInput | UserAchievementWhereInput[]
    OR?: UserAchievementWhereInput[]
    NOT?: UserAchievementWhereInput | UserAchievementWhereInput[]
    earnedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    context?: JsonNullableFilter<"UserAchievement">
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    achievement?: XOR<AchievementScalarRelationFilter, AchievementWhereInput>
  }, "id" | "userId_achievementId">

  export type UserAchievementOrderByWithAggregationInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    context?: SortOrderInput | SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
    _count?: UserAchievementCountOrderByAggregateInput
    _max?: UserAchievementMaxOrderByAggregateInput
    _min?: UserAchievementMinOrderByAggregateInput
  }

  export type UserAchievementScalarWhereWithAggregatesInput = {
    AND?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    OR?: UserAchievementScalarWhereWithAggregatesInput[]
    NOT?: UserAchievementScalarWhereWithAggregatesInput | UserAchievementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserAchievement"> | string
    earnedAt?: DateTimeWithAggregatesFilter<"UserAchievement"> | Date | string
    context?: JsonNullableWithAggregatesFilter<"UserAchievement">
    userId?: StringWithAggregatesFilter<"UserAchievement"> | string
    achievementId?: StringWithAggregatesFilter<"UserAchievement"> | string
  }

  export type SystemSettingsWhereInput = {
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    id?: StringFilter<"SystemSettings"> | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
    workingDays?: EnumDayOfWeekNullableListFilter<"SystemSettings">
    workingHoursStart?: StringFilter<"SystemSettings"> | string
    workingHoursEnd?: StringFilter<"SystemSettings"> | string
    timezone?: StringFilter<"SystemSettings"> | string
    updatedById?: StringFilter<"SystemSettings"> | string
    updatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SystemSettingsOrderByWithRelationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    workingDays?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timezone?: SortOrder
    updatedById?: SortOrder
    updatedBy?: UserOrderByWithRelationInput
  }

  export type SystemSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
    workingDays?: EnumDayOfWeekNullableListFilter<"SystemSettings">
    workingHoursStart?: StringFilter<"SystemSettings"> | string
    workingHoursEnd?: StringFilter<"SystemSettings"> | string
    timezone?: StringFilter<"SystemSettings"> | string
    updatedById?: StringFilter<"SystemSettings"> | string
    updatedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SystemSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    workingDays?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timezone?: SortOrder
    updatedById?: SortOrder
    _count?: SystemSettingsCountOrderByAggregateInput
    _max?: SystemSettingsMaxOrderByAggregateInput
    _min?: SystemSettingsMinOrderByAggregateInput
  }

  export type SystemSettingsScalarWhereWithAggregatesInput = {
    AND?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    OR?: SystemSettingsScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemSettings"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
    workingDays?: EnumDayOfWeekNullableListFilter<"SystemSettings">
    workingHoursStart?: StringWithAggregatesFilter<"SystemSettings"> | string
    workingHoursEnd?: StringWithAggregatesFilter<"SystemSettings"> | string
    timezone?: StringWithAggregatesFilter<"SystemSettings"> | string
    updatedById?: StringWithAggregatesFilter<"SystemSettings"> | string
  }

  export type HolidayWhereInput = {
    AND?: HolidayWhereInput | HolidayWhereInput[]
    OR?: HolidayWhereInput[]
    NOT?: HolidayWhereInput | HolidayWhereInput[]
    id?: StringFilter<"Holiday"> | string
    name?: StringFilter<"Holiday"> | string
    date?: DateTimeFilter<"Holiday"> | Date | string
    isRecurring?: BoolFilter<"Holiday"> | boolean
  }

  export type HolidayOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
  }

  export type HolidayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HolidayWhereInput | HolidayWhereInput[]
    OR?: HolidayWhereInput[]
    NOT?: HolidayWhereInput | HolidayWhereInput[]
    name?: StringFilter<"Holiday"> | string
    date?: DateTimeFilter<"Holiday"> | Date | string
    isRecurring?: BoolFilter<"Holiday"> | boolean
  }, "id">

  export type HolidayOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
    _count?: HolidayCountOrderByAggregateInput
    _max?: HolidayMaxOrderByAggregateInput
    _min?: HolidayMinOrderByAggregateInput
  }

  export type HolidayScalarWhereWithAggregatesInput = {
    AND?: HolidayScalarWhereWithAggregatesInput | HolidayScalarWhereWithAggregatesInput[]
    OR?: HolidayScalarWhereWithAggregatesInput[]
    NOT?: HolidayScalarWhereWithAggregatesInput | HolidayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Holiday"> | string
    name?: StringWithAggregatesFilter<"Holiday"> | string
    date?: DateTimeWithAggregatesFilter<"Holiday"> | Date | string
    isRecurring?: BoolWithAggregatesFilter<"Holiday"> | boolean
  }

  export type UserCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
  }

  export type FlowCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    creator: UserCreateNestedOneWithoutCreatedFlowsInput
    steps?: FlowStepCreateNestedManyWithoutFlowInput
    snapshots?: FlowSnapshotCreateNestedManyWithoutOriginalFlowInput
  }

  export type FlowUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    creatorId: string
    steps?: FlowStepUncheckedCreateNestedManyWithoutFlowInput
    snapshots?: FlowSnapshotUncheckedCreateNestedManyWithoutOriginalFlowInput
  }

  export type FlowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    creator?: UserUpdateOneRequiredWithoutCreatedFlowsNestedInput
    steps?: FlowStepUpdateManyWithoutFlowNestedInput
    snapshots?: FlowSnapshotUpdateManyWithoutOriginalFlowNestedInput
  }

  export type FlowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    steps?: FlowStepUncheckedUpdateManyWithoutFlowNestedInput
    snapshots?: FlowSnapshotUncheckedUpdateManyWithoutOriginalFlowNestedInput
  }

  export type FlowCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    creatorId: string
  }

  export type FlowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
  }

  export type FlowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowStepCreateInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
    flow: FlowCreateNestedOneWithoutStepsInput
    components?: FlowComponentCreateNestedManyWithoutStepInput
  }

  export type FlowStepUncheckedCreateInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
    flowId: string
    components?: FlowComponentUncheckedCreateNestedManyWithoutStepInput
  }

  export type FlowStepUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
    flow?: FlowUpdateOneRequiredWithoutStepsNestedInput
    components?: FlowComponentUpdateManyWithoutStepNestedInput
  }

  export type FlowStepUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
    flowId?: StringFieldUpdateOperationsInput | string
    components?: FlowComponentUncheckedUpdateManyWithoutStepNestedInput
  }

  export type FlowStepCreateManyInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
    flowId: string
  }

  export type FlowStepUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
  }

  export type FlowStepUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
    flowId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowComponentCreateInput = {
    id?: string
    order: number
    isRequired?: boolean
    type: string
    typeVersion?: string
    data: JsonNullValueInput | InputJsonValue
    step: FlowStepCreateNestedOneWithoutComponentsInput
  }

  export type FlowComponentUncheckedCreateInput = {
    id?: string
    order: number
    isRequired?: boolean
    type: string
    typeVersion?: string
    data: JsonNullValueInput | InputJsonValue
    stepId: string
  }

  export type FlowComponentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    step?: FlowStepUpdateOneRequiredWithoutComponentsNestedInput
  }

  export type FlowComponentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    stepId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowComponentCreateManyInput = {
    id?: string
    order: number
    isRequired?: boolean
    type: string
    typeVersion?: string
    data: JsonNullValueInput | InputJsonValue
    stepId: string
  }

  export type FlowComponentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type FlowComponentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    stepId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowSnapshotCreateInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    originalFlow: FlowCreateNestedOneWithoutSnapshotsInput
    assignment?: FlowAssignmentCreateNestedOneWithoutSnapshotInput
    steps?: FlowStepSnapshotCreateNestedManyWithoutSnapshotInput
  }

  export type FlowSnapshotUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    originalFlowId: string
    assignmentId?: string | null
    steps?: FlowStepSnapshotUncheckedCreateNestedManyWithoutSnapshotInput
  }

  export type FlowSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    originalFlow?: FlowUpdateOneRequiredWithoutSnapshotsNestedInput
    assignment?: FlowAssignmentUpdateOneWithoutSnapshotNestedInput
    steps?: FlowStepSnapshotUpdateManyWithoutSnapshotNestedInput
  }

  export type FlowSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    originalFlowId?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: FlowStepSnapshotUncheckedUpdateManyWithoutSnapshotNestedInput
  }

  export type FlowSnapshotCreateManyInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    originalFlowId: string
    assignmentId?: string | null
  }

  export type FlowSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
  }

  export type FlowSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    originalFlowId?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FlowStepSnapshotCreateInput = {
    id?: string
    order: number
    title: string
    description: string
    snapshot: FlowSnapshotCreateNestedOneWithoutStepsInput
    components?: ComponentSnapshotCreateNestedManyWithoutStepInput
    progress?: StepProgressCreateNestedManyWithoutStepSnapshotInput
  }

  export type FlowStepSnapshotUncheckedCreateInput = {
    id?: string
    order: number
    title: string
    description: string
    snapshotId: string
    components?: ComponentSnapshotUncheckedCreateNestedManyWithoutStepInput
    progress?: StepProgressUncheckedCreateNestedManyWithoutStepSnapshotInput
  }

  export type FlowStepSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshot?: FlowSnapshotUpdateOneRequiredWithoutStepsNestedInput
    components?: ComponentSnapshotUpdateManyWithoutStepNestedInput
    progress?: StepProgressUpdateManyWithoutStepSnapshotNestedInput
  }

  export type FlowStepSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotId?: StringFieldUpdateOperationsInput | string
    components?: ComponentSnapshotUncheckedUpdateManyWithoutStepNestedInput
    progress?: StepProgressUncheckedUpdateManyWithoutStepSnapshotNestedInput
  }

  export type FlowStepSnapshotCreateManyInput = {
    id?: string
    order: number
    title: string
    description: string
    snapshotId: string
  }

  export type FlowStepSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type FlowStepSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotId?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentSnapshotCreateInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
    step: FlowStepSnapshotCreateNestedOneWithoutComponentsInput
    progress?: ComponentProgressCreateNestedManyWithoutComponentSnapshotInput
  }

  export type ComponentSnapshotUncheckedCreateInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
    stepId: string
    progress?: ComponentProgressUncheckedCreateNestedManyWithoutComponentSnapshotInput
  }

  export type ComponentSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    step?: FlowStepSnapshotUpdateOneRequiredWithoutComponentsNestedInput
    progress?: ComponentProgressUpdateManyWithoutComponentSnapshotNestedInput
  }

  export type ComponentSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    stepId?: StringFieldUpdateOperationsInput | string
    progress?: ComponentProgressUncheckedUpdateManyWithoutComponentSnapshotNestedInput
  }

  export type ComponentSnapshotCreateManyInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
    stepId: string
  }

  export type ComponentSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type ComponentSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    stepId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowAssignmentCreateInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    user: UserCreateNestedOneWithoutAssignedFlowsAsUserInput
    snapshot?: FlowSnapshotCreateNestedOneWithoutAssignmentInput
    buddies?: UserCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    pausedBy?: UserCreateNestedOneWithoutPausedAssignmentsInput
    flowProgress?: FlowProgressCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentUncheckedCreateInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    userId: string
    pausedById?: string | null
    snapshot?: FlowSnapshotUncheckedCreateNestedOneWithoutAssignmentInput
    buddies?: UserUncheckedCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    flowProgress?: FlowProgressUncheckedCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAssignedFlowsAsUserNestedInput
    snapshot?: FlowSnapshotUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    pausedBy?: UserUpdateOneWithoutPausedAssignmentsNestedInput
    flowProgress?: FlowProgressUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
    snapshot?: FlowSnapshotUncheckedUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    flowProgress?: FlowProgressUncheckedUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentCreateManyInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    userId: string
    pausedById?: string | null
  }

  export type FlowAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FlowAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserProgressCreateInput = {
    id?: string
    totalTimeSpent?: number
    streakDays?: number
    user: UserCreateNestedOneWithoutUserProgressInput
  }

  export type UserProgressUncheckedCreateInput = {
    id?: string
    totalTimeSpent?: number
    streakDays?: number
    userId: string
  }

  export type UserProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTimeSpent?: IntFieldUpdateOperationsInput | number
    streakDays?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutUserProgressNestedInput
  }

  export type UserProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTimeSpent?: IntFieldUpdateOperationsInput | number
    streakDays?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserProgressCreateManyInput = {
    id?: string
    totalTimeSpent?: number
    streakDays?: number
    userId: string
  }

  export type UserProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTimeSpent?: IntFieldUpdateOperationsInput | number
    streakDays?: IntFieldUpdateOperationsInput | number
  }

  export type UserProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTimeSpent?: IntFieldUpdateOperationsInput | number
    streakDays?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowProgressCreateInput = {
    id?: string
    status?: $Enums.FlowStatus
    percentage?: number
    lastActivity?: Date | string | null
    assignment: FlowAssignmentCreateNestedOneWithoutFlowProgressInput
    stepsProgress?: StepProgressCreateNestedManyWithoutFlowProgressInput
  }

  export type FlowProgressUncheckedCreateInput = {
    id?: string
    assignmentId: string
    status?: $Enums.FlowStatus
    percentage?: number
    lastActivity?: Date | string | null
    stepsProgress?: StepProgressUncheckedCreateNestedManyWithoutFlowProgressInput
  }

  export type FlowProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignment?: FlowAssignmentUpdateOneRequiredWithoutFlowProgressNestedInput
    stepsProgress?: StepProgressUpdateManyWithoutFlowProgressNestedInput
  }

  export type FlowProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stepsProgress?: StepProgressUncheckedUpdateManyWithoutFlowProgressNestedInput
  }

  export type FlowProgressCreateManyInput = {
    id?: string
    assignmentId: string
    status?: $Enums.FlowStatus
    percentage?: number
    lastActivity?: Date | string | null
  }

  export type FlowProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FlowProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StepProgressCreateInput = {
    id?: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    stepSnapshot: FlowStepSnapshotCreateNestedOneWithoutProgressInput
    flowProgress: FlowProgressCreateNestedOneWithoutStepsProgressInput
    componentProgress?: ComponentProgressCreateNestedManyWithoutStepProgressInput
  }

  export type StepProgressUncheckedCreateInput = {
    id?: string
    stepSnapshotId: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    flowProgressId: string
    componentProgress?: ComponentProgressUncheckedCreateNestedManyWithoutStepProgressInput
  }

  export type StepProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    stepSnapshot?: FlowStepSnapshotUpdateOneRequiredWithoutProgressNestedInput
    flowProgress?: FlowProgressUpdateOneRequiredWithoutStepsProgressNestedInput
    componentProgress?: ComponentProgressUpdateManyWithoutStepProgressNestedInput
  }

  export type StepProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    flowProgressId?: StringFieldUpdateOperationsInput | string
    componentProgress?: ComponentProgressUncheckedUpdateManyWithoutStepProgressNestedInput
  }

  export type StepProgressCreateManyInput = {
    id?: string
    stepSnapshotId: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    flowProgressId: string
  }

  export type StepProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
  }

  export type StepProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    flowProgressId?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentProgressCreateInput = {
    id?: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    componentSnapshot: ComponentSnapshotCreateNestedOneWithoutProgressInput
    stepProgress: StepProgressCreateNestedOneWithoutComponentProgressInput
  }

  export type ComponentProgressUncheckedCreateInput = {
    id?: string
    componentSnapshotId: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId: string
  }

  export type ComponentProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    componentSnapshot?: ComponentSnapshotUpdateOneRequiredWithoutProgressNestedInput
    stepProgress?: StepProgressUpdateOneRequiredWithoutComponentProgressNestedInput
  }

  export type ComponentProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    componentSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentProgressCreateManyInput = {
    id?: string
    componentSnapshotId: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId: string
  }

  export type ComponentProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComponentProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    componentSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipient: UserCreateNestedOneWithoutNotificationsInput
    sender?: UserCreateNestedOneWithoutCreatedNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId: string
    senderId?: string | null
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipient?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    sender?: UserUpdateOneWithoutCreatedNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId: string
    senderId?: string | null
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId?: StringFieldUpdateOperationsInput | string
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AchievementCreateInput = {
    id?: string
    createdAt?: Date | string
    key: string
    title: string
    description: string
    icon: string
    rarity?: $Enums.AchievementRarity
    criteria: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    key: string
    title: string
    description: string
    icon: string
    rarity?: $Enums.AchievementRarity
    criteria: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutAchievementInput
  }

  export type AchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    key?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    criteria?: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    key?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    criteria?: JsonNullValueInput | InputJsonValue
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput
  }

  export type AchievementCreateManyInput = {
    id?: string
    createdAt?: Date | string
    key: string
    title: string
    description: string
    icon: string
    rarity?: $Enums.AchievementRarity
    criteria: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    key?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    key?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type UserAchievementCreateInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutUserAchievementsInput
    achievement: AchievementCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    achievementId: string
  }

  export type UserAchievementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutUserAchievementsNestedInput
    achievement?: AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementCreateManyInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    achievementId: string
  }

  export type UserAchievementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type SystemSettingsCreateInput = {
    id?: string
    updatedAt?: Date | string
    workingDays?: SystemSettingsCreateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart: string
    workingHoursEnd: string
    timezone: string
    updatedBy: UserCreateNestedOneWithoutUpdatedSettingsInput
  }

  export type SystemSettingsUncheckedCreateInput = {
    id?: string
    updatedAt?: Date | string
    workingDays?: SystemSettingsCreateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart: string
    workingHoursEnd: string
    timezone: string
    updatedById: string
  }

  export type SystemSettingsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: SystemSettingsUpdateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    updatedBy?: UserUpdateOneRequiredWithoutUpdatedSettingsNestedInput
  }

  export type SystemSettingsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: SystemSettingsUpdateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
  }

  export type SystemSettingsCreateManyInput = {
    id?: string
    updatedAt?: Date | string
    workingDays?: SystemSettingsCreateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart: string
    workingHoursEnd: string
    timezone: string
    updatedById: string
  }

  export type SystemSettingsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: SystemSettingsUpdateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
  }

  export type SystemSettingsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: SystemSettingsUpdateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
  }

  export type HolidayCreateInput = {
    id?: string
    name: string
    date: Date | string
    isRecurring?: boolean
  }

  export type HolidayUncheckedCreateInput = {
    id?: string
    name: string
    date: Date | string
    isRecurring?: boolean
  }

  export type HolidayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HolidayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HolidayCreateManyInput = {
    id?: string
    name: string
    date: Date | string
    isRecurring?: boolean
  }

  export type HolidayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
  }

  export type HolidayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    isRecurring?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FlowListRelationFilter = {
    every?: FlowWhereInput
    some?: FlowWhereInput
    none?: FlowWhereInput
  }

  export type FlowAssignmentListRelationFilter = {
    every?: FlowAssignmentWhereInput
    some?: FlowAssignmentWhereInput
    none?: FlowAssignmentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type UserAchievementListRelationFilter = {
    every?: UserAchievementWhereInput
    some?: UserAchievementWhereInput
    none?: UserAchievementWhereInput
  }

  export type SystemSettingsListRelationFilter = {
    every?: SystemSettingsWhereInput
    some?: SystemSettingsWhereInput
    none?: SystemSettingsWhereInput
  }

  export type UserProgressNullableScalarRelationFilter = {
    is?: UserProgressWhereInput | null
    isNot?: UserProgressWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FlowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserAchievementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SystemSettingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    telegramId?: SortOrder
    telegramUsername?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    roles?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    telegramId?: SortOrder
    telegramUsername?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    telegramId?: SortOrder
    telegramUsername?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FlowStepListRelationFilter = {
    every?: FlowStepWhereInput
    some?: FlowStepWhereInput
    none?: FlowStepWhereInput
  }

  export type FlowSnapshotListRelationFilter = {
    every?: FlowSnapshotWhereInput
    some?: FlowSnapshotWhereInput
    none?: FlowSnapshotWhereInput
  }

  export type FlowStepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    defaultDeadlineDays?: SortOrder
    stepsCount?: SortOrder
    creatorId?: SortOrder
  }

  export type FlowAvgOrderByAggregateInput = {
    defaultDeadlineDays?: SortOrder
    stepsCount?: SortOrder
  }

  export type FlowMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    defaultDeadlineDays?: SortOrder
    stepsCount?: SortOrder
    creatorId?: SortOrder
  }

  export type FlowMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    version?: SortOrder
    title?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    defaultDeadlineDays?: SortOrder
    stepsCount?: SortOrder
    creatorId?: SortOrder
  }

  export type FlowSumOrderByAggregateInput = {
    defaultDeadlineDays?: SortOrder
    stepsCount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type JsonNullableListFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableListFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableListFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel> | null
    has?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    hasEvery?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    hasSome?: InputJsonValue[] | ListJsonFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type FlowScalarRelationFilter = {
    is?: FlowWhereInput
    isNot?: FlowWhereInput
  }

  export type FlowComponentListRelationFilter = {
    every?: FlowComponentWhereInput
    some?: FlowComponentWhereInput
    none?: FlowComponentWhereInput
  }

  export type FlowComponentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowStepFlowIdOrderCompoundUniqueInput = {
    flowId: string
    order: number
  }

  export type FlowStepCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    templateComponents?: SortOrder
    componentsCount?: SortOrder
    flowId?: SortOrder
  }

  export type FlowStepAvgOrderByAggregateInput = {
    order?: SortOrder
    componentsCount?: SortOrder
  }

  export type FlowStepMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    componentsCount?: SortOrder
    flowId?: SortOrder
  }

  export type FlowStepMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    componentsCount?: SortOrder
    flowId?: SortOrder
  }

  export type FlowStepSumOrderByAggregateInput = {
    order?: SortOrder
    componentsCount?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FlowStepScalarRelationFilter = {
    is?: FlowStepWhereInput
    isNot?: FlowStepWhereInput
  }

  export type FlowComponentStepIdOrderCompoundUniqueInput = {
    stepId: string
    order: number
  }

  export type FlowComponentCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
  }

  export type FlowComponentAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FlowComponentMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    stepId?: SortOrder
  }

  export type FlowComponentMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    stepId?: SortOrder
  }

  export type FlowComponentSumOrderByAggregateInput = {
    order?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type FlowAssignmentNullableScalarRelationFilter = {
    is?: FlowAssignmentWhereInput | null
    isNot?: FlowAssignmentWhereInput | null
  }

  export type FlowStepSnapshotListRelationFilter = {
    every?: FlowStepSnapshotWhereInput
    some?: FlowStepSnapshotWhereInput
    none?: FlowStepSnapshotWhereInput
  }

  export type FlowStepSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotVersion?: SortOrder
    originalFlowVersion?: SortOrder
    originalFlowId?: SortOrder
    assignmentId?: SortOrder
  }

  export type FlowSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotVersion?: SortOrder
    originalFlowVersion?: SortOrder
    originalFlowId?: SortOrder
    assignmentId?: SortOrder
  }

  export type FlowSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotVersion?: SortOrder
    originalFlowVersion?: SortOrder
    originalFlowId?: SortOrder
    assignmentId?: SortOrder
  }

  export type FlowSnapshotScalarRelationFilter = {
    is?: FlowSnapshotWhereInput
    isNot?: FlowSnapshotWhereInput
  }

  export type ComponentSnapshotListRelationFilter = {
    every?: ComponentSnapshotWhereInput
    some?: ComponentSnapshotWhereInput
    none?: ComponentSnapshotWhereInput
  }

  export type StepProgressListRelationFilter = {
    every?: StepProgressWhereInput
    some?: StepProgressWhereInput
    none?: StepProgressWhereInput
  }

  export type ComponentSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StepProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowStepSnapshotSnapshotIdOrderCompoundUniqueInput = {
    snapshotId: string
    order: number
  }

  export type FlowStepSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotId?: SortOrder
  }

  export type FlowStepSnapshotAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FlowStepSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotId?: SortOrder
  }

  export type FlowStepSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    title?: SortOrder
    description?: SortOrder
    snapshotId?: SortOrder
  }

  export type FlowStepSnapshotSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FlowStepSnapshotScalarRelationFilter = {
    is?: FlowStepSnapshotWhereInput
    isNot?: FlowStepSnapshotWhereInput
  }

  export type ComponentProgressListRelationFilter = {
    every?: ComponentProgressWhereInput
    some?: ComponentProgressWhereInput
    none?: ComponentProgressWhereInput
  }

  export type ComponentProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComponentSnapshotStepIdOrderCompoundUniqueInput = {
    stepId: string
    order: number
  }

  export type ComponentSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    data?: SortOrder
    stepId?: SortOrder
  }

  export type ComponentSnapshotAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ComponentSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    stepId?: SortOrder
  }

  export type ComponentSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
    isRequired?: SortOrder
    type?: SortOrder
    typeVersion?: SortOrder
    stepId?: SortOrder
  }

  export type ComponentSnapshotSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumAssignmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusFilter<$PrismaModel> | $Enums.AssignmentStatus
  }

  export type FlowSnapshotNullableScalarRelationFilter = {
    is?: FlowSnapshotWhereInput | null
    isNot?: FlowSnapshotWhereInput | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FlowProgressNullableScalarRelationFilter = {
    is?: FlowProgressWhereInput | null
    isNot?: FlowProgressWhereInput | null
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    isOverdue?: SortOrder
    pauseReason?: SortOrder
    pausedAt?: SortOrder
    timeSpent?: SortOrder
    lastActivity?: SortOrder
    userId?: SortOrder
    pausedById?: SortOrder
  }

  export type FlowAssignmentAvgOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type FlowAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    isOverdue?: SortOrder
    pauseReason?: SortOrder
    pausedAt?: SortOrder
    timeSpent?: SortOrder
    lastActivity?: SortOrder
    userId?: SortOrder
    pausedById?: SortOrder
  }

  export type FlowAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    deadline?: SortOrder
    status?: SortOrder
    isOverdue?: SortOrder
    pauseReason?: SortOrder
    pausedAt?: SortOrder
    timeSpent?: SortOrder
    lastActivity?: SortOrder
    userId?: SortOrder
    pausedById?: SortOrder
  }

  export type FlowAssignmentSumOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type EnumAssignmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssignmentStatusFilter<$PrismaModel>
  }

  export type UserProgressCountOrderByAggregateInput = {
    id?: SortOrder
    totalTimeSpent?: SortOrder
    streakDays?: SortOrder
    userId?: SortOrder
  }

  export type UserProgressAvgOrderByAggregateInput = {
    totalTimeSpent?: SortOrder
    streakDays?: SortOrder
  }

  export type UserProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    totalTimeSpent?: SortOrder
    streakDays?: SortOrder
    userId?: SortOrder
  }

  export type UserProgressMinOrderByAggregateInput = {
    id?: SortOrder
    totalTimeSpent?: SortOrder
    streakDays?: SortOrder
    userId?: SortOrder
  }

  export type UserProgressSumOrderByAggregateInput = {
    totalTimeSpent?: SortOrder
    streakDays?: SortOrder
  }

  export type EnumFlowStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FlowStatus | EnumFlowStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFlowStatusFilter<$PrismaModel> | $Enums.FlowStatus
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FlowAssignmentScalarRelationFilter = {
    is?: FlowAssignmentWhereInput
    isNot?: FlowAssignmentWhereInput
  }

  export type FlowProgressCountOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    lastActivity?: SortOrder
  }

  export type FlowProgressAvgOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type FlowProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    lastActivity?: SortOrder
  }

  export type FlowProgressMinOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    lastActivity?: SortOrder
  }

  export type FlowProgressSumOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type EnumFlowStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FlowStatus | EnumFlowStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFlowStatusWithAggregatesFilter<$PrismaModel> | $Enums.FlowStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFlowStatusFilter<$PrismaModel>
    _max?: NestedEnumFlowStatusFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumStepStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusFilter<$PrismaModel> | $Enums.StepStatus
  }

  export type FlowProgressScalarRelationFilter = {
    is?: FlowProgressWhereInput
    isNot?: FlowProgressWhereInput
  }

  export type StepProgressFlowProgressIdStepSnapshotIdCompoundUniqueInput = {
    flowProgressId: string
    stepSnapshotId: string
  }

  export type StepProgressCountOrderByAggregateInput = {
    id?: SortOrder
    stepSnapshotId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    timeSpent?: SortOrder
    flowProgressId?: SortOrder
  }

  export type StepProgressAvgOrderByAggregateInput = {
    percentage?: SortOrder
    timeSpent?: SortOrder
  }

  export type StepProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    stepSnapshotId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    timeSpent?: SortOrder
    flowProgressId?: SortOrder
  }

  export type StepProgressMinOrderByAggregateInput = {
    id?: SortOrder
    stepSnapshotId?: SortOrder
    status?: SortOrder
    percentage?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    timeSpent?: SortOrder
    flowProgressId?: SortOrder
  }

  export type StepProgressSumOrderByAggregateInput = {
    percentage?: SortOrder
    timeSpent?: SortOrder
  }

  export type EnumStepStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusWithAggregatesFilter<$PrismaModel> | $Enums.StepStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStepStatusFilter<$PrismaModel>
    _max?: NestedEnumStepStatusFilter<$PrismaModel>
  }

  export type EnumComponentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusFilter<$PrismaModel> | $Enums.ComponentStatus
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ComponentSnapshotScalarRelationFilter = {
    is?: ComponentSnapshotWhereInput
    isNot?: ComponentSnapshotWhereInput
  }

  export type StepProgressScalarRelationFilter = {
    is?: StepProgressWhereInput
    isNot?: StepProgressWhereInput
  }

  export type ComponentProgressStepProgressIdComponentSnapshotIdCompoundUniqueInput = {
    stepProgressId: string
    componentSnapshotId: string
  }

  export type ComponentProgressCountOrderByAggregateInput = {
    id?: SortOrder
    componentSnapshotId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    timeSpent?: SortOrder
    progressData?: SortOrder
    stepProgressId?: SortOrder
  }

  export type ComponentProgressAvgOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type ComponentProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    componentSnapshotId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    timeSpent?: SortOrder
    stepProgressId?: SortOrder
  }

  export type ComponentProgressMinOrderByAggregateInput = {
    id?: SortOrder
    componentSnapshotId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    timeSpent?: SortOrder
    stepProgressId?: SortOrder
  }

  export type ComponentProgressSumOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type EnumComponentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComponentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComponentStatusFilter<$PrismaModel>
    _max?: NestedEnumComponentStatusFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type EnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    readAt?: SortOrder
    scheduledFor?: SortOrder
    expiresAt?: SortOrder
    context?: SortOrder
    actions?: SortOrder
    recipientId?: SortOrder
    senderId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    readAt?: SortOrder
    scheduledFor?: SortOrder
    expiresAt?: SortOrder
    recipientId?: SortOrder
    senderId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    readAt?: SortOrder
    scheduledFor?: SortOrder
    expiresAt?: SortOrder
    recipientId?: SortOrder
    senderId?: SortOrder
  }

  export type EnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type EnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type EnumAchievementRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityFilter<$PrismaModel> | $Enums.AchievementRarity
  }

  export type AchievementCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    key?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    rarity?: SortOrder
    criteria?: SortOrder
  }

  export type AchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    key?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    rarity?: SortOrder
  }

  export type AchievementMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    key?: SortOrder
    title?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    rarity?: SortOrder
  }

  export type EnumAchievementRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityWithAggregatesFilter<$PrismaModel> | $Enums.AchievementRarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementRarityFilter<$PrismaModel>
    _max?: NestedEnumAchievementRarityFilter<$PrismaModel>
  }

  export type AchievementScalarRelationFilter = {
    is?: AchievementWhereInput
    isNot?: AchievementWhereInput
  }

  export type UserAchievementUserIdAchievementIdCompoundUniqueInput = {
    userId: string
    achievementId: string
  }

  export type UserAchievementCountOrderByAggregateInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    context?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type UserAchievementMaxOrderByAggregateInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type UserAchievementMinOrderByAggregateInput = {
    id?: SortOrder
    earnedAt?: SortOrder
    userId?: SortOrder
    achievementId?: SortOrder
  }

  export type EnumDayOfWeekNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel> | null
    has?: $Enums.DayOfWeek | EnumDayOfWeekFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    hasSome?: $Enums.DayOfWeek[] | ListEnumDayOfWeekFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type SystemSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    workingDays?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timezone?: SortOrder
    updatedById?: SortOrder
  }

  export type SystemSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timezone?: SortOrder
    updatedById?: SortOrder
  }

  export type SystemSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    updatedAt?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timezone?: SortOrder
    updatedById?: SortOrder
  }

  export type HolidayCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
  }

  export type HolidayMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
  }

  export type HolidayMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    isRecurring?: SortOrder
  }

  export type UserCreaterolesInput = {
    set: $Enums.Role[]
  }

  export type FlowCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FlowCreateWithoutCreatorInput, FlowUncheckedCreateWithoutCreatorInput> | FlowCreateWithoutCreatorInput[] | FlowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlowCreateOrConnectWithoutCreatorInput | FlowCreateOrConnectWithoutCreatorInput[]
    createMany?: FlowCreateManyCreatorInputEnvelope
    connect?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
  }

  export type FlowAssignmentCreateNestedManyWithoutUserInput = {
    create?: XOR<FlowAssignmentCreateWithoutUserInput, FlowAssignmentUncheckedCreateWithoutUserInput> | FlowAssignmentCreateWithoutUserInput[] | FlowAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutUserInput | FlowAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: FlowAssignmentCreateManyUserInputEnvelope
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
  }

  export type FlowAssignmentCreateNestedManyWithoutBuddiesInput = {
    create?: XOR<FlowAssignmentCreateWithoutBuddiesInput, FlowAssignmentUncheckedCreateWithoutBuddiesInput> | FlowAssignmentCreateWithoutBuddiesInput[] | FlowAssignmentUncheckedCreateWithoutBuddiesInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutBuddiesInput | FlowAssignmentCreateOrConnectWithoutBuddiesInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutRecipientInput = {
    create?: XOR<NotificationCreateWithoutRecipientInput, NotificationUncheckedCreateWithoutRecipientInput> | NotificationCreateWithoutRecipientInput[] | NotificationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutRecipientInput | NotificationCreateOrConnectWithoutRecipientInput[]
    createMany?: NotificationCreateManyRecipientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserAchievementCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutSenderInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FlowAssignmentCreateNestedManyWithoutPausedByInput = {
    create?: XOR<FlowAssignmentCreateWithoutPausedByInput, FlowAssignmentUncheckedCreateWithoutPausedByInput> | FlowAssignmentCreateWithoutPausedByInput[] | FlowAssignmentUncheckedCreateWithoutPausedByInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutPausedByInput | FlowAssignmentCreateOrConnectWithoutPausedByInput[]
    createMany?: FlowAssignmentCreateManyPausedByInputEnvelope
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
  }

  export type SystemSettingsCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
  }

  export type UserProgressCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProgressCreateWithoutUserInput, UserProgressUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProgressCreateOrConnectWithoutUserInput
    connect?: UserProgressWhereUniqueInput
  }

  export type FlowUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FlowCreateWithoutCreatorInput, FlowUncheckedCreateWithoutCreatorInput> | FlowCreateWithoutCreatorInput[] | FlowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlowCreateOrConnectWithoutCreatorInput | FlowCreateOrConnectWithoutCreatorInput[]
    createMany?: FlowCreateManyCreatorInputEnvelope
    connect?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
  }

  export type FlowAssignmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FlowAssignmentCreateWithoutUserInput, FlowAssignmentUncheckedCreateWithoutUserInput> | FlowAssignmentCreateWithoutUserInput[] | FlowAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutUserInput | FlowAssignmentCreateOrConnectWithoutUserInput[]
    createMany?: FlowAssignmentCreateManyUserInputEnvelope
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
  }

  export type FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput = {
    create?: XOR<FlowAssignmentCreateWithoutBuddiesInput, FlowAssignmentUncheckedCreateWithoutBuddiesInput> | FlowAssignmentCreateWithoutBuddiesInput[] | FlowAssignmentUncheckedCreateWithoutBuddiesInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutBuddiesInput | FlowAssignmentCreateOrConnectWithoutBuddiesInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutRecipientInput = {
    create?: XOR<NotificationCreateWithoutRecipientInput, NotificationUncheckedCreateWithoutRecipientInput> | NotificationCreateWithoutRecipientInput[] | NotificationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutRecipientInput | NotificationCreateOrConnectWithoutRecipientInput[]
    createMany?: NotificationCreateManyRecipientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput = {
    create?: XOR<FlowAssignmentCreateWithoutPausedByInput, FlowAssignmentUncheckedCreateWithoutPausedByInput> | FlowAssignmentCreateWithoutPausedByInput[] | FlowAssignmentUncheckedCreateWithoutPausedByInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutPausedByInput | FlowAssignmentCreateOrConnectWithoutPausedByInput[]
    createMany?: FlowAssignmentCreateManyPausedByInputEnvelope
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
  }

  export type SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
  }

  export type UserProgressUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProgressCreateWithoutUserInput, UserProgressUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProgressCreateOrConnectWithoutUserInput
    connect?: UserProgressWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdaterolesInput = {
    set?: $Enums.Role[]
    push?: $Enums.Role | $Enums.Role[]
  }

  export type FlowUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FlowCreateWithoutCreatorInput, FlowUncheckedCreateWithoutCreatorInput> | FlowCreateWithoutCreatorInput[] | FlowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlowCreateOrConnectWithoutCreatorInput | FlowCreateOrConnectWithoutCreatorInput[]
    upsert?: FlowUpsertWithWhereUniqueWithoutCreatorInput | FlowUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FlowCreateManyCreatorInputEnvelope
    set?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    disconnect?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    delete?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    connect?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    update?: FlowUpdateWithWhereUniqueWithoutCreatorInput | FlowUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FlowUpdateManyWithWhereWithoutCreatorInput | FlowUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FlowScalarWhereInput | FlowScalarWhereInput[]
  }

  export type FlowAssignmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutUserInput, FlowAssignmentUncheckedCreateWithoutUserInput> | FlowAssignmentCreateWithoutUserInput[] | FlowAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutUserInput | FlowAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: FlowAssignmentUpsertWithWhereUniqueWithoutUserInput | FlowAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FlowAssignmentCreateManyUserInputEnvelope
    set?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    disconnect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    delete?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    update?: FlowAssignmentUpdateWithWhereUniqueWithoutUserInput | FlowAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FlowAssignmentUpdateManyWithWhereWithoutUserInput | FlowAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
  }

  export type FlowAssignmentUpdateManyWithoutBuddiesNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutBuddiesInput, FlowAssignmentUncheckedCreateWithoutBuddiesInput> | FlowAssignmentCreateWithoutBuddiesInput[] | FlowAssignmentUncheckedCreateWithoutBuddiesInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutBuddiesInput | FlowAssignmentCreateOrConnectWithoutBuddiesInput[]
    upsert?: FlowAssignmentUpsertWithWhereUniqueWithoutBuddiesInput | FlowAssignmentUpsertWithWhereUniqueWithoutBuddiesInput[]
    set?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    disconnect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    delete?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    update?: FlowAssignmentUpdateWithWhereUniqueWithoutBuddiesInput | FlowAssignmentUpdateWithWhereUniqueWithoutBuddiesInput[]
    updateMany?: FlowAssignmentUpdateManyWithWhereWithoutBuddiesInput | FlowAssignmentUpdateManyWithWhereWithoutBuddiesInput[]
    deleteMany?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<NotificationCreateWithoutRecipientInput, NotificationUncheckedCreateWithoutRecipientInput> | NotificationCreateWithoutRecipientInput[] | NotificationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutRecipientInput | NotificationCreateOrConnectWithoutRecipientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutRecipientInput | NotificationUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: NotificationCreateManyRecipientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutRecipientInput | NotificationUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutRecipientInput | NotificationUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserAchievementUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutSenderNestedInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutSenderInput | NotificationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutSenderInput | NotificationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutSenderInput | NotificationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FlowAssignmentUpdateManyWithoutPausedByNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutPausedByInput, FlowAssignmentUncheckedCreateWithoutPausedByInput> | FlowAssignmentCreateWithoutPausedByInput[] | FlowAssignmentUncheckedCreateWithoutPausedByInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutPausedByInput | FlowAssignmentCreateOrConnectWithoutPausedByInput[]
    upsert?: FlowAssignmentUpsertWithWhereUniqueWithoutPausedByInput | FlowAssignmentUpsertWithWhereUniqueWithoutPausedByInput[]
    createMany?: FlowAssignmentCreateManyPausedByInputEnvelope
    set?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    disconnect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    delete?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    update?: FlowAssignmentUpdateWithWhereUniqueWithoutPausedByInput | FlowAssignmentUpdateWithWhereUniqueWithoutPausedByInput[]
    updateMany?: FlowAssignmentUpdateManyWithWhereWithoutPausedByInput | FlowAssignmentUpdateManyWithWhereWithoutPausedByInput[]
    deleteMany?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
  }

  export type SystemSettingsUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    set?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    disconnect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    delete?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    update?: SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput | SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
  }

  export type UserProgressUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProgressCreateWithoutUserInput, UserProgressUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProgressCreateOrConnectWithoutUserInput
    upsert?: UserProgressUpsertWithoutUserInput
    disconnect?: UserProgressWhereInput | boolean
    delete?: UserProgressWhereInput | boolean
    connect?: UserProgressWhereUniqueInput
    update?: XOR<XOR<UserProgressUpdateToOneWithWhereWithoutUserInput, UserProgressUpdateWithoutUserInput>, UserProgressUncheckedUpdateWithoutUserInput>
  }

  export type FlowUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FlowCreateWithoutCreatorInput, FlowUncheckedCreateWithoutCreatorInput> | FlowCreateWithoutCreatorInput[] | FlowUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FlowCreateOrConnectWithoutCreatorInput | FlowCreateOrConnectWithoutCreatorInput[]
    upsert?: FlowUpsertWithWhereUniqueWithoutCreatorInput | FlowUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FlowCreateManyCreatorInputEnvelope
    set?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    disconnect?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    delete?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    connect?: FlowWhereUniqueInput | FlowWhereUniqueInput[]
    update?: FlowUpdateWithWhereUniqueWithoutCreatorInput | FlowUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FlowUpdateManyWithWhereWithoutCreatorInput | FlowUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FlowScalarWhereInput | FlowScalarWhereInput[]
  }

  export type FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutUserInput, FlowAssignmentUncheckedCreateWithoutUserInput> | FlowAssignmentCreateWithoutUserInput[] | FlowAssignmentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutUserInput | FlowAssignmentCreateOrConnectWithoutUserInput[]
    upsert?: FlowAssignmentUpsertWithWhereUniqueWithoutUserInput | FlowAssignmentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FlowAssignmentCreateManyUserInputEnvelope
    set?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    disconnect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    delete?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    update?: FlowAssignmentUpdateWithWhereUniqueWithoutUserInput | FlowAssignmentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FlowAssignmentUpdateManyWithWhereWithoutUserInput | FlowAssignmentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
  }

  export type FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutBuddiesInput, FlowAssignmentUncheckedCreateWithoutBuddiesInput> | FlowAssignmentCreateWithoutBuddiesInput[] | FlowAssignmentUncheckedCreateWithoutBuddiesInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutBuddiesInput | FlowAssignmentCreateOrConnectWithoutBuddiesInput[]
    upsert?: FlowAssignmentUpsertWithWhereUniqueWithoutBuddiesInput | FlowAssignmentUpsertWithWhereUniqueWithoutBuddiesInput[]
    set?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    disconnect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    delete?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    update?: FlowAssignmentUpdateWithWhereUniqueWithoutBuddiesInput | FlowAssignmentUpdateWithWhereUniqueWithoutBuddiesInput[]
    updateMany?: FlowAssignmentUpdateManyWithWhereWithoutBuddiesInput | FlowAssignmentUpdateManyWithWhereWithoutBuddiesInput[]
    deleteMany?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<NotificationCreateWithoutRecipientInput, NotificationUncheckedCreateWithoutRecipientInput> | NotificationCreateWithoutRecipientInput[] | NotificationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutRecipientInput | NotificationCreateOrConnectWithoutRecipientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutRecipientInput | NotificationUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: NotificationCreateManyRecipientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutRecipientInput | NotificationUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutRecipientInput | NotificationUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput> | UserAchievementCreateWithoutUserInput[] | UserAchievementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutUserInput | UserAchievementCreateOrConnectWithoutUserInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutUserInput | UserAchievementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserAchievementCreateManyUserInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutUserInput | UserAchievementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutUserInput | UserAchievementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput> | NotificationCreateWithoutSenderInput[] | NotificationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutSenderInput | NotificationCreateOrConnectWithoutSenderInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutSenderInput | NotificationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: NotificationCreateManySenderInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutSenderInput | NotificationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutSenderInput | NotificationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutPausedByInput, FlowAssignmentUncheckedCreateWithoutPausedByInput> | FlowAssignmentCreateWithoutPausedByInput[] | FlowAssignmentUncheckedCreateWithoutPausedByInput[]
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutPausedByInput | FlowAssignmentCreateOrConnectWithoutPausedByInput[]
    upsert?: FlowAssignmentUpsertWithWhereUniqueWithoutPausedByInput | FlowAssignmentUpsertWithWhereUniqueWithoutPausedByInput[]
    createMany?: FlowAssignmentCreateManyPausedByInputEnvelope
    set?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    disconnect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    delete?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    connect?: FlowAssignmentWhereUniqueInput | FlowAssignmentWhereUniqueInput[]
    update?: FlowAssignmentUpdateWithWhereUniqueWithoutPausedByInput | FlowAssignmentUpdateWithWhereUniqueWithoutPausedByInput[]
    updateMany?: FlowAssignmentUpdateManyWithWhereWithoutPausedByInput | FlowAssignmentUpdateManyWithWhereWithoutPausedByInput[]
    deleteMany?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
  }

  export type SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    set?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    disconnect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    delete?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    update?: SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput | SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
  }

  export type UserProgressUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProgressCreateWithoutUserInput, UserProgressUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProgressCreateOrConnectWithoutUserInput
    upsert?: UserProgressUpsertWithoutUserInput
    disconnect?: UserProgressWhereInput | boolean
    delete?: UserProgressWhereInput | boolean
    connect?: UserProgressWhereUniqueInput
    update?: XOR<XOR<UserProgressUpdateToOneWithWhereWithoutUserInput, UserProgressUpdateWithoutUserInput>, UserProgressUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutCreatedFlowsInput = {
    create?: XOR<UserCreateWithoutCreatedFlowsInput, UserUncheckedCreateWithoutCreatedFlowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFlowsInput
    connect?: UserWhereUniqueInput
  }

  export type FlowStepCreateNestedManyWithoutFlowInput = {
    create?: XOR<FlowStepCreateWithoutFlowInput, FlowStepUncheckedCreateWithoutFlowInput> | FlowStepCreateWithoutFlowInput[] | FlowStepUncheckedCreateWithoutFlowInput[]
    connectOrCreate?: FlowStepCreateOrConnectWithoutFlowInput | FlowStepCreateOrConnectWithoutFlowInput[]
    createMany?: FlowStepCreateManyFlowInputEnvelope
    connect?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
  }

  export type FlowSnapshotCreateNestedManyWithoutOriginalFlowInput = {
    create?: XOR<FlowSnapshotCreateWithoutOriginalFlowInput, FlowSnapshotUncheckedCreateWithoutOriginalFlowInput> | FlowSnapshotCreateWithoutOriginalFlowInput[] | FlowSnapshotUncheckedCreateWithoutOriginalFlowInput[]
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutOriginalFlowInput | FlowSnapshotCreateOrConnectWithoutOriginalFlowInput[]
    createMany?: FlowSnapshotCreateManyOriginalFlowInputEnvelope
    connect?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
  }

  export type FlowStepUncheckedCreateNestedManyWithoutFlowInput = {
    create?: XOR<FlowStepCreateWithoutFlowInput, FlowStepUncheckedCreateWithoutFlowInput> | FlowStepCreateWithoutFlowInput[] | FlowStepUncheckedCreateWithoutFlowInput[]
    connectOrCreate?: FlowStepCreateOrConnectWithoutFlowInput | FlowStepCreateOrConnectWithoutFlowInput[]
    createMany?: FlowStepCreateManyFlowInputEnvelope
    connect?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
  }

  export type FlowSnapshotUncheckedCreateNestedManyWithoutOriginalFlowInput = {
    create?: XOR<FlowSnapshotCreateWithoutOriginalFlowInput, FlowSnapshotUncheckedCreateWithoutOriginalFlowInput> | FlowSnapshotCreateWithoutOriginalFlowInput[] | FlowSnapshotUncheckedCreateWithoutOriginalFlowInput[]
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutOriginalFlowInput | FlowSnapshotCreateOrConnectWithoutOriginalFlowInput[]
    createMany?: FlowSnapshotCreateManyOriginalFlowInputEnvelope
    connect?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCreatedFlowsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedFlowsInput, UserUncheckedCreateWithoutCreatedFlowsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedFlowsInput
    upsert?: UserUpsertWithoutCreatedFlowsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedFlowsInput, UserUpdateWithoutCreatedFlowsInput>, UserUncheckedUpdateWithoutCreatedFlowsInput>
  }

  export type FlowStepUpdateManyWithoutFlowNestedInput = {
    create?: XOR<FlowStepCreateWithoutFlowInput, FlowStepUncheckedCreateWithoutFlowInput> | FlowStepCreateWithoutFlowInput[] | FlowStepUncheckedCreateWithoutFlowInput[]
    connectOrCreate?: FlowStepCreateOrConnectWithoutFlowInput | FlowStepCreateOrConnectWithoutFlowInput[]
    upsert?: FlowStepUpsertWithWhereUniqueWithoutFlowInput | FlowStepUpsertWithWhereUniqueWithoutFlowInput[]
    createMany?: FlowStepCreateManyFlowInputEnvelope
    set?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    disconnect?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    delete?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    connect?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    update?: FlowStepUpdateWithWhereUniqueWithoutFlowInput | FlowStepUpdateWithWhereUniqueWithoutFlowInput[]
    updateMany?: FlowStepUpdateManyWithWhereWithoutFlowInput | FlowStepUpdateManyWithWhereWithoutFlowInput[]
    deleteMany?: FlowStepScalarWhereInput | FlowStepScalarWhereInput[]
  }

  export type FlowSnapshotUpdateManyWithoutOriginalFlowNestedInput = {
    create?: XOR<FlowSnapshotCreateWithoutOriginalFlowInput, FlowSnapshotUncheckedCreateWithoutOriginalFlowInput> | FlowSnapshotCreateWithoutOriginalFlowInput[] | FlowSnapshotUncheckedCreateWithoutOriginalFlowInput[]
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutOriginalFlowInput | FlowSnapshotCreateOrConnectWithoutOriginalFlowInput[]
    upsert?: FlowSnapshotUpsertWithWhereUniqueWithoutOriginalFlowInput | FlowSnapshotUpsertWithWhereUniqueWithoutOriginalFlowInput[]
    createMany?: FlowSnapshotCreateManyOriginalFlowInputEnvelope
    set?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    disconnect?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    delete?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    connect?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    update?: FlowSnapshotUpdateWithWhereUniqueWithoutOriginalFlowInput | FlowSnapshotUpdateWithWhereUniqueWithoutOriginalFlowInput[]
    updateMany?: FlowSnapshotUpdateManyWithWhereWithoutOriginalFlowInput | FlowSnapshotUpdateManyWithWhereWithoutOriginalFlowInput[]
    deleteMany?: FlowSnapshotScalarWhereInput | FlowSnapshotScalarWhereInput[]
  }

  export type FlowStepUncheckedUpdateManyWithoutFlowNestedInput = {
    create?: XOR<FlowStepCreateWithoutFlowInput, FlowStepUncheckedCreateWithoutFlowInput> | FlowStepCreateWithoutFlowInput[] | FlowStepUncheckedCreateWithoutFlowInput[]
    connectOrCreate?: FlowStepCreateOrConnectWithoutFlowInput | FlowStepCreateOrConnectWithoutFlowInput[]
    upsert?: FlowStepUpsertWithWhereUniqueWithoutFlowInput | FlowStepUpsertWithWhereUniqueWithoutFlowInput[]
    createMany?: FlowStepCreateManyFlowInputEnvelope
    set?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    disconnect?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    delete?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    connect?: FlowStepWhereUniqueInput | FlowStepWhereUniqueInput[]
    update?: FlowStepUpdateWithWhereUniqueWithoutFlowInput | FlowStepUpdateWithWhereUniqueWithoutFlowInput[]
    updateMany?: FlowStepUpdateManyWithWhereWithoutFlowInput | FlowStepUpdateManyWithWhereWithoutFlowInput[]
    deleteMany?: FlowStepScalarWhereInput | FlowStepScalarWhereInput[]
  }

  export type FlowSnapshotUncheckedUpdateManyWithoutOriginalFlowNestedInput = {
    create?: XOR<FlowSnapshotCreateWithoutOriginalFlowInput, FlowSnapshotUncheckedCreateWithoutOriginalFlowInput> | FlowSnapshotCreateWithoutOriginalFlowInput[] | FlowSnapshotUncheckedCreateWithoutOriginalFlowInput[]
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutOriginalFlowInput | FlowSnapshotCreateOrConnectWithoutOriginalFlowInput[]
    upsert?: FlowSnapshotUpsertWithWhereUniqueWithoutOriginalFlowInput | FlowSnapshotUpsertWithWhereUniqueWithoutOriginalFlowInput[]
    createMany?: FlowSnapshotCreateManyOriginalFlowInputEnvelope
    set?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    disconnect?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    delete?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    connect?: FlowSnapshotWhereUniqueInput | FlowSnapshotWhereUniqueInput[]
    update?: FlowSnapshotUpdateWithWhereUniqueWithoutOriginalFlowInput | FlowSnapshotUpdateWithWhereUniqueWithoutOriginalFlowInput[]
    updateMany?: FlowSnapshotUpdateManyWithWhereWithoutOriginalFlowInput | FlowSnapshotUpdateManyWithWhereWithoutOriginalFlowInput[]
    deleteMany?: FlowSnapshotScalarWhereInput | FlowSnapshotScalarWhereInput[]
  }

  export type FlowStepCreatetemplateComponentsInput = {
    set: InputJsonValue[]
  }

  export type FlowCreateNestedOneWithoutStepsInput = {
    create?: XOR<FlowCreateWithoutStepsInput, FlowUncheckedCreateWithoutStepsInput>
    connectOrCreate?: FlowCreateOrConnectWithoutStepsInput
    connect?: FlowWhereUniqueInput
  }

  export type FlowComponentCreateNestedManyWithoutStepInput = {
    create?: XOR<FlowComponentCreateWithoutStepInput, FlowComponentUncheckedCreateWithoutStepInput> | FlowComponentCreateWithoutStepInput[] | FlowComponentUncheckedCreateWithoutStepInput[]
    connectOrCreate?: FlowComponentCreateOrConnectWithoutStepInput | FlowComponentCreateOrConnectWithoutStepInput[]
    createMany?: FlowComponentCreateManyStepInputEnvelope
    connect?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
  }

  export type FlowComponentUncheckedCreateNestedManyWithoutStepInput = {
    create?: XOR<FlowComponentCreateWithoutStepInput, FlowComponentUncheckedCreateWithoutStepInput> | FlowComponentCreateWithoutStepInput[] | FlowComponentUncheckedCreateWithoutStepInput[]
    connectOrCreate?: FlowComponentCreateOrConnectWithoutStepInput | FlowComponentCreateOrConnectWithoutStepInput[]
    createMany?: FlowComponentCreateManyStepInputEnvelope
    connect?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
  }

  export type FlowStepUpdatetemplateComponentsInput = {
    set?: InputJsonValue[]
    push?: InputJsonValue | InputJsonValue[]
  }

  export type FlowUpdateOneRequiredWithoutStepsNestedInput = {
    create?: XOR<FlowCreateWithoutStepsInput, FlowUncheckedCreateWithoutStepsInput>
    connectOrCreate?: FlowCreateOrConnectWithoutStepsInput
    upsert?: FlowUpsertWithoutStepsInput
    connect?: FlowWhereUniqueInput
    update?: XOR<XOR<FlowUpdateToOneWithWhereWithoutStepsInput, FlowUpdateWithoutStepsInput>, FlowUncheckedUpdateWithoutStepsInput>
  }

  export type FlowComponentUpdateManyWithoutStepNestedInput = {
    create?: XOR<FlowComponentCreateWithoutStepInput, FlowComponentUncheckedCreateWithoutStepInput> | FlowComponentCreateWithoutStepInput[] | FlowComponentUncheckedCreateWithoutStepInput[]
    connectOrCreate?: FlowComponentCreateOrConnectWithoutStepInput | FlowComponentCreateOrConnectWithoutStepInput[]
    upsert?: FlowComponentUpsertWithWhereUniqueWithoutStepInput | FlowComponentUpsertWithWhereUniqueWithoutStepInput[]
    createMany?: FlowComponentCreateManyStepInputEnvelope
    set?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    disconnect?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    delete?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    connect?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    update?: FlowComponentUpdateWithWhereUniqueWithoutStepInput | FlowComponentUpdateWithWhereUniqueWithoutStepInput[]
    updateMany?: FlowComponentUpdateManyWithWhereWithoutStepInput | FlowComponentUpdateManyWithWhereWithoutStepInput[]
    deleteMany?: FlowComponentScalarWhereInput | FlowComponentScalarWhereInput[]
  }

  export type FlowComponentUncheckedUpdateManyWithoutStepNestedInput = {
    create?: XOR<FlowComponentCreateWithoutStepInput, FlowComponentUncheckedCreateWithoutStepInput> | FlowComponentCreateWithoutStepInput[] | FlowComponentUncheckedCreateWithoutStepInput[]
    connectOrCreate?: FlowComponentCreateOrConnectWithoutStepInput | FlowComponentCreateOrConnectWithoutStepInput[]
    upsert?: FlowComponentUpsertWithWhereUniqueWithoutStepInput | FlowComponentUpsertWithWhereUniqueWithoutStepInput[]
    createMany?: FlowComponentCreateManyStepInputEnvelope
    set?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    disconnect?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    delete?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    connect?: FlowComponentWhereUniqueInput | FlowComponentWhereUniqueInput[]
    update?: FlowComponentUpdateWithWhereUniqueWithoutStepInput | FlowComponentUpdateWithWhereUniqueWithoutStepInput[]
    updateMany?: FlowComponentUpdateManyWithWhereWithoutStepInput | FlowComponentUpdateManyWithWhereWithoutStepInput[]
    deleteMany?: FlowComponentScalarWhereInput | FlowComponentScalarWhereInput[]
  }

  export type FlowStepCreateNestedOneWithoutComponentsInput = {
    create?: XOR<FlowStepCreateWithoutComponentsInput, FlowStepUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: FlowStepCreateOrConnectWithoutComponentsInput
    connect?: FlowStepWhereUniqueInput
  }

  export type FlowStepUpdateOneRequiredWithoutComponentsNestedInput = {
    create?: XOR<FlowStepCreateWithoutComponentsInput, FlowStepUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: FlowStepCreateOrConnectWithoutComponentsInput
    upsert?: FlowStepUpsertWithoutComponentsInput
    connect?: FlowStepWhereUniqueInput
    update?: XOR<XOR<FlowStepUpdateToOneWithWhereWithoutComponentsInput, FlowStepUpdateWithoutComponentsInput>, FlowStepUncheckedUpdateWithoutComponentsInput>
  }

  export type FlowCreateNestedOneWithoutSnapshotsInput = {
    create?: XOR<FlowCreateWithoutSnapshotsInput, FlowUncheckedCreateWithoutSnapshotsInput>
    connectOrCreate?: FlowCreateOrConnectWithoutSnapshotsInput
    connect?: FlowWhereUniqueInput
  }

  export type FlowAssignmentCreateNestedOneWithoutSnapshotInput = {
    create?: XOR<FlowAssignmentCreateWithoutSnapshotInput, FlowAssignmentUncheckedCreateWithoutSnapshotInput>
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutSnapshotInput
    connect?: FlowAssignmentWhereUniqueInput
  }

  export type FlowStepSnapshotCreateNestedManyWithoutSnapshotInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutSnapshotInput, FlowStepSnapshotUncheckedCreateWithoutSnapshotInput> | FlowStepSnapshotCreateWithoutSnapshotInput[] | FlowStepSnapshotUncheckedCreateWithoutSnapshotInput[]
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutSnapshotInput | FlowStepSnapshotCreateOrConnectWithoutSnapshotInput[]
    createMany?: FlowStepSnapshotCreateManySnapshotInputEnvelope
    connect?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
  }

  export type FlowStepSnapshotUncheckedCreateNestedManyWithoutSnapshotInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutSnapshotInput, FlowStepSnapshotUncheckedCreateWithoutSnapshotInput> | FlowStepSnapshotCreateWithoutSnapshotInput[] | FlowStepSnapshotUncheckedCreateWithoutSnapshotInput[]
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutSnapshotInput | FlowStepSnapshotCreateOrConnectWithoutSnapshotInput[]
    createMany?: FlowStepSnapshotCreateManySnapshotInputEnvelope
    connect?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
  }

  export type FlowUpdateOneRequiredWithoutSnapshotsNestedInput = {
    create?: XOR<FlowCreateWithoutSnapshotsInput, FlowUncheckedCreateWithoutSnapshotsInput>
    connectOrCreate?: FlowCreateOrConnectWithoutSnapshotsInput
    upsert?: FlowUpsertWithoutSnapshotsInput
    connect?: FlowWhereUniqueInput
    update?: XOR<XOR<FlowUpdateToOneWithWhereWithoutSnapshotsInput, FlowUpdateWithoutSnapshotsInput>, FlowUncheckedUpdateWithoutSnapshotsInput>
  }

  export type FlowAssignmentUpdateOneWithoutSnapshotNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutSnapshotInput, FlowAssignmentUncheckedCreateWithoutSnapshotInput>
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutSnapshotInput
    upsert?: FlowAssignmentUpsertWithoutSnapshotInput
    disconnect?: FlowAssignmentWhereInput | boolean
    delete?: FlowAssignmentWhereInput | boolean
    connect?: FlowAssignmentWhereUniqueInput
    update?: XOR<XOR<FlowAssignmentUpdateToOneWithWhereWithoutSnapshotInput, FlowAssignmentUpdateWithoutSnapshotInput>, FlowAssignmentUncheckedUpdateWithoutSnapshotInput>
  }

  export type FlowStepSnapshotUpdateManyWithoutSnapshotNestedInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutSnapshotInput, FlowStepSnapshotUncheckedCreateWithoutSnapshotInput> | FlowStepSnapshotCreateWithoutSnapshotInput[] | FlowStepSnapshotUncheckedCreateWithoutSnapshotInput[]
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutSnapshotInput | FlowStepSnapshotCreateOrConnectWithoutSnapshotInput[]
    upsert?: FlowStepSnapshotUpsertWithWhereUniqueWithoutSnapshotInput | FlowStepSnapshotUpsertWithWhereUniqueWithoutSnapshotInput[]
    createMany?: FlowStepSnapshotCreateManySnapshotInputEnvelope
    set?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    disconnect?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    delete?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    connect?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    update?: FlowStepSnapshotUpdateWithWhereUniqueWithoutSnapshotInput | FlowStepSnapshotUpdateWithWhereUniqueWithoutSnapshotInput[]
    updateMany?: FlowStepSnapshotUpdateManyWithWhereWithoutSnapshotInput | FlowStepSnapshotUpdateManyWithWhereWithoutSnapshotInput[]
    deleteMany?: FlowStepSnapshotScalarWhereInput | FlowStepSnapshotScalarWhereInput[]
  }

  export type FlowStepSnapshotUncheckedUpdateManyWithoutSnapshotNestedInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutSnapshotInput, FlowStepSnapshotUncheckedCreateWithoutSnapshotInput> | FlowStepSnapshotCreateWithoutSnapshotInput[] | FlowStepSnapshotUncheckedCreateWithoutSnapshotInput[]
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutSnapshotInput | FlowStepSnapshotCreateOrConnectWithoutSnapshotInput[]
    upsert?: FlowStepSnapshotUpsertWithWhereUniqueWithoutSnapshotInput | FlowStepSnapshotUpsertWithWhereUniqueWithoutSnapshotInput[]
    createMany?: FlowStepSnapshotCreateManySnapshotInputEnvelope
    set?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    disconnect?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    delete?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    connect?: FlowStepSnapshotWhereUniqueInput | FlowStepSnapshotWhereUniqueInput[]
    update?: FlowStepSnapshotUpdateWithWhereUniqueWithoutSnapshotInput | FlowStepSnapshotUpdateWithWhereUniqueWithoutSnapshotInput[]
    updateMany?: FlowStepSnapshotUpdateManyWithWhereWithoutSnapshotInput | FlowStepSnapshotUpdateManyWithWhereWithoutSnapshotInput[]
    deleteMany?: FlowStepSnapshotScalarWhereInput | FlowStepSnapshotScalarWhereInput[]
  }

  export type FlowSnapshotCreateNestedOneWithoutStepsInput = {
    create?: XOR<FlowSnapshotCreateWithoutStepsInput, FlowSnapshotUncheckedCreateWithoutStepsInput>
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutStepsInput
    connect?: FlowSnapshotWhereUniqueInput
  }

  export type ComponentSnapshotCreateNestedManyWithoutStepInput = {
    create?: XOR<ComponentSnapshotCreateWithoutStepInput, ComponentSnapshotUncheckedCreateWithoutStepInput> | ComponentSnapshotCreateWithoutStepInput[] | ComponentSnapshotUncheckedCreateWithoutStepInput[]
    connectOrCreate?: ComponentSnapshotCreateOrConnectWithoutStepInput | ComponentSnapshotCreateOrConnectWithoutStepInput[]
    createMany?: ComponentSnapshotCreateManyStepInputEnvelope
    connect?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
  }

  export type StepProgressCreateNestedManyWithoutStepSnapshotInput = {
    create?: XOR<StepProgressCreateWithoutStepSnapshotInput, StepProgressUncheckedCreateWithoutStepSnapshotInput> | StepProgressCreateWithoutStepSnapshotInput[] | StepProgressUncheckedCreateWithoutStepSnapshotInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutStepSnapshotInput | StepProgressCreateOrConnectWithoutStepSnapshotInput[]
    createMany?: StepProgressCreateManyStepSnapshotInputEnvelope
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
  }

  export type ComponentSnapshotUncheckedCreateNestedManyWithoutStepInput = {
    create?: XOR<ComponentSnapshotCreateWithoutStepInput, ComponentSnapshotUncheckedCreateWithoutStepInput> | ComponentSnapshotCreateWithoutStepInput[] | ComponentSnapshotUncheckedCreateWithoutStepInput[]
    connectOrCreate?: ComponentSnapshotCreateOrConnectWithoutStepInput | ComponentSnapshotCreateOrConnectWithoutStepInput[]
    createMany?: ComponentSnapshotCreateManyStepInputEnvelope
    connect?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
  }

  export type StepProgressUncheckedCreateNestedManyWithoutStepSnapshotInput = {
    create?: XOR<StepProgressCreateWithoutStepSnapshotInput, StepProgressUncheckedCreateWithoutStepSnapshotInput> | StepProgressCreateWithoutStepSnapshotInput[] | StepProgressUncheckedCreateWithoutStepSnapshotInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutStepSnapshotInput | StepProgressCreateOrConnectWithoutStepSnapshotInput[]
    createMany?: StepProgressCreateManyStepSnapshotInputEnvelope
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
  }

  export type FlowSnapshotUpdateOneRequiredWithoutStepsNestedInput = {
    create?: XOR<FlowSnapshotCreateWithoutStepsInput, FlowSnapshotUncheckedCreateWithoutStepsInput>
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutStepsInput
    upsert?: FlowSnapshotUpsertWithoutStepsInput
    connect?: FlowSnapshotWhereUniqueInput
    update?: XOR<XOR<FlowSnapshotUpdateToOneWithWhereWithoutStepsInput, FlowSnapshotUpdateWithoutStepsInput>, FlowSnapshotUncheckedUpdateWithoutStepsInput>
  }

  export type ComponentSnapshotUpdateManyWithoutStepNestedInput = {
    create?: XOR<ComponentSnapshotCreateWithoutStepInput, ComponentSnapshotUncheckedCreateWithoutStepInput> | ComponentSnapshotCreateWithoutStepInput[] | ComponentSnapshotUncheckedCreateWithoutStepInput[]
    connectOrCreate?: ComponentSnapshotCreateOrConnectWithoutStepInput | ComponentSnapshotCreateOrConnectWithoutStepInput[]
    upsert?: ComponentSnapshotUpsertWithWhereUniqueWithoutStepInput | ComponentSnapshotUpsertWithWhereUniqueWithoutStepInput[]
    createMany?: ComponentSnapshotCreateManyStepInputEnvelope
    set?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    disconnect?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    delete?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    connect?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    update?: ComponentSnapshotUpdateWithWhereUniqueWithoutStepInput | ComponentSnapshotUpdateWithWhereUniqueWithoutStepInput[]
    updateMany?: ComponentSnapshotUpdateManyWithWhereWithoutStepInput | ComponentSnapshotUpdateManyWithWhereWithoutStepInput[]
    deleteMany?: ComponentSnapshotScalarWhereInput | ComponentSnapshotScalarWhereInput[]
  }

  export type StepProgressUpdateManyWithoutStepSnapshotNestedInput = {
    create?: XOR<StepProgressCreateWithoutStepSnapshotInput, StepProgressUncheckedCreateWithoutStepSnapshotInput> | StepProgressCreateWithoutStepSnapshotInput[] | StepProgressUncheckedCreateWithoutStepSnapshotInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutStepSnapshotInput | StepProgressCreateOrConnectWithoutStepSnapshotInput[]
    upsert?: StepProgressUpsertWithWhereUniqueWithoutStepSnapshotInput | StepProgressUpsertWithWhereUniqueWithoutStepSnapshotInput[]
    createMany?: StepProgressCreateManyStepSnapshotInputEnvelope
    set?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    disconnect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    delete?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    update?: StepProgressUpdateWithWhereUniqueWithoutStepSnapshotInput | StepProgressUpdateWithWhereUniqueWithoutStepSnapshotInput[]
    updateMany?: StepProgressUpdateManyWithWhereWithoutStepSnapshotInput | StepProgressUpdateManyWithWhereWithoutStepSnapshotInput[]
    deleteMany?: StepProgressScalarWhereInput | StepProgressScalarWhereInput[]
  }

  export type ComponentSnapshotUncheckedUpdateManyWithoutStepNestedInput = {
    create?: XOR<ComponentSnapshotCreateWithoutStepInput, ComponentSnapshotUncheckedCreateWithoutStepInput> | ComponentSnapshotCreateWithoutStepInput[] | ComponentSnapshotUncheckedCreateWithoutStepInput[]
    connectOrCreate?: ComponentSnapshotCreateOrConnectWithoutStepInput | ComponentSnapshotCreateOrConnectWithoutStepInput[]
    upsert?: ComponentSnapshotUpsertWithWhereUniqueWithoutStepInput | ComponentSnapshotUpsertWithWhereUniqueWithoutStepInput[]
    createMany?: ComponentSnapshotCreateManyStepInputEnvelope
    set?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    disconnect?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    delete?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    connect?: ComponentSnapshotWhereUniqueInput | ComponentSnapshotWhereUniqueInput[]
    update?: ComponentSnapshotUpdateWithWhereUniqueWithoutStepInput | ComponentSnapshotUpdateWithWhereUniqueWithoutStepInput[]
    updateMany?: ComponentSnapshotUpdateManyWithWhereWithoutStepInput | ComponentSnapshotUpdateManyWithWhereWithoutStepInput[]
    deleteMany?: ComponentSnapshotScalarWhereInput | ComponentSnapshotScalarWhereInput[]
  }

  export type StepProgressUncheckedUpdateManyWithoutStepSnapshotNestedInput = {
    create?: XOR<StepProgressCreateWithoutStepSnapshotInput, StepProgressUncheckedCreateWithoutStepSnapshotInput> | StepProgressCreateWithoutStepSnapshotInput[] | StepProgressUncheckedCreateWithoutStepSnapshotInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutStepSnapshotInput | StepProgressCreateOrConnectWithoutStepSnapshotInput[]
    upsert?: StepProgressUpsertWithWhereUniqueWithoutStepSnapshotInput | StepProgressUpsertWithWhereUniqueWithoutStepSnapshotInput[]
    createMany?: StepProgressCreateManyStepSnapshotInputEnvelope
    set?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    disconnect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    delete?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    update?: StepProgressUpdateWithWhereUniqueWithoutStepSnapshotInput | StepProgressUpdateWithWhereUniqueWithoutStepSnapshotInput[]
    updateMany?: StepProgressUpdateManyWithWhereWithoutStepSnapshotInput | StepProgressUpdateManyWithWhereWithoutStepSnapshotInput[]
    deleteMany?: StepProgressScalarWhereInput | StepProgressScalarWhereInput[]
  }

  export type FlowStepSnapshotCreateNestedOneWithoutComponentsInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutComponentsInput, FlowStepSnapshotUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutComponentsInput
    connect?: FlowStepSnapshotWhereUniqueInput
  }

  export type ComponentProgressCreateNestedManyWithoutComponentSnapshotInput = {
    create?: XOR<ComponentProgressCreateWithoutComponentSnapshotInput, ComponentProgressUncheckedCreateWithoutComponentSnapshotInput> | ComponentProgressCreateWithoutComponentSnapshotInput[] | ComponentProgressUncheckedCreateWithoutComponentSnapshotInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutComponentSnapshotInput | ComponentProgressCreateOrConnectWithoutComponentSnapshotInput[]
    createMany?: ComponentProgressCreateManyComponentSnapshotInputEnvelope
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
  }

  export type ComponentProgressUncheckedCreateNestedManyWithoutComponentSnapshotInput = {
    create?: XOR<ComponentProgressCreateWithoutComponentSnapshotInput, ComponentProgressUncheckedCreateWithoutComponentSnapshotInput> | ComponentProgressCreateWithoutComponentSnapshotInput[] | ComponentProgressUncheckedCreateWithoutComponentSnapshotInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutComponentSnapshotInput | ComponentProgressCreateOrConnectWithoutComponentSnapshotInput[]
    createMany?: ComponentProgressCreateManyComponentSnapshotInputEnvelope
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
  }

  export type FlowStepSnapshotUpdateOneRequiredWithoutComponentsNestedInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutComponentsInput, FlowStepSnapshotUncheckedCreateWithoutComponentsInput>
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutComponentsInput
    upsert?: FlowStepSnapshotUpsertWithoutComponentsInput
    connect?: FlowStepSnapshotWhereUniqueInput
    update?: XOR<XOR<FlowStepSnapshotUpdateToOneWithWhereWithoutComponentsInput, FlowStepSnapshotUpdateWithoutComponentsInput>, FlowStepSnapshotUncheckedUpdateWithoutComponentsInput>
  }

  export type ComponentProgressUpdateManyWithoutComponentSnapshotNestedInput = {
    create?: XOR<ComponentProgressCreateWithoutComponentSnapshotInput, ComponentProgressUncheckedCreateWithoutComponentSnapshotInput> | ComponentProgressCreateWithoutComponentSnapshotInput[] | ComponentProgressUncheckedCreateWithoutComponentSnapshotInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutComponentSnapshotInput | ComponentProgressCreateOrConnectWithoutComponentSnapshotInput[]
    upsert?: ComponentProgressUpsertWithWhereUniqueWithoutComponentSnapshotInput | ComponentProgressUpsertWithWhereUniqueWithoutComponentSnapshotInput[]
    createMany?: ComponentProgressCreateManyComponentSnapshotInputEnvelope
    set?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    disconnect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    delete?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    update?: ComponentProgressUpdateWithWhereUniqueWithoutComponentSnapshotInput | ComponentProgressUpdateWithWhereUniqueWithoutComponentSnapshotInput[]
    updateMany?: ComponentProgressUpdateManyWithWhereWithoutComponentSnapshotInput | ComponentProgressUpdateManyWithWhereWithoutComponentSnapshotInput[]
    deleteMany?: ComponentProgressScalarWhereInput | ComponentProgressScalarWhereInput[]
  }

  export type ComponentProgressUncheckedUpdateManyWithoutComponentSnapshotNestedInput = {
    create?: XOR<ComponentProgressCreateWithoutComponentSnapshotInput, ComponentProgressUncheckedCreateWithoutComponentSnapshotInput> | ComponentProgressCreateWithoutComponentSnapshotInput[] | ComponentProgressUncheckedCreateWithoutComponentSnapshotInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutComponentSnapshotInput | ComponentProgressCreateOrConnectWithoutComponentSnapshotInput[]
    upsert?: ComponentProgressUpsertWithWhereUniqueWithoutComponentSnapshotInput | ComponentProgressUpsertWithWhereUniqueWithoutComponentSnapshotInput[]
    createMany?: ComponentProgressCreateManyComponentSnapshotInputEnvelope
    set?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    disconnect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    delete?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    update?: ComponentProgressUpdateWithWhereUniqueWithoutComponentSnapshotInput | ComponentProgressUpdateWithWhereUniqueWithoutComponentSnapshotInput[]
    updateMany?: ComponentProgressUpdateManyWithWhereWithoutComponentSnapshotInput | ComponentProgressUpdateManyWithWhereWithoutComponentSnapshotInput[]
    deleteMany?: ComponentProgressScalarWhereInput | ComponentProgressScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAssignedFlowsAsUserInput = {
    create?: XOR<UserCreateWithoutAssignedFlowsAsUserInput, UserUncheckedCreateWithoutAssignedFlowsAsUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlowsAsUserInput
    connect?: UserWhereUniqueInput
  }

  export type FlowSnapshotCreateNestedOneWithoutAssignmentInput = {
    create?: XOR<FlowSnapshotCreateWithoutAssignmentInput, FlowSnapshotUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutAssignmentInput
    connect?: FlowSnapshotWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutAssignedFlowsAsBuddyInput = {
    create?: XOR<UserCreateWithoutAssignedFlowsAsBuddyInput, UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput> | UserCreateWithoutAssignedFlowsAsBuddyInput[] | UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput | UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPausedAssignmentsInput = {
    create?: XOR<UserCreateWithoutPausedAssignmentsInput, UserUncheckedCreateWithoutPausedAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPausedAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type FlowProgressCreateNestedOneWithoutAssignmentInput = {
    create?: XOR<FlowProgressCreateWithoutAssignmentInput, FlowProgressUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowProgressCreateOrConnectWithoutAssignmentInput
    connect?: FlowProgressWhereUniqueInput
  }

  export type FlowSnapshotUncheckedCreateNestedOneWithoutAssignmentInput = {
    create?: XOR<FlowSnapshotCreateWithoutAssignmentInput, FlowSnapshotUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutAssignmentInput
    connect?: FlowSnapshotWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutAssignedFlowsAsBuddyInput = {
    create?: XOR<UserCreateWithoutAssignedFlowsAsBuddyInput, UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput> | UserCreateWithoutAssignedFlowsAsBuddyInput[] | UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput | UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type FlowProgressUncheckedCreateNestedOneWithoutAssignmentInput = {
    create?: XOR<FlowProgressCreateWithoutAssignmentInput, FlowProgressUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowProgressCreateOrConnectWithoutAssignmentInput
    connect?: FlowProgressWhereUniqueInput
  }

  export type EnumAssignmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssignmentStatus
  }

  export type UserUpdateOneRequiredWithoutAssignedFlowsAsUserNestedInput = {
    create?: XOR<UserCreateWithoutAssignedFlowsAsUserInput, UserUncheckedCreateWithoutAssignedFlowsAsUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlowsAsUserInput
    upsert?: UserUpsertWithoutAssignedFlowsAsUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedFlowsAsUserInput, UserUpdateWithoutAssignedFlowsAsUserInput>, UserUncheckedUpdateWithoutAssignedFlowsAsUserInput>
  }

  export type FlowSnapshotUpdateOneWithoutAssignmentNestedInput = {
    create?: XOR<FlowSnapshotCreateWithoutAssignmentInput, FlowSnapshotUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutAssignmentInput
    upsert?: FlowSnapshotUpsertWithoutAssignmentInput
    disconnect?: FlowSnapshotWhereInput | boolean
    delete?: FlowSnapshotWhereInput | boolean
    connect?: FlowSnapshotWhereUniqueInput
    update?: XOR<XOR<FlowSnapshotUpdateToOneWithWhereWithoutAssignmentInput, FlowSnapshotUpdateWithoutAssignmentInput>, FlowSnapshotUncheckedUpdateWithoutAssignmentInput>
  }

  export type UserUpdateManyWithoutAssignedFlowsAsBuddyNestedInput = {
    create?: XOR<UserCreateWithoutAssignedFlowsAsBuddyInput, UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput> | UserCreateWithoutAssignedFlowsAsBuddyInput[] | UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput | UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAssignedFlowsAsBuddyInput | UserUpsertWithWhereUniqueWithoutAssignedFlowsAsBuddyInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAssignedFlowsAsBuddyInput | UserUpdateWithWhereUniqueWithoutAssignedFlowsAsBuddyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAssignedFlowsAsBuddyInput | UserUpdateManyWithWhereWithoutAssignedFlowsAsBuddyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateOneWithoutPausedAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutPausedAssignmentsInput, UserUncheckedCreateWithoutPausedAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPausedAssignmentsInput
    upsert?: UserUpsertWithoutPausedAssignmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPausedAssignmentsInput, UserUpdateWithoutPausedAssignmentsInput>, UserUncheckedUpdateWithoutPausedAssignmentsInput>
  }

  export type FlowProgressUpdateOneWithoutAssignmentNestedInput = {
    create?: XOR<FlowProgressCreateWithoutAssignmentInput, FlowProgressUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowProgressCreateOrConnectWithoutAssignmentInput
    upsert?: FlowProgressUpsertWithoutAssignmentInput
    disconnect?: FlowProgressWhereInput | boolean
    delete?: FlowProgressWhereInput | boolean
    connect?: FlowProgressWhereUniqueInput
    update?: XOR<XOR<FlowProgressUpdateToOneWithWhereWithoutAssignmentInput, FlowProgressUpdateWithoutAssignmentInput>, FlowProgressUncheckedUpdateWithoutAssignmentInput>
  }

  export type FlowSnapshotUncheckedUpdateOneWithoutAssignmentNestedInput = {
    create?: XOR<FlowSnapshotCreateWithoutAssignmentInput, FlowSnapshotUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowSnapshotCreateOrConnectWithoutAssignmentInput
    upsert?: FlowSnapshotUpsertWithoutAssignmentInput
    disconnect?: FlowSnapshotWhereInput | boolean
    delete?: FlowSnapshotWhereInput | boolean
    connect?: FlowSnapshotWhereUniqueInput
    update?: XOR<XOR<FlowSnapshotUpdateToOneWithWhereWithoutAssignmentInput, FlowSnapshotUpdateWithoutAssignmentInput>, FlowSnapshotUncheckedUpdateWithoutAssignmentInput>
  }

  export type UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyNestedInput = {
    create?: XOR<UserCreateWithoutAssignedFlowsAsBuddyInput, UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput> | UserCreateWithoutAssignedFlowsAsBuddyInput[] | UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput | UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAssignedFlowsAsBuddyInput | UserUpsertWithWhereUniqueWithoutAssignedFlowsAsBuddyInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAssignedFlowsAsBuddyInput | UserUpdateWithWhereUniqueWithoutAssignedFlowsAsBuddyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAssignedFlowsAsBuddyInput | UserUpdateManyWithWhereWithoutAssignedFlowsAsBuddyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type FlowProgressUncheckedUpdateOneWithoutAssignmentNestedInput = {
    create?: XOR<FlowProgressCreateWithoutAssignmentInput, FlowProgressUncheckedCreateWithoutAssignmentInput>
    connectOrCreate?: FlowProgressCreateOrConnectWithoutAssignmentInput
    upsert?: FlowProgressUpsertWithoutAssignmentInput
    disconnect?: FlowProgressWhereInput | boolean
    delete?: FlowProgressWhereInput | boolean
    connect?: FlowProgressWhereUniqueInput
    update?: XOR<XOR<FlowProgressUpdateToOneWithWhereWithoutAssignmentInput, FlowProgressUpdateWithoutAssignmentInput>, FlowProgressUncheckedUpdateWithoutAssignmentInput>
  }

  export type UserCreateNestedOneWithoutUserProgressInput = {
    create?: XOR<UserCreateWithoutUserProgressInput, UserUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProgressInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserProgressNestedInput = {
    create?: XOR<UserCreateWithoutUserProgressInput, UserUncheckedCreateWithoutUserProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserProgressInput
    upsert?: UserUpsertWithoutUserProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserProgressInput, UserUpdateWithoutUserProgressInput>, UserUncheckedUpdateWithoutUserProgressInput>
  }

  export type FlowAssignmentCreateNestedOneWithoutFlowProgressInput = {
    create?: XOR<FlowAssignmentCreateWithoutFlowProgressInput, FlowAssignmentUncheckedCreateWithoutFlowProgressInput>
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutFlowProgressInput
    connect?: FlowAssignmentWhereUniqueInput
  }

  export type StepProgressCreateNestedManyWithoutFlowProgressInput = {
    create?: XOR<StepProgressCreateWithoutFlowProgressInput, StepProgressUncheckedCreateWithoutFlowProgressInput> | StepProgressCreateWithoutFlowProgressInput[] | StepProgressUncheckedCreateWithoutFlowProgressInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutFlowProgressInput | StepProgressCreateOrConnectWithoutFlowProgressInput[]
    createMany?: StepProgressCreateManyFlowProgressInputEnvelope
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
  }

  export type StepProgressUncheckedCreateNestedManyWithoutFlowProgressInput = {
    create?: XOR<StepProgressCreateWithoutFlowProgressInput, StepProgressUncheckedCreateWithoutFlowProgressInput> | StepProgressCreateWithoutFlowProgressInput[] | StepProgressUncheckedCreateWithoutFlowProgressInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutFlowProgressInput | StepProgressCreateOrConnectWithoutFlowProgressInput[]
    createMany?: StepProgressCreateManyFlowProgressInputEnvelope
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
  }

  export type EnumFlowStatusFieldUpdateOperationsInput = {
    set?: $Enums.FlowStatus
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FlowAssignmentUpdateOneRequiredWithoutFlowProgressNestedInput = {
    create?: XOR<FlowAssignmentCreateWithoutFlowProgressInput, FlowAssignmentUncheckedCreateWithoutFlowProgressInput>
    connectOrCreate?: FlowAssignmentCreateOrConnectWithoutFlowProgressInput
    upsert?: FlowAssignmentUpsertWithoutFlowProgressInput
    connect?: FlowAssignmentWhereUniqueInput
    update?: XOR<XOR<FlowAssignmentUpdateToOneWithWhereWithoutFlowProgressInput, FlowAssignmentUpdateWithoutFlowProgressInput>, FlowAssignmentUncheckedUpdateWithoutFlowProgressInput>
  }

  export type StepProgressUpdateManyWithoutFlowProgressNestedInput = {
    create?: XOR<StepProgressCreateWithoutFlowProgressInput, StepProgressUncheckedCreateWithoutFlowProgressInput> | StepProgressCreateWithoutFlowProgressInput[] | StepProgressUncheckedCreateWithoutFlowProgressInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutFlowProgressInput | StepProgressCreateOrConnectWithoutFlowProgressInput[]
    upsert?: StepProgressUpsertWithWhereUniqueWithoutFlowProgressInput | StepProgressUpsertWithWhereUniqueWithoutFlowProgressInput[]
    createMany?: StepProgressCreateManyFlowProgressInputEnvelope
    set?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    disconnect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    delete?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    update?: StepProgressUpdateWithWhereUniqueWithoutFlowProgressInput | StepProgressUpdateWithWhereUniqueWithoutFlowProgressInput[]
    updateMany?: StepProgressUpdateManyWithWhereWithoutFlowProgressInput | StepProgressUpdateManyWithWhereWithoutFlowProgressInput[]
    deleteMany?: StepProgressScalarWhereInput | StepProgressScalarWhereInput[]
  }

  export type StepProgressUncheckedUpdateManyWithoutFlowProgressNestedInput = {
    create?: XOR<StepProgressCreateWithoutFlowProgressInput, StepProgressUncheckedCreateWithoutFlowProgressInput> | StepProgressCreateWithoutFlowProgressInput[] | StepProgressUncheckedCreateWithoutFlowProgressInput[]
    connectOrCreate?: StepProgressCreateOrConnectWithoutFlowProgressInput | StepProgressCreateOrConnectWithoutFlowProgressInput[]
    upsert?: StepProgressUpsertWithWhereUniqueWithoutFlowProgressInput | StepProgressUpsertWithWhereUniqueWithoutFlowProgressInput[]
    createMany?: StepProgressCreateManyFlowProgressInputEnvelope
    set?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    disconnect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    delete?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    connect?: StepProgressWhereUniqueInput | StepProgressWhereUniqueInput[]
    update?: StepProgressUpdateWithWhereUniqueWithoutFlowProgressInput | StepProgressUpdateWithWhereUniqueWithoutFlowProgressInput[]
    updateMany?: StepProgressUpdateManyWithWhereWithoutFlowProgressInput | StepProgressUpdateManyWithWhereWithoutFlowProgressInput[]
    deleteMany?: StepProgressScalarWhereInput | StepProgressScalarWhereInput[]
  }

  export type FlowStepSnapshotCreateNestedOneWithoutProgressInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutProgressInput, FlowStepSnapshotUncheckedCreateWithoutProgressInput>
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutProgressInput
    connect?: FlowStepSnapshotWhereUniqueInput
  }

  export type FlowProgressCreateNestedOneWithoutStepsProgressInput = {
    create?: XOR<FlowProgressCreateWithoutStepsProgressInput, FlowProgressUncheckedCreateWithoutStepsProgressInput>
    connectOrCreate?: FlowProgressCreateOrConnectWithoutStepsProgressInput
    connect?: FlowProgressWhereUniqueInput
  }

  export type ComponentProgressCreateNestedManyWithoutStepProgressInput = {
    create?: XOR<ComponentProgressCreateWithoutStepProgressInput, ComponentProgressUncheckedCreateWithoutStepProgressInput> | ComponentProgressCreateWithoutStepProgressInput[] | ComponentProgressUncheckedCreateWithoutStepProgressInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutStepProgressInput | ComponentProgressCreateOrConnectWithoutStepProgressInput[]
    createMany?: ComponentProgressCreateManyStepProgressInputEnvelope
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
  }

  export type ComponentProgressUncheckedCreateNestedManyWithoutStepProgressInput = {
    create?: XOR<ComponentProgressCreateWithoutStepProgressInput, ComponentProgressUncheckedCreateWithoutStepProgressInput> | ComponentProgressCreateWithoutStepProgressInput[] | ComponentProgressUncheckedCreateWithoutStepProgressInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutStepProgressInput | ComponentProgressCreateOrConnectWithoutStepProgressInput[]
    createMany?: ComponentProgressCreateManyStepProgressInputEnvelope
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
  }

  export type EnumStepStatusFieldUpdateOperationsInput = {
    set?: $Enums.StepStatus
  }

  export type FlowStepSnapshotUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<FlowStepSnapshotCreateWithoutProgressInput, FlowStepSnapshotUncheckedCreateWithoutProgressInput>
    connectOrCreate?: FlowStepSnapshotCreateOrConnectWithoutProgressInput
    upsert?: FlowStepSnapshotUpsertWithoutProgressInput
    connect?: FlowStepSnapshotWhereUniqueInput
    update?: XOR<XOR<FlowStepSnapshotUpdateToOneWithWhereWithoutProgressInput, FlowStepSnapshotUpdateWithoutProgressInput>, FlowStepSnapshotUncheckedUpdateWithoutProgressInput>
  }

  export type FlowProgressUpdateOneRequiredWithoutStepsProgressNestedInput = {
    create?: XOR<FlowProgressCreateWithoutStepsProgressInput, FlowProgressUncheckedCreateWithoutStepsProgressInput>
    connectOrCreate?: FlowProgressCreateOrConnectWithoutStepsProgressInput
    upsert?: FlowProgressUpsertWithoutStepsProgressInput
    connect?: FlowProgressWhereUniqueInput
    update?: XOR<XOR<FlowProgressUpdateToOneWithWhereWithoutStepsProgressInput, FlowProgressUpdateWithoutStepsProgressInput>, FlowProgressUncheckedUpdateWithoutStepsProgressInput>
  }

  export type ComponentProgressUpdateManyWithoutStepProgressNestedInput = {
    create?: XOR<ComponentProgressCreateWithoutStepProgressInput, ComponentProgressUncheckedCreateWithoutStepProgressInput> | ComponentProgressCreateWithoutStepProgressInput[] | ComponentProgressUncheckedCreateWithoutStepProgressInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutStepProgressInput | ComponentProgressCreateOrConnectWithoutStepProgressInput[]
    upsert?: ComponentProgressUpsertWithWhereUniqueWithoutStepProgressInput | ComponentProgressUpsertWithWhereUniqueWithoutStepProgressInput[]
    createMany?: ComponentProgressCreateManyStepProgressInputEnvelope
    set?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    disconnect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    delete?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    update?: ComponentProgressUpdateWithWhereUniqueWithoutStepProgressInput | ComponentProgressUpdateWithWhereUniqueWithoutStepProgressInput[]
    updateMany?: ComponentProgressUpdateManyWithWhereWithoutStepProgressInput | ComponentProgressUpdateManyWithWhereWithoutStepProgressInput[]
    deleteMany?: ComponentProgressScalarWhereInput | ComponentProgressScalarWhereInput[]
  }

  export type ComponentProgressUncheckedUpdateManyWithoutStepProgressNestedInput = {
    create?: XOR<ComponentProgressCreateWithoutStepProgressInput, ComponentProgressUncheckedCreateWithoutStepProgressInput> | ComponentProgressCreateWithoutStepProgressInput[] | ComponentProgressUncheckedCreateWithoutStepProgressInput[]
    connectOrCreate?: ComponentProgressCreateOrConnectWithoutStepProgressInput | ComponentProgressCreateOrConnectWithoutStepProgressInput[]
    upsert?: ComponentProgressUpsertWithWhereUniqueWithoutStepProgressInput | ComponentProgressUpsertWithWhereUniqueWithoutStepProgressInput[]
    createMany?: ComponentProgressCreateManyStepProgressInputEnvelope
    set?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    disconnect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    delete?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    connect?: ComponentProgressWhereUniqueInput | ComponentProgressWhereUniqueInput[]
    update?: ComponentProgressUpdateWithWhereUniqueWithoutStepProgressInput | ComponentProgressUpdateWithWhereUniqueWithoutStepProgressInput[]
    updateMany?: ComponentProgressUpdateManyWithWhereWithoutStepProgressInput | ComponentProgressUpdateManyWithWhereWithoutStepProgressInput[]
    deleteMany?: ComponentProgressScalarWhereInput | ComponentProgressScalarWhereInput[]
  }

  export type ComponentSnapshotCreateNestedOneWithoutProgressInput = {
    create?: XOR<ComponentSnapshotCreateWithoutProgressInput, ComponentSnapshotUncheckedCreateWithoutProgressInput>
    connectOrCreate?: ComponentSnapshotCreateOrConnectWithoutProgressInput
    connect?: ComponentSnapshotWhereUniqueInput
  }

  export type StepProgressCreateNestedOneWithoutComponentProgressInput = {
    create?: XOR<StepProgressCreateWithoutComponentProgressInput, StepProgressUncheckedCreateWithoutComponentProgressInput>
    connectOrCreate?: StepProgressCreateOrConnectWithoutComponentProgressInput
    connect?: StepProgressWhereUniqueInput
  }

  export type EnumComponentStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComponentStatus
  }

  export type ComponentSnapshotUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<ComponentSnapshotCreateWithoutProgressInput, ComponentSnapshotUncheckedCreateWithoutProgressInput>
    connectOrCreate?: ComponentSnapshotCreateOrConnectWithoutProgressInput
    upsert?: ComponentSnapshotUpsertWithoutProgressInput
    connect?: ComponentSnapshotWhereUniqueInput
    update?: XOR<XOR<ComponentSnapshotUpdateToOneWithWhereWithoutProgressInput, ComponentSnapshotUpdateWithoutProgressInput>, ComponentSnapshotUncheckedUpdateWithoutProgressInput>
  }

  export type StepProgressUpdateOneRequiredWithoutComponentProgressNestedInput = {
    create?: XOR<StepProgressCreateWithoutComponentProgressInput, StepProgressUncheckedCreateWithoutComponentProgressInput>
    connectOrCreate?: StepProgressCreateOrConnectWithoutComponentProgressInput
    upsert?: StepProgressUpsertWithoutComponentProgressInput
    connect?: StepProgressWhereUniqueInput
    update?: XOR<XOR<StepProgressUpdateToOneWithWhereWithoutComponentProgressInput, StepProgressUpdateWithoutComponentProgressInput>, StepProgressUncheckedUpdateWithoutComponentProgressInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedNotificationsInput = {
    create?: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationPriorityFieldUpdateOperationsInput = {
    set?: $Enums.NotificationPriority
  }

  export type EnumNotificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.NotificationStatus
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateOneWithoutCreatedNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedNotificationsInput
    upsert?: UserUpsertWithoutCreatedNotificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedNotificationsInput, UserUpdateWithoutCreatedNotificationsInput>, UserUncheckedUpdateWithoutCreatedNotificationsInput>
  }

  export type UserAchievementCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type UserAchievementUncheckedCreateNestedManyWithoutAchievementInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
  }

  export type EnumAchievementRarityFieldUpdateOperationsInput = {
    set?: $Enums.AchievementRarity
  }

  export type UserAchievementUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementNestedInput = {
    create?: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput> | UserAchievementCreateWithoutAchievementInput[] | UserAchievementUncheckedCreateWithoutAchievementInput[]
    connectOrCreate?: UserAchievementCreateOrConnectWithoutAchievementInput | UserAchievementCreateOrConnectWithoutAchievementInput[]
    upsert?: UserAchievementUpsertWithWhereUniqueWithoutAchievementInput | UserAchievementUpsertWithWhereUniqueWithoutAchievementInput[]
    createMany?: UserAchievementCreateManyAchievementInputEnvelope
    set?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    disconnect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    delete?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    connect?: UserAchievementWhereUniqueInput | UserAchievementWhereUniqueInput[]
    update?: UserAchievementUpdateWithWhereUniqueWithoutAchievementInput | UserAchievementUpdateWithWhereUniqueWithoutAchievementInput[]
    updateMany?: UserAchievementUpdateManyWithWhereWithoutAchievementInput | UserAchievementUpdateManyWithWhereWithoutAchievementInput[]
    deleteMany?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserAchievementsInput = {
    create?: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAchievementsInput
    connect?: UserWhereUniqueInput
  }

  export type AchievementCreateNestedOneWithoutUserAchievementsInput = {
    create?: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUserAchievementsInput
    connect?: AchievementWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserAchievementsNestedInput = {
    create?: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAchievementsInput
    upsert?: UserUpsertWithoutUserAchievementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserAchievementsInput, UserUpdateWithoutUserAchievementsInput>, UserUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput = {
    create?: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    connectOrCreate?: AchievementCreateOrConnectWithoutUserAchievementsInput
    upsert?: AchievementUpsertWithoutUserAchievementsInput
    connect?: AchievementWhereUniqueInput
    update?: XOR<XOR<AchievementUpdateToOneWithWhereWithoutUserAchievementsInput, AchievementUpdateWithoutUserAchievementsInput>, AchievementUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type SystemSettingsCreateworkingDaysInput = {
    set: $Enums.DayOfWeek[]
  }

  export type UserCreateNestedOneWithoutUpdatedSettingsInput = {
    create?: XOR<UserCreateWithoutUpdatedSettingsInput, UserUncheckedCreateWithoutUpdatedSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type SystemSettingsUpdateworkingDaysInput = {
    set?: $Enums.DayOfWeek[]
    push?: $Enums.DayOfWeek | $Enums.DayOfWeek[]
  }

  export type UserUpdateOneRequiredWithoutUpdatedSettingsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedSettingsInput, UserUncheckedCreateWithoutUpdatedSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedSettingsInput
    upsert?: UserUpsertWithoutUpdatedSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedSettingsInput, UserUpdateWithoutUpdatedSettingsInput>, UserUncheckedUpdateWithoutUpdatedSettingsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumAssignmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusFilter<$PrismaModel> | $Enums.AssignmentStatus
  }

  export type NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssignmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumFlowStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FlowStatus | EnumFlowStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFlowStatusFilter<$PrismaModel> | $Enums.FlowStatus
  }

  export type NestedEnumFlowStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FlowStatus | EnumFlowStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FlowStatus[] | ListEnumFlowStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFlowStatusWithAggregatesFilter<$PrismaModel> | $Enums.FlowStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFlowStatusFilter<$PrismaModel>
    _max?: NestedEnumFlowStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumStepStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusFilter<$PrismaModel> | $Enums.StepStatus
  }

  export type NestedEnumStepStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StepStatus | EnumStepStatusFieldRefInput<$PrismaModel>
    in?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.StepStatus[] | ListEnumStepStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStepStatusWithAggregatesFilter<$PrismaModel> | $Enums.StepStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStepStatusFilter<$PrismaModel>
    _max?: NestedEnumStepStatusFilter<$PrismaModel>
  }

  export type NestedEnumComponentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusFilter<$PrismaModel> | $Enums.ComponentStatus
  }

  export type NestedEnumComponentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComponentStatus | EnumComponentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComponentStatus[] | ListEnumComponentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComponentStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComponentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComponentStatusFilter<$PrismaModel>
    _max?: NestedEnumComponentStatusFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NestedEnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type NestedEnumAchievementRarityFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityFilter<$PrismaModel> | $Enums.AchievementRarity
  }

  export type NestedEnumAchievementRarityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AchievementRarity | EnumAchievementRarityFieldRefInput<$PrismaModel>
    in?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AchievementRarity[] | ListEnumAchievementRarityFieldRefInput<$PrismaModel>
    not?: NestedEnumAchievementRarityWithAggregatesFilter<$PrismaModel> | $Enums.AchievementRarity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAchievementRarityFilter<$PrismaModel>
    _max?: NestedEnumAchievementRarityFilter<$PrismaModel>
  }

  export type FlowCreateWithoutCreatorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    steps?: FlowStepCreateNestedManyWithoutFlowInput
    snapshots?: FlowSnapshotCreateNestedManyWithoutOriginalFlowInput
  }

  export type FlowUncheckedCreateWithoutCreatorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    steps?: FlowStepUncheckedCreateNestedManyWithoutFlowInput
    snapshots?: FlowSnapshotUncheckedCreateNestedManyWithoutOriginalFlowInput
  }

  export type FlowCreateOrConnectWithoutCreatorInput = {
    where: FlowWhereUniqueInput
    create: XOR<FlowCreateWithoutCreatorInput, FlowUncheckedCreateWithoutCreatorInput>
  }

  export type FlowCreateManyCreatorInputEnvelope = {
    data: FlowCreateManyCreatorInput | FlowCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type FlowAssignmentCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    snapshot?: FlowSnapshotCreateNestedOneWithoutAssignmentInput
    buddies?: UserCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    pausedBy?: UserCreateNestedOneWithoutPausedAssignmentsInput
    flowProgress?: FlowProgressCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentUncheckedCreateWithoutUserInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    pausedById?: string | null
    snapshot?: FlowSnapshotUncheckedCreateNestedOneWithoutAssignmentInput
    buddies?: UserUncheckedCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    flowProgress?: FlowProgressUncheckedCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentCreateOrConnectWithoutUserInput = {
    where: FlowAssignmentWhereUniqueInput
    create: XOR<FlowAssignmentCreateWithoutUserInput, FlowAssignmentUncheckedCreateWithoutUserInput>
  }

  export type FlowAssignmentCreateManyUserInputEnvelope = {
    data: FlowAssignmentCreateManyUserInput | FlowAssignmentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FlowAssignmentCreateWithoutBuddiesInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    user: UserCreateNestedOneWithoutAssignedFlowsAsUserInput
    snapshot?: FlowSnapshotCreateNestedOneWithoutAssignmentInput
    pausedBy?: UserCreateNestedOneWithoutPausedAssignmentsInput
    flowProgress?: FlowProgressCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentUncheckedCreateWithoutBuddiesInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    userId: string
    pausedById?: string | null
    snapshot?: FlowSnapshotUncheckedCreateNestedOneWithoutAssignmentInput
    flowProgress?: FlowProgressUncheckedCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentCreateOrConnectWithoutBuddiesInput = {
    where: FlowAssignmentWhereUniqueInput
    create: XOR<FlowAssignmentCreateWithoutBuddiesInput, FlowAssignmentUncheckedCreateWithoutBuddiesInput>
  }

  export type NotificationCreateWithoutRecipientInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    sender?: UserCreateNestedOneWithoutCreatedNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutRecipientInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    senderId?: string | null
  }

  export type NotificationCreateOrConnectWithoutRecipientInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutRecipientInput, NotificationUncheckedCreateWithoutRecipientInput>
  }

  export type NotificationCreateManyRecipientInputEnvelope = {
    data: NotificationCreateManyRecipientInput | NotificationCreateManyRecipientInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementCreateWithoutUserInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    achievement: AchievementCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutUserInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    achievementId: string
  }

  export type UserAchievementCreateOrConnectWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementCreateManyUserInputEnvelope = {
    data: UserAchievementCreateManyUserInput | UserAchievementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutSenderInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipient: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutSenderInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId: string
  }

  export type NotificationCreateOrConnectWithoutSenderInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
  }

  export type NotificationCreateManySenderInputEnvelope = {
    data: NotificationCreateManySenderInput | NotificationCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type FlowAssignmentCreateWithoutPausedByInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    user: UserCreateNestedOneWithoutAssignedFlowsAsUserInput
    snapshot?: FlowSnapshotCreateNestedOneWithoutAssignmentInput
    buddies?: UserCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    flowProgress?: FlowProgressCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentUncheckedCreateWithoutPausedByInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    userId: string
    snapshot?: FlowSnapshotUncheckedCreateNestedOneWithoutAssignmentInput
    buddies?: UserUncheckedCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    flowProgress?: FlowProgressUncheckedCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentCreateOrConnectWithoutPausedByInput = {
    where: FlowAssignmentWhereUniqueInput
    create: XOR<FlowAssignmentCreateWithoutPausedByInput, FlowAssignmentUncheckedCreateWithoutPausedByInput>
  }

  export type FlowAssignmentCreateManyPausedByInputEnvelope = {
    data: FlowAssignmentCreateManyPausedByInput | FlowAssignmentCreateManyPausedByInput[]
    skipDuplicates?: boolean
  }

  export type SystemSettingsCreateWithoutUpdatedByInput = {
    id?: string
    updatedAt?: Date | string
    workingDays?: SystemSettingsCreateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart: string
    workingHoursEnd: string
    timezone: string
  }

  export type SystemSettingsUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    updatedAt?: Date | string
    workingDays?: SystemSettingsCreateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart: string
    workingHoursEnd: string
    timezone: string
  }

  export type SystemSettingsCreateOrConnectWithoutUpdatedByInput = {
    where: SystemSettingsWhereUniqueInput
    create: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput>
  }

  export type SystemSettingsCreateManyUpdatedByInputEnvelope = {
    data: SystemSettingsCreateManyUpdatedByInput | SystemSettingsCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserProgressCreateWithoutUserInput = {
    id?: string
    totalTimeSpent?: number
    streakDays?: number
  }

  export type UserProgressUncheckedCreateWithoutUserInput = {
    id?: string
    totalTimeSpent?: number
    streakDays?: number
  }

  export type UserProgressCreateOrConnectWithoutUserInput = {
    where: UserProgressWhereUniqueInput
    create: XOR<UserProgressCreateWithoutUserInput, UserProgressUncheckedCreateWithoutUserInput>
  }

  export type FlowUpsertWithWhereUniqueWithoutCreatorInput = {
    where: FlowWhereUniqueInput
    update: XOR<FlowUpdateWithoutCreatorInput, FlowUncheckedUpdateWithoutCreatorInput>
    create: XOR<FlowCreateWithoutCreatorInput, FlowUncheckedCreateWithoutCreatorInput>
  }

  export type FlowUpdateWithWhereUniqueWithoutCreatorInput = {
    where: FlowWhereUniqueInput
    data: XOR<FlowUpdateWithoutCreatorInput, FlowUncheckedUpdateWithoutCreatorInput>
  }

  export type FlowUpdateManyWithWhereWithoutCreatorInput = {
    where: FlowScalarWhereInput
    data: XOR<FlowUpdateManyMutationInput, FlowUncheckedUpdateManyWithoutCreatorInput>
  }

  export type FlowScalarWhereInput = {
    AND?: FlowScalarWhereInput | FlowScalarWhereInput[]
    OR?: FlowScalarWhereInput[]
    NOT?: FlowScalarWhereInput | FlowScalarWhereInput[]
    id?: StringFilter<"Flow"> | string
    createdAt?: DateTimeFilter<"Flow"> | Date | string
    updatedAt?: DateTimeFilter<"Flow"> | Date | string
    version?: StringFilter<"Flow"> | string
    title?: StringFilter<"Flow"> | string
    description?: StringFilter<"Flow"> | string
    isActive?: BoolFilter<"Flow"> | boolean
    defaultDeadlineDays?: IntNullableFilter<"Flow"> | number | null
    stepsCount?: IntFilter<"Flow"> | number
    creatorId?: StringFilter<"Flow"> | string
  }

  export type FlowAssignmentUpsertWithWhereUniqueWithoutUserInput = {
    where: FlowAssignmentWhereUniqueInput
    update: XOR<FlowAssignmentUpdateWithoutUserInput, FlowAssignmentUncheckedUpdateWithoutUserInput>
    create: XOR<FlowAssignmentCreateWithoutUserInput, FlowAssignmentUncheckedCreateWithoutUserInput>
  }

  export type FlowAssignmentUpdateWithWhereUniqueWithoutUserInput = {
    where: FlowAssignmentWhereUniqueInput
    data: XOR<FlowAssignmentUpdateWithoutUserInput, FlowAssignmentUncheckedUpdateWithoutUserInput>
  }

  export type FlowAssignmentUpdateManyWithWhereWithoutUserInput = {
    where: FlowAssignmentScalarWhereInput
    data: XOR<FlowAssignmentUpdateManyMutationInput, FlowAssignmentUncheckedUpdateManyWithoutUserInput>
  }

  export type FlowAssignmentScalarWhereInput = {
    AND?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
    OR?: FlowAssignmentScalarWhereInput[]
    NOT?: FlowAssignmentScalarWhereInput | FlowAssignmentScalarWhereInput[]
    id?: StringFilter<"FlowAssignment"> | string
    assignedAt?: DateTimeFilter<"FlowAssignment"> | Date | string
    startedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    deadline?: DateTimeFilter<"FlowAssignment"> | Date | string
    status?: EnumAssignmentStatusFilter<"FlowAssignment"> | $Enums.AssignmentStatus
    isOverdue?: BoolFilter<"FlowAssignment"> | boolean
    pauseReason?: StringNullableFilter<"FlowAssignment"> | string | null
    pausedAt?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    timeSpent?: IntFilter<"FlowAssignment"> | number
    lastActivity?: DateTimeNullableFilter<"FlowAssignment"> | Date | string | null
    userId?: StringFilter<"FlowAssignment"> | string
    pausedById?: StringNullableFilter<"FlowAssignment"> | string | null
  }

  export type FlowAssignmentUpsertWithWhereUniqueWithoutBuddiesInput = {
    where: FlowAssignmentWhereUniqueInput
    update: XOR<FlowAssignmentUpdateWithoutBuddiesInput, FlowAssignmentUncheckedUpdateWithoutBuddiesInput>
    create: XOR<FlowAssignmentCreateWithoutBuddiesInput, FlowAssignmentUncheckedCreateWithoutBuddiesInput>
  }

  export type FlowAssignmentUpdateWithWhereUniqueWithoutBuddiesInput = {
    where: FlowAssignmentWhereUniqueInput
    data: XOR<FlowAssignmentUpdateWithoutBuddiesInput, FlowAssignmentUncheckedUpdateWithoutBuddiesInput>
  }

  export type FlowAssignmentUpdateManyWithWhereWithoutBuddiesInput = {
    where: FlowAssignmentScalarWhereInput
    data: XOR<FlowAssignmentUpdateManyMutationInput, FlowAssignmentUncheckedUpdateManyWithoutBuddiesInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutRecipientInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutRecipientInput, NotificationUncheckedUpdateWithoutRecipientInput>
    create: XOR<NotificationCreateWithoutRecipientInput, NotificationUncheckedCreateWithoutRecipientInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutRecipientInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutRecipientInput, NotificationUncheckedUpdateWithoutRecipientInput>
  }

  export type NotificationUpdateManyWithWhereWithoutRecipientInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutRecipientInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    type?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    scheduledFor?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    context?: JsonNullableFilter<"Notification">
    actions?: JsonNullableFilter<"Notification">
    recipientId?: StringFilter<"Notification"> | string
    senderId?: StringNullableFilter<"Notification"> | string | null
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
    create: XOR<UserAchievementCreateWithoutUserInput, UserAchievementUncheckedCreateWithoutUserInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutUserInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutUserInput, UserAchievementUncheckedUpdateWithoutUserInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutUserInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutUserInput>
  }

  export type UserAchievementScalarWhereInput = {
    AND?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    OR?: UserAchievementScalarWhereInput[]
    NOT?: UserAchievementScalarWhereInput | UserAchievementScalarWhereInput[]
    id?: StringFilter<"UserAchievement"> | string
    earnedAt?: DateTimeFilter<"UserAchievement"> | Date | string
    context?: JsonNullableFilter<"UserAchievement">
    userId?: StringFilter<"UserAchievement"> | string
    achievementId?: StringFilter<"UserAchievement"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutSenderInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutSenderInput, NotificationUncheckedUpdateWithoutSenderInput>
    create: XOR<NotificationCreateWithoutSenderInput, NotificationUncheckedCreateWithoutSenderInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutSenderInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutSenderInput, NotificationUncheckedUpdateWithoutSenderInput>
  }

  export type NotificationUpdateManyWithWhereWithoutSenderInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutSenderInput>
  }

  export type FlowAssignmentUpsertWithWhereUniqueWithoutPausedByInput = {
    where: FlowAssignmentWhereUniqueInput
    update: XOR<FlowAssignmentUpdateWithoutPausedByInput, FlowAssignmentUncheckedUpdateWithoutPausedByInput>
    create: XOR<FlowAssignmentCreateWithoutPausedByInput, FlowAssignmentUncheckedCreateWithoutPausedByInput>
  }

  export type FlowAssignmentUpdateWithWhereUniqueWithoutPausedByInput = {
    where: FlowAssignmentWhereUniqueInput
    data: XOR<FlowAssignmentUpdateWithoutPausedByInput, FlowAssignmentUncheckedUpdateWithoutPausedByInput>
  }

  export type FlowAssignmentUpdateManyWithWhereWithoutPausedByInput = {
    where: FlowAssignmentScalarWhereInput
    data: XOR<FlowAssignmentUpdateManyMutationInput, FlowAssignmentUncheckedUpdateManyWithoutPausedByInput>
  }

  export type SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: SystemSettingsWhereUniqueInput
    update: XOR<SystemSettingsUpdateWithoutUpdatedByInput, SystemSettingsUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput>
  }

  export type SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: SystemSettingsWhereUniqueInput
    data: XOR<SystemSettingsUpdateWithoutUpdatedByInput, SystemSettingsUncheckedUpdateWithoutUpdatedByInput>
  }

  export type SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput = {
    where: SystemSettingsScalarWhereInput
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type SystemSettingsScalarWhereInput = {
    AND?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
    OR?: SystemSettingsScalarWhereInput[]
    NOT?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
    id?: StringFilter<"SystemSettings"> | string
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
    workingDays?: EnumDayOfWeekNullableListFilter<"SystemSettings">
    workingHoursStart?: StringFilter<"SystemSettings"> | string
    workingHoursEnd?: StringFilter<"SystemSettings"> | string
    timezone?: StringFilter<"SystemSettings"> | string
    updatedById?: StringFilter<"SystemSettings"> | string
  }

  export type UserProgressUpsertWithoutUserInput = {
    update: XOR<UserProgressUpdateWithoutUserInput, UserProgressUncheckedUpdateWithoutUserInput>
    create: XOR<UserProgressCreateWithoutUserInput, UserProgressUncheckedCreateWithoutUserInput>
    where?: UserProgressWhereInput
  }

  export type UserProgressUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProgressWhereInput
    data: XOR<UserProgressUpdateWithoutUserInput, UserProgressUncheckedUpdateWithoutUserInput>
  }

  export type UserProgressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTimeSpent?: IntFieldUpdateOperationsInput | number
    streakDays?: IntFieldUpdateOperationsInput | number
  }

  export type UserProgressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    totalTimeSpent?: IntFieldUpdateOperationsInput | number
    streakDays?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutCreatedFlowsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedFlowsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedFlowsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedFlowsInput, UserUncheckedCreateWithoutCreatedFlowsInput>
  }

  export type FlowStepCreateWithoutFlowInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
    components?: FlowComponentCreateNestedManyWithoutStepInput
  }

  export type FlowStepUncheckedCreateWithoutFlowInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
    components?: FlowComponentUncheckedCreateNestedManyWithoutStepInput
  }

  export type FlowStepCreateOrConnectWithoutFlowInput = {
    where: FlowStepWhereUniqueInput
    create: XOR<FlowStepCreateWithoutFlowInput, FlowStepUncheckedCreateWithoutFlowInput>
  }

  export type FlowStepCreateManyFlowInputEnvelope = {
    data: FlowStepCreateManyFlowInput | FlowStepCreateManyFlowInput[]
    skipDuplicates?: boolean
  }

  export type FlowSnapshotCreateWithoutOriginalFlowInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    assignment?: FlowAssignmentCreateNestedOneWithoutSnapshotInput
    steps?: FlowStepSnapshotCreateNestedManyWithoutSnapshotInput
  }

  export type FlowSnapshotUncheckedCreateWithoutOriginalFlowInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    assignmentId?: string | null
    steps?: FlowStepSnapshotUncheckedCreateNestedManyWithoutSnapshotInput
  }

  export type FlowSnapshotCreateOrConnectWithoutOriginalFlowInput = {
    where: FlowSnapshotWhereUniqueInput
    create: XOR<FlowSnapshotCreateWithoutOriginalFlowInput, FlowSnapshotUncheckedCreateWithoutOriginalFlowInput>
  }

  export type FlowSnapshotCreateManyOriginalFlowInputEnvelope = {
    data: FlowSnapshotCreateManyOriginalFlowInput | FlowSnapshotCreateManyOriginalFlowInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedFlowsInput = {
    update: XOR<UserUpdateWithoutCreatedFlowsInput, UserUncheckedUpdateWithoutCreatedFlowsInput>
    create: XOR<UserCreateWithoutCreatedFlowsInput, UserUncheckedCreateWithoutCreatedFlowsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedFlowsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedFlowsInput, UserUncheckedUpdateWithoutCreatedFlowsInput>
  }

  export type UserUpdateWithoutCreatedFlowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedFlowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type FlowStepUpsertWithWhereUniqueWithoutFlowInput = {
    where: FlowStepWhereUniqueInput
    update: XOR<FlowStepUpdateWithoutFlowInput, FlowStepUncheckedUpdateWithoutFlowInput>
    create: XOR<FlowStepCreateWithoutFlowInput, FlowStepUncheckedCreateWithoutFlowInput>
  }

  export type FlowStepUpdateWithWhereUniqueWithoutFlowInput = {
    where: FlowStepWhereUniqueInput
    data: XOR<FlowStepUpdateWithoutFlowInput, FlowStepUncheckedUpdateWithoutFlowInput>
  }

  export type FlowStepUpdateManyWithWhereWithoutFlowInput = {
    where: FlowStepScalarWhereInput
    data: XOR<FlowStepUpdateManyMutationInput, FlowStepUncheckedUpdateManyWithoutFlowInput>
  }

  export type FlowStepScalarWhereInput = {
    AND?: FlowStepScalarWhereInput | FlowStepScalarWhereInput[]
    OR?: FlowStepScalarWhereInput[]
    NOT?: FlowStepScalarWhereInput | FlowStepScalarWhereInput[]
    id?: StringFilter<"FlowStep"> | string
    order?: IntFilter<"FlowStep"> | number
    title?: StringFilter<"FlowStep"> | string
    description?: StringFilter<"FlowStep"> | string
    templateComponents?: JsonNullableListFilter<"FlowStep">
    componentsCount?: IntFilter<"FlowStep"> | number
    flowId?: StringFilter<"FlowStep"> | string
  }

  export type FlowSnapshotUpsertWithWhereUniqueWithoutOriginalFlowInput = {
    where: FlowSnapshotWhereUniqueInput
    update: XOR<FlowSnapshotUpdateWithoutOriginalFlowInput, FlowSnapshotUncheckedUpdateWithoutOriginalFlowInput>
    create: XOR<FlowSnapshotCreateWithoutOriginalFlowInput, FlowSnapshotUncheckedCreateWithoutOriginalFlowInput>
  }

  export type FlowSnapshotUpdateWithWhereUniqueWithoutOriginalFlowInput = {
    where: FlowSnapshotWhereUniqueInput
    data: XOR<FlowSnapshotUpdateWithoutOriginalFlowInput, FlowSnapshotUncheckedUpdateWithoutOriginalFlowInput>
  }

  export type FlowSnapshotUpdateManyWithWhereWithoutOriginalFlowInput = {
    where: FlowSnapshotScalarWhereInput
    data: XOR<FlowSnapshotUpdateManyMutationInput, FlowSnapshotUncheckedUpdateManyWithoutOriginalFlowInput>
  }

  export type FlowSnapshotScalarWhereInput = {
    AND?: FlowSnapshotScalarWhereInput | FlowSnapshotScalarWhereInput[]
    OR?: FlowSnapshotScalarWhereInput[]
    NOT?: FlowSnapshotScalarWhereInput | FlowSnapshotScalarWhereInput[]
    id?: StringFilter<"FlowSnapshot"> | string
    createdAt?: DateTimeFilter<"FlowSnapshot"> | Date | string
    title?: StringFilter<"FlowSnapshot"> | string
    description?: StringFilter<"FlowSnapshot"> | string
    snapshotVersion?: DateTimeFilter<"FlowSnapshot"> | Date | string
    originalFlowVersion?: StringFilter<"FlowSnapshot"> | string
    originalFlowId?: StringFilter<"FlowSnapshot"> | string
    assignmentId?: StringNullableFilter<"FlowSnapshot"> | string | null
  }

  export type FlowCreateWithoutStepsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    creator: UserCreateNestedOneWithoutCreatedFlowsInput
    snapshots?: FlowSnapshotCreateNestedManyWithoutOriginalFlowInput
  }

  export type FlowUncheckedCreateWithoutStepsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    creatorId: string
    snapshots?: FlowSnapshotUncheckedCreateNestedManyWithoutOriginalFlowInput
  }

  export type FlowCreateOrConnectWithoutStepsInput = {
    where: FlowWhereUniqueInput
    create: XOR<FlowCreateWithoutStepsInput, FlowUncheckedCreateWithoutStepsInput>
  }

  export type FlowComponentCreateWithoutStepInput = {
    id?: string
    order: number
    isRequired?: boolean
    type: string
    typeVersion?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type FlowComponentUncheckedCreateWithoutStepInput = {
    id?: string
    order: number
    isRequired?: boolean
    type: string
    typeVersion?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type FlowComponentCreateOrConnectWithoutStepInput = {
    where: FlowComponentWhereUniqueInput
    create: XOR<FlowComponentCreateWithoutStepInput, FlowComponentUncheckedCreateWithoutStepInput>
  }

  export type FlowComponentCreateManyStepInputEnvelope = {
    data: FlowComponentCreateManyStepInput | FlowComponentCreateManyStepInput[]
    skipDuplicates?: boolean
  }

  export type FlowUpsertWithoutStepsInput = {
    update: XOR<FlowUpdateWithoutStepsInput, FlowUncheckedUpdateWithoutStepsInput>
    create: XOR<FlowCreateWithoutStepsInput, FlowUncheckedCreateWithoutStepsInput>
    where?: FlowWhereInput
  }

  export type FlowUpdateToOneWithWhereWithoutStepsInput = {
    where?: FlowWhereInput
    data: XOR<FlowUpdateWithoutStepsInput, FlowUncheckedUpdateWithoutStepsInput>
  }

  export type FlowUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    creator?: UserUpdateOneRequiredWithoutCreatedFlowsNestedInput
    snapshots?: FlowSnapshotUpdateManyWithoutOriginalFlowNestedInput
  }

  export type FlowUncheckedUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    snapshots?: FlowSnapshotUncheckedUpdateManyWithoutOriginalFlowNestedInput
  }

  export type FlowComponentUpsertWithWhereUniqueWithoutStepInput = {
    where: FlowComponentWhereUniqueInput
    update: XOR<FlowComponentUpdateWithoutStepInput, FlowComponentUncheckedUpdateWithoutStepInput>
    create: XOR<FlowComponentCreateWithoutStepInput, FlowComponentUncheckedCreateWithoutStepInput>
  }

  export type FlowComponentUpdateWithWhereUniqueWithoutStepInput = {
    where: FlowComponentWhereUniqueInput
    data: XOR<FlowComponentUpdateWithoutStepInput, FlowComponentUncheckedUpdateWithoutStepInput>
  }

  export type FlowComponentUpdateManyWithWhereWithoutStepInput = {
    where: FlowComponentScalarWhereInput
    data: XOR<FlowComponentUpdateManyMutationInput, FlowComponentUncheckedUpdateManyWithoutStepInput>
  }

  export type FlowComponentScalarWhereInput = {
    AND?: FlowComponentScalarWhereInput | FlowComponentScalarWhereInput[]
    OR?: FlowComponentScalarWhereInput[]
    NOT?: FlowComponentScalarWhereInput | FlowComponentScalarWhereInput[]
    id?: StringFilter<"FlowComponent"> | string
    order?: IntFilter<"FlowComponent"> | number
    isRequired?: BoolFilter<"FlowComponent"> | boolean
    type?: StringFilter<"FlowComponent"> | string
    typeVersion?: StringFilter<"FlowComponent"> | string
    data?: JsonFilter<"FlowComponent">
    stepId?: StringFilter<"FlowComponent"> | string
  }

  export type FlowStepCreateWithoutComponentsInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
    flow: FlowCreateNestedOneWithoutStepsInput
  }

  export type FlowStepUncheckedCreateWithoutComponentsInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
    flowId: string
  }

  export type FlowStepCreateOrConnectWithoutComponentsInput = {
    where: FlowStepWhereUniqueInput
    create: XOR<FlowStepCreateWithoutComponentsInput, FlowStepUncheckedCreateWithoutComponentsInput>
  }

  export type FlowStepUpsertWithoutComponentsInput = {
    update: XOR<FlowStepUpdateWithoutComponentsInput, FlowStepUncheckedUpdateWithoutComponentsInput>
    create: XOR<FlowStepCreateWithoutComponentsInput, FlowStepUncheckedCreateWithoutComponentsInput>
    where?: FlowStepWhereInput
  }

  export type FlowStepUpdateToOneWithWhereWithoutComponentsInput = {
    where?: FlowStepWhereInput
    data: XOR<FlowStepUpdateWithoutComponentsInput, FlowStepUncheckedUpdateWithoutComponentsInput>
  }

  export type FlowStepUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
    flow?: FlowUpdateOneRequiredWithoutStepsNestedInput
  }

  export type FlowStepUncheckedUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
    flowId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowCreateWithoutSnapshotsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    creator: UserCreateNestedOneWithoutCreatedFlowsInput
    steps?: FlowStepCreateNestedManyWithoutFlowInput
  }

  export type FlowUncheckedCreateWithoutSnapshotsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
    creatorId: string
    steps?: FlowStepUncheckedCreateNestedManyWithoutFlowInput
  }

  export type FlowCreateOrConnectWithoutSnapshotsInput = {
    where: FlowWhereUniqueInput
    create: XOR<FlowCreateWithoutSnapshotsInput, FlowUncheckedCreateWithoutSnapshotsInput>
  }

  export type FlowAssignmentCreateWithoutSnapshotInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    user: UserCreateNestedOneWithoutAssignedFlowsAsUserInput
    buddies?: UserCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    pausedBy?: UserCreateNestedOneWithoutPausedAssignmentsInput
    flowProgress?: FlowProgressCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentUncheckedCreateWithoutSnapshotInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    userId: string
    pausedById?: string | null
    buddies?: UserUncheckedCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    flowProgress?: FlowProgressUncheckedCreateNestedOneWithoutAssignmentInput
  }

  export type FlowAssignmentCreateOrConnectWithoutSnapshotInput = {
    where: FlowAssignmentWhereUniqueInput
    create: XOR<FlowAssignmentCreateWithoutSnapshotInput, FlowAssignmentUncheckedCreateWithoutSnapshotInput>
  }

  export type FlowStepSnapshotCreateWithoutSnapshotInput = {
    id?: string
    order: number
    title: string
    description: string
    components?: ComponentSnapshotCreateNestedManyWithoutStepInput
    progress?: StepProgressCreateNestedManyWithoutStepSnapshotInput
  }

  export type FlowStepSnapshotUncheckedCreateWithoutSnapshotInput = {
    id?: string
    order: number
    title: string
    description: string
    components?: ComponentSnapshotUncheckedCreateNestedManyWithoutStepInput
    progress?: StepProgressUncheckedCreateNestedManyWithoutStepSnapshotInput
  }

  export type FlowStepSnapshotCreateOrConnectWithoutSnapshotInput = {
    where: FlowStepSnapshotWhereUniqueInput
    create: XOR<FlowStepSnapshotCreateWithoutSnapshotInput, FlowStepSnapshotUncheckedCreateWithoutSnapshotInput>
  }

  export type FlowStepSnapshotCreateManySnapshotInputEnvelope = {
    data: FlowStepSnapshotCreateManySnapshotInput | FlowStepSnapshotCreateManySnapshotInput[]
    skipDuplicates?: boolean
  }

  export type FlowUpsertWithoutSnapshotsInput = {
    update: XOR<FlowUpdateWithoutSnapshotsInput, FlowUncheckedUpdateWithoutSnapshotsInput>
    create: XOR<FlowCreateWithoutSnapshotsInput, FlowUncheckedCreateWithoutSnapshotsInput>
    where?: FlowWhereInput
  }

  export type FlowUpdateToOneWithWhereWithoutSnapshotsInput = {
    where?: FlowWhereInput
    data: XOR<FlowUpdateWithoutSnapshotsInput, FlowUncheckedUpdateWithoutSnapshotsInput>
  }

  export type FlowUpdateWithoutSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    creator?: UserUpdateOneRequiredWithoutCreatedFlowsNestedInput
    steps?: FlowStepUpdateManyWithoutFlowNestedInput
  }

  export type FlowUncheckedUpdateWithoutSnapshotsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    steps?: FlowStepUncheckedUpdateManyWithoutFlowNestedInput
  }

  export type FlowAssignmentUpsertWithoutSnapshotInput = {
    update: XOR<FlowAssignmentUpdateWithoutSnapshotInput, FlowAssignmentUncheckedUpdateWithoutSnapshotInput>
    create: XOR<FlowAssignmentCreateWithoutSnapshotInput, FlowAssignmentUncheckedCreateWithoutSnapshotInput>
    where?: FlowAssignmentWhereInput
  }

  export type FlowAssignmentUpdateToOneWithWhereWithoutSnapshotInput = {
    where?: FlowAssignmentWhereInput
    data: XOR<FlowAssignmentUpdateWithoutSnapshotInput, FlowAssignmentUncheckedUpdateWithoutSnapshotInput>
  }

  export type FlowAssignmentUpdateWithoutSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAssignedFlowsAsUserNestedInput
    buddies?: UserUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    pausedBy?: UserUpdateOneWithoutPausedAssignmentsNestedInput
    flowProgress?: FlowProgressUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateWithoutSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
    buddies?: UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    flowProgress?: FlowProgressUncheckedUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowStepSnapshotUpsertWithWhereUniqueWithoutSnapshotInput = {
    where: FlowStepSnapshotWhereUniqueInput
    update: XOR<FlowStepSnapshotUpdateWithoutSnapshotInput, FlowStepSnapshotUncheckedUpdateWithoutSnapshotInput>
    create: XOR<FlowStepSnapshotCreateWithoutSnapshotInput, FlowStepSnapshotUncheckedCreateWithoutSnapshotInput>
  }

  export type FlowStepSnapshotUpdateWithWhereUniqueWithoutSnapshotInput = {
    where: FlowStepSnapshotWhereUniqueInput
    data: XOR<FlowStepSnapshotUpdateWithoutSnapshotInput, FlowStepSnapshotUncheckedUpdateWithoutSnapshotInput>
  }

  export type FlowStepSnapshotUpdateManyWithWhereWithoutSnapshotInput = {
    where: FlowStepSnapshotScalarWhereInput
    data: XOR<FlowStepSnapshotUpdateManyMutationInput, FlowStepSnapshotUncheckedUpdateManyWithoutSnapshotInput>
  }

  export type FlowStepSnapshotScalarWhereInput = {
    AND?: FlowStepSnapshotScalarWhereInput | FlowStepSnapshotScalarWhereInput[]
    OR?: FlowStepSnapshotScalarWhereInput[]
    NOT?: FlowStepSnapshotScalarWhereInput | FlowStepSnapshotScalarWhereInput[]
    id?: StringFilter<"FlowStepSnapshot"> | string
    order?: IntFilter<"FlowStepSnapshot"> | number
    title?: StringFilter<"FlowStepSnapshot"> | string
    description?: StringFilter<"FlowStepSnapshot"> | string
    snapshotId?: StringFilter<"FlowStepSnapshot"> | string
  }

  export type FlowSnapshotCreateWithoutStepsInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    originalFlow: FlowCreateNestedOneWithoutSnapshotsInput
    assignment?: FlowAssignmentCreateNestedOneWithoutSnapshotInput
  }

  export type FlowSnapshotUncheckedCreateWithoutStepsInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    originalFlowId: string
    assignmentId?: string | null
  }

  export type FlowSnapshotCreateOrConnectWithoutStepsInput = {
    where: FlowSnapshotWhereUniqueInput
    create: XOR<FlowSnapshotCreateWithoutStepsInput, FlowSnapshotUncheckedCreateWithoutStepsInput>
  }

  export type ComponentSnapshotCreateWithoutStepInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
    progress?: ComponentProgressCreateNestedManyWithoutComponentSnapshotInput
  }

  export type ComponentSnapshotUncheckedCreateWithoutStepInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
    progress?: ComponentProgressUncheckedCreateNestedManyWithoutComponentSnapshotInput
  }

  export type ComponentSnapshotCreateOrConnectWithoutStepInput = {
    where: ComponentSnapshotWhereUniqueInput
    create: XOR<ComponentSnapshotCreateWithoutStepInput, ComponentSnapshotUncheckedCreateWithoutStepInput>
  }

  export type ComponentSnapshotCreateManyStepInputEnvelope = {
    data: ComponentSnapshotCreateManyStepInput | ComponentSnapshotCreateManyStepInput[]
    skipDuplicates?: boolean
  }

  export type StepProgressCreateWithoutStepSnapshotInput = {
    id?: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    flowProgress: FlowProgressCreateNestedOneWithoutStepsProgressInput
    componentProgress?: ComponentProgressCreateNestedManyWithoutStepProgressInput
  }

  export type StepProgressUncheckedCreateWithoutStepSnapshotInput = {
    id?: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    flowProgressId: string
    componentProgress?: ComponentProgressUncheckedCreateNestedManyWithoutStepProgressInput
  }

  export type StepProgressCreateOrConnectWithoutStepSnapshotInput = {
    where: StepProgressWhereUniqueInput
    create: XOR<StepProgressCreateWithoutStepSnapshotInput, StepProgressUncheckedCreateWithoutStepSnapshotInput>
  }

  export type StepProgressCreateManyStepSnapshotInputEnvelope = {
    data: StepProgressCreateManyStepSnapshotInput | StepProgressCreateManyStepSnapshotInput[]
    skipDuplicates?: boolean
  }

  export type FlowSnapshotUpsertWithoutStepsInput = {
    update: XOR<FlowSnapshotUpdateWithoutStepsInput, FlowSnapshotUncheckedUpdateWithoutStepsInput>
    create: XOR<FlowSnapshotCreateWithoutStepsInput, FlowSnapshotUncheckedCreateWithoutStepsInput>
    where?: FlowSnapshotWhereInput
  }

  export type FlowSnapshotUpdateToOneWithWhereWithoutStepsInput = {
    where?: FlowSnapshotWhereInput
    data: XOR<FlowSnapshotUpdateWithoutStepsInput, FlowSnapshotUncheckedUpdateWithoutStepsInput>
  }

  export type FlowSnapshotUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    originalFlow?: FlowUpdateOneRequiredWithoutSnapshotsNestedInput
    assignment?: FlowAssignmentUpdateOneWithoutSnapshotNestedInput
  }

  export type FlowSnapshotUncheckedUpdateWithoutStepsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    originalFlowId?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ComponentSnapshotUpsertWithWhereUniqueWithoutStepInput = {
    where: ComponentSnapshotWhereUniqueInput
    update: XOR<ComponentSnapshotUpdateWithoutStepInput, ComponentSnapshotUncheckedUpdateWithoutStepInput>
    create: XOR<ComponentSnapshotCreateWithoutStepInput, ComponentSnapshotUncheckedCreateWithoutStepInput>
  }

  export type ComponentSnapshotUpdateWithWhereUniqueWithoutStepInput = {
    where: ComponentSnapshotWhereUniqueInput
    data: XOR<ComponentSnapshotUpdateWithoutStepInput, ComponentSnapshotUncheckedUpdateWithoutStepInput>
  }

  export type ComponentSnapshotUpdateManyWithWhereWithoutStepInput = {
    where: ComponentSnapshotScalarWhereInput
    data: XOR<ComponentSnapshotUpdateManyMutationInput, ComponentSnapshotUncheckedUpdateManyWithoutStepInput>
  }

  export type ComponentSnapshotScalarWhereInput = {
    AND?: ComponentSnapshotScalarWhereInput | ComponentSnapshotScalarWhereInput[]
    OR?: ComponentSnapshotScalarWhereInput[]
    NOT?: ComponentSnapshotScalarWhereInput | ComponentSnapshotScalarWhereInput[]
    id?: StringFilter<"ComponentSnapshot"> | string
    order?: IntFilter<"ComponentSnapshot"> | number
    isRequired?: BoolFilter<"ComponentSnapshot"> | boolean
    type?: StringFilter<"ComponentSnapshot"> | string
    typeVersion?: StringFilter<"ComponentSnapshot"> | string
    data?: JsonFilter<"ComponentSnapshot">
    stepId?: StringFilter<"ComponentSnapshot"> | string
  }

  export type StepProgressUpsertWithWhereUniqueWithoutStepSnapshotInput = {
    where: StepProgressWhereUniqueInput
    update: XOR<StepProgressUpdateWithoutStepSnapshotInput, StepProgressUncheckedUpdateWithoutStepSnapshotInput>
    create: XOR<StepProgressCreateWithoutStepSnapshotInput, StepProgressUncheckedCreateWithoutStepSnapshotInput>
  }

  export type StepProgressUpdateWithWhereUniqueWithoutStepSnapshotInput = {
    where: StepProgressWhereUniqueInput
    data: XOR<StepProgressUpdateWithoutStepSnapshotInput, StepProgressUncheckedUpdateWithoutStepSnapshotInput>
  }

  export type StepProgressUpdateManyWithWhereWithoutStepSnapshotInput = {
    where: StepProgressScalarWhereInput
    data: XOR<StepProgressUpdateManyMutationInput, StepProgressUncheckedUpdateManyWithoutStepSnapshotInput>
  }

  export type StepProgressScalarWhereInput = {
    AND?: StepProgressScalarWhereInput | StepProgressScalarWhereInput[]
    OR?: StepProgressScalarWhereInput[]
    NOT?: StepProgressScalarWhereInput | StepProgressScalarWhereInput[]
    id?: StringFilter<"StepProgress"> | string
    stepSnapshotId?: StringFilter<"StepProgress"> | string
    status?: EnumStepStatusFilter<"StepProgress"> | $Enums.StepStatus
    percentage?: FloatFilter<"StepProgress"> | number
    startedAt?: DateTimeNullableFilter<"StepProgress"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"StepProgress"> | Date | string | null
    timeSpent?: IntFilter<"StepProgress"> | number
    flowProgressId?: StringFilter<"StepProgress"> | string
  }

  export type FlowStepSnapshotCreateWithoutComponentsInput = {
    id?: string
    order: number
    title: string
    description: string
    snapshot: FlowSnapshotCreateNestedOneWithoutStepsInput
    progress?: StepProgressCreateNestedManyWithoutStepSnapshotInput
  }

  export type FlowStepSnapshotUncheckedCreateWithoutComponentsInput = {
    id?: string
    order: number
    title: string
    description: string
    snapshotId: string
    progress?: StepProgressUncheckedCreateNestedManyWithoutStepSnapshotInput
  }

  export type FlowStepSnapshotCreateOrConnectWithoutComponentsInput = {
    where: FlowStepSnapshotWhereUniqueInput
    create: XOR<FlowStepSnapshotCreateWithoutComponentsInput, FlowStepSnapshotUncheckedCreateWithoutComponentsInput>
  }

  export type ComponentProgressCreateWithoutComponentSnapshotInput = {
    id?: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgress: StepProgressCreateNestedOneWithoutComponentProgressInput
  }

  export type ComponentProgressUncheckedCreateWithoutComponentSnapshotInput = {
    id?: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId: string
  }

  export type ComponentProgressCreateOrConnectWithoutComponentSnapshotInput = {
    where: ComponentProgressWhereUniqueInput
    create: XOR<ComponentProgressCreateWithoutComponentSnapshotInput, ComponentProgressUncheckedCreateWithoutComponentSnapshotInput>
  }

  export type ComponentProgressCreateManyComponentSnapshotInputEnvelope = {
    data: ComponentProgressCreateManyComponentSnapshotInput | ComponentProgressCreateManyComponentSnapshotInput[]
    skipDuplicates?: boolean
  }

  export type FlowStepSnapshotUpsertWithoutComponentsInput = {
    update: XOR<FlowStepSnapshotUpdateWithoutComponentsInput, FlowStepSnapshotUncheckedUpdateWithoutComponentsInput>
    create: XOR<FlowStepSnapshotCreateWithoutComponentsInput, FlowStepSnapshotUncheckedCreateWithoutComponentsInput>
    where?: FlowStepSnapshotWhereInput
  }

  export type FlowStepSnapshotUpdateToOneWithWhereWithoutComponentsInput = {
    where?: FlowStepSnapshotWhereInput
    data: XOR<FlowStepSnapshotUpdateWithoutComponentsInput, FlowStepSnapshotUncheckedUpdateWithoutComponentsInput>
  }

  export type FlowStepSnapshotUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshot?: FlowSnapshotUpdateOneRequiredWithoutStepsNestedInput
    progress?: StepProgressUpdateManyWithoutStepSnapshotNestedInput
  }

  export type FlowStepSnapshotUncheckedUpdateWithoutComponentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotId?: StringFieldUpdateOperationsInput | string
    progress?: StepProgressUncheckedUpdateManyWithoutStepSnapshotNestedInput
  }

  export type ComponentProgressUpsertWithWhereUniqueWithoutComponentSnapshotInput = {
    where: ComponentProgressWhereUniqueInput
    update: XOR<ComponentProgressUpdateWithoutComponentSnapshotInput, ComponentProgressUncheckedUpdateWithoutComponentSnapshotInput>
    create: XOR<ComponentProgressCreateWithoutComponentSnapshotInput, ComponentProgressUncheckedCreateWithoutComponentSnapshotInput>
  }

  export type ComponentProgressUpdateWithWhereUniqueWithoutComponentSnapshotInput = {
    where: ComponentProgressWhereUniqueInput
    data: XOR<ComponentProgressUpdateWithoutComponentSnapshotInput, ComponentProgressUncheckedUpdateWithoutComponentSnapshotInput>
  }

  export type ComponentProgressUpdateManyWithWhereWithoutComponentSnapshotInput = {
    where: ComponentProgressScalarWhereInput
    data: XOR<ComponentProgressUpdateManyMutationInput, ComponentProgressUncheckedUpdateManyWithoutComponentSnapshotInput>
  }

  export type ComponentProgressScalarWhereInput = {
    AND?: ComponentProgressScalarWhereInput | ComponentProgressScalarWhereInput[]
    OR?: ComponentProgressScalarWhereInput[]
    NOT?: ComponentProgressScalarWhereInput | ComponentProgressScalarWhereInput[]
    id?: StringFilter<"ComponentProgress"> | string
    componentSnapshotId?: StringFilter<"ComponentProgress"> | string
    status?: EnumComponentStatusFilter<"ComponentProgress"> | $Enums.ComponentStatus
    startedAt?: DateTimeNullableFilter<"ComponentProgress"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ComponentProgress"> | Date | string | null
    timeSpent?: IntFilter<"ComponentProgress"> | number
    progressData?: JsonNullableFilter<"ComponentProgress">
    stepProgressId?: StringFilter<"ComponentProgress"> | string
  }

  export type UserCreateWithoutAssignedFlowsAsUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedFlowsAsUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedFlowsAsUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedFlowsAsUserInput, UserUncheckedCreateWithoutAssignedFlowsAsUserInput>
  }

  export type FlowSnapshotCreateWithoutAssignmentInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    originalFlow: FlowCreateNestedOneWithoutSnapshotsInput
    steps?: FlowStepSnapshotCreateNestedManyWithoutSnapshotInput
  }

  export type FlowSnapshotUncheckedCreateWithoutAssignmentInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    originalFlowId: string
    steps?: FlowStepSnapshotUncheckedCreateNestedManyWithoutSnapshotInput
  }

  export type FlowSnapshotCreateOrConnectWithoutAssignmentInput = {
    where: FlowSnapshotWhereUniqueInput
    create: XOR<FlowSnapshotCreateWithoutAssignmentInput, FlowSnapshotUncheckedCreateWithoutAssignmentInput>
  }

  export type UserCreateWithoutAssignedFlowsAsBuddyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedFlowsAsBuddyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedFlowsAsBuddyInput, UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput>
  }

  export type UserCreateWithoutPausedAssignmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPausedAssignmentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPausedAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPausedAssignmentsInput, UserUncheckedCreateWithoutPausedAssignmentsInput>
  }

  export type FlowProgressCreateWithoutAssignmentInput = {
    id?: string
    status?: $Enums.FlowStatus
    percentage?: number
    lastActivity?: Date | string | null
    stepsProgress?: StepProgressCreateNestedManyWithoutFlowProgressInput
  }

  export type FlowProgressUncheckedCreateWithoutAssignmentInput = {
    id?: string
    status?: $Enums.FlowStatus
    percentage?: number
    lastActivity?: Date | string | null
    stepsProgress?: StepProgressUncheckedCreateNestedManyWithoutFlowProgressInput
  }

  export type FlowProgressCreateOrConnectWithoutAssignmentInput = {
    where: FlowProgressWhereUniqueInput
    create: XOR<FlowProgressCreateWithoutAssignmentInput, FlowProgressUncheckedCreateWithoutAssignmentInput>
  }

  export type UserUpsertWithoutAssignedFlowsAsUserInput = {
    update: XOR<UserUpdateWithoutAssignedFlowsAsUserInput, UserUncheckedUpdateWithoutAssignedFlowsAsUserInput>
    create: XOR<UserCreateWithoutAssignedFlowsAsUserInput, UserUncheckedCreateWithoutAssignedFlowsAsUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedFlowsAsUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedFlowsAsUserInput, UserUncheckedUpdateWithoutAssignedFlowsAsUserInput>
  }

  export type UserUpdateWithoutAssignedFlowsAsUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedFlowsAsUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type FlowSnapshotUpsertWithoutAssignmentInput = {
    update: XOR<FlowSnapshotUpdateWithoutAssignmentInput, FlowSnapshotUncheckedUpdateWithoutAssignmentInput>
    create: XOR<FlowSnapshotCreateWithoutAssignmentInput, FlowSnapshotUncheckedCreateWithoutAssignmentInput>
    where?: FlowSnapshotWhereInput
  }

  export type FlowSnapshotUpdateToOneWithWhereWithoutAssignmentInput = {
    where?: FlowSnapshotWhereInput
    data: XOR<FlowSnapshotUpdateWithoutAssignmentInput, FlowSnapshotUncheckedUpdateWithoutAssignmentInput>
  }

  export type FlowSnapshotUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    originalFlow?: FlowUpdateOneRequiredWithoutSnapshotsNestedInput
    steps?: FlowStepSnapshotUpdateManyWithoutSnapshotNestedInput
  }

  export type FlowSnapshotUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    originalFlowId?: StringFieldUpdateOperationsInput | string
    steps?: FlowStepSnapshotUncheckedUpdateManyWithoutSnapshotNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutAssignedFlowsAsBuddyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAssignedFlowsAsBuddyInput, UserUncheckedUpdateWithoutAssignedFlowsAsBuddyInput>
    create: XOR<UserCreateWithoutAssignedFlowsAsBuddyInput, UserUncheckedCreateWithoutAssignedFlowsAsBuddyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAssignedFlowsAsBuddyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAssignedFlowsAsBuddyInput, UserUncheckedUpdateWithoutAssignedFlowsAsBuddyInput>
  }

  export type UserUpdateManyWithWhereWithoutAssignedFlowsAsBuddyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    telegramId?: StringFilter<"User"> | string
    telegramUsername?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    roles?: EnumRoleNullableListFilter<"User">
  }

  export type UserUpsertWithoutPausedAssignmentsInput = {
    update: XOR<UserUpdateWithoutPausedAssignmentsInput, UserUncheckedUpdateWithoutPausedAssignmentsInput>
    create: XOR<UserCreateWithoutPausedAssignmentsInput, UserUncheckedCreateWithoutPausedAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPausedAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPausedAssignmentsInput, UserUncheckedUpdateWithoutPausedAssignmentsInput>
  }

  export type UserUpdateWithoutPausedAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPausedAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type FlowProgressUpsertWithoutAssignmentInput = {
    update: XOR<FlowProgressUpdateWithoutAssignmentInput, FlowProgressUncheckedUpdateWithoutAssignmentInput>
    create: XOR<FlowProgressCreateWithoutAssignmentInput, FlowProgressUncheckedCreateWithoutAssignmentInput>
    where?: FlowProgressWhereInput
  }

  export type FlowProgressUpdateToOneWithWhereWithoutAssignmentInput = {
    where?: FlowProgressWhereInput
    data: XOR<FlowProgressUpdateWithoutAssignmentInput, FlowProgressUncheckedUpdateWithoutAssignmentInput>
  }

  export type FlowProgressUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stepsProgress?: StepProgressUpdateManyWithoutFlowProgressNestedInput
  }

  export type FlowProgressUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    stepsProgress?: StepProgressUncheckedUpdateManyWithoutFlowProgressNestedInput
  }

  export type UserCreateWithoutUserProgressInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUserProgressInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUserProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserProgressInput, UserUncheckedCreateWithoutUserProgressInput>
  }

  export type UserUpsertWithoutUserProgressInput = {
    update: XOR<UserUpdateWithoutUserProgressInput, UserUncheckedUpdateWithoutUserProgressInput>
    create: XOR<UserCreateWithoutUserProgressInput, UserUncheckedCreateWithoutUserProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserProgressInput, UserUncheckedUpdateWithoutUserProgressInput>
  }

  export type UserUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUserProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type FlowAssignmentCreateWithoutFlowProgressInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    user: UserCreateNestedOneWithoutAssignedFlowsAsUserInput
    snapshot?: FlowSnapshotCreateNestedOneWithoutAssignmentInput
    buddies?: UserCreateNestedManyWithoutAssignedFlowsAsBuddyInput
    pausedBy?: UserCreateNestedOneWithoutPausedAssignmentsInput
  }

  export type FlowAssignmentUncheckedCreateWithoutFlowProgressInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    userId: string
    pausedById?: string | null
    snapshot?: FlowSnapshotUncheckedCreateNestedOneWithoutAssignmentInput
    buddies?: UserUncheckedCreateNestedManyWithoutAssignedFlowsAsBuddyInput
  }

  export type FlowAssignmentCreateOrConnectWithoutFlowProgressInput = {
    where: FlowAssignmentWhereUniqueInput
    create: XOR<FlowAssignmentCreateWithoutFlowProgressInput, FlowAssignmentUncheckedCreateWithoutFlowProgressInput>
  }

  export type StepProgressCreateWithoutFlowProgressInput = {
    id?: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    stepSnapshot: FlowStepSnapshotCreateNestedOneWithoutProgressInput
    componentProgress?: ComponentProgressCreateNestedManyWithoutStepProgressInput
  }

  export type StepProgressUncheckedCreateWithoutFlowProgressInput = {
    id?: string
    stepSnapshotId: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    componentProgress?: ComponentProgressUncheckedCreateNestedManyWithoutStepProgressInput
  }

  export type StepProgressCreateOrConnectWithoutFlowProgressInput = {
    where: StepProgressWhereUniqueInput
    create: XOR<StepProgressCreateWithoutFlowProgressInput, StepProgressUncheckedCreateWithoutFlowProgressInput>
  }

  export type StepProgressCreateManyFlowProgressInputEnvelope = {
    data: StepProgressCreateManyFlowProgressInput | StepProgressCreateManyFlowProgressInput[]
    skipDuplicates?: boolean
  }

  export type FlowAssignmentUpsertWithoutFlowProgressInput = {
    update: XOR<FlowAssignmentUpdateWithoutFlowProgressInput, FlowAssignmentUncheckedUpdateWithoutFlowProgressInput>
    create: XOR<FlowAssignmentCreateWithoutFlowProgressInput, FlowAssignmentUncheckedCreateWithoutFlowProgressInput>
    where?: FlowAssignmentWhereInput
  }

  export type FlowAssignmentUpdateToOneWithWhereWithoutFlowProgressInput = {
    where?: FlowAssignmentWhereInput
    data: XOR<FlowAssignmentUpdateWithoutFlowProgressInput, FlowAssignmentUncheckedUpdateWithoutFlowProgressInput>
  }

  export type FlowAssignmentUpdateWithoutFlowProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAssignedFlowsAsUserNestedInput
    snapshot?: FlowSnapshotUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    pausedBy?: UserUpdateOneWithoutPausedAssignmentsNestedInput
  }

  export type FlowAssignmentUncheckedUpdateWithoutFlowProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
    snapshot?: FlowSnapshotUncheckedUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
  }

  export type StepProgressUpsertWithWhereUniqueWithoutFlowProgressInput = {
    where: StepProgressWhereUniqueInput
    update: XOR<StepProgressUpdateWithoutFlowProgressInput, StepProgressUncheckedUpdateWithoutFlowProgressInput>
    create: XOR<StepProgressCreateWithoutFlowProgressInput, StepProgressUncheckedCreateWithoutFlowProgressInput>
  }

  export type StepProgressUpdateWithWhereUniqueWithoutFlowProgressInput = {
    where: StepProgressWhereUniqueInput
    data: XOR<StepProgressUpdateWithoutFlowProgressInput, StepProgressUncheckedUpdateWithoutFlowProgressInput>
  }

  export type StepProgressUpdateManyWithWhereWithoutFlowProgressInput = {
    where: StepProgressScalarWhereInput
    data: XOR<StepProgressUpdateManyMutationInput, StepProgressUncheckedUpdateManyWithoutFlowProgressInput>
  }

  export type FlowStepSnapshotCreateWithoutProgressInput = {
    id?: string
    order: number
    title: string
    description: string
    snapshot: FlowSnapshotCreateNestedOneWithoutStepsInput
    components?: ComponentSnapshotCreateNestedManyWithoutStepInput
  }

  export type FlowStepSnapshotUncheckedCreateWithoutProgressInput = {
    id?: string
    order: number
    title: string
    description: string
    snapshotId: string
    components?: ComponentSnapshotUncheckedCreateNestedManyWithoutStepInput
  }

  export type FlowStepSnapshotCreateOrConnectWithoutProgressInput = {
    where: FlowStepSnapshotWhereUniqueInput
    create: XOR<FlowStepSnapshotCreateWithoutProgressInput, FlowStepSnapshotUncheckedCreateWithoutProgressInput>
  }

  export type FlowProgressCreateWithoutStepsProgressInput = {
    id?: string
    status?: $Enums.FlowStatus
    percentage?: number
    lastActivity?: Date | string | null
    assignment: FlowAssignmentCreateNestedOneWithoutFlowProgressInput
  }

  export type FlowProgressUncheckedCreateWithoutStepsProgressInput = {
    id?: string
    assignmentId: string
    status?: $Enums.FlowStatus
    percentage?: number
    lastActivity?: Date | string | null
  }

  export type FlowProgressCreateOrConnectWithoutStepsProgressInput = {
    where: FlowProgressWhereUniqueInput
    create: XOR<FlowProgressCreateWithoutStepsProgressInput, FlowProgressUncheckedCreateWithoutStepsProgressInput>
  }

  export type ComponentProgressCreateWithoutStepProgressInput = {
    id?: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    componentSnapshot: ComponentSnapshotCreateNestedOneWithoutProgressInput
  }

  export type ComponentProgressUncheckedCreateWithoutStepProgressInput = {
    id?: string
    componentSnapshotId: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComponentProgressCreateOrConnectWithoutStepProgressInput = {
    where: ComponentProgressWhereUniqueInput
    create: XOR<ComponentProgressCreateWithoutStepProgressInput, ComponentProgressUncheckedCreateWithoutStepProgressInput>
  }

  export type ComponentProgressCreateManyStepProgressInputEnvelope = {
    data: ComponentProgressCreateManyStepProgressInput | ComponentProgressCreateManyStepProgressInput[]
    skipDuplicates?: boolean
  }

  export type FlowStepSnapshotUpsertWithoutProgressInput = {
    update: XOR<FlowStepSnapshotUpdateWithoutProgressInput, FlowStepSnapshotUncheckedUpdateWithoutProgressInput>
    create: XOR<FlowStepSnapshotCreateWithoutProgressInput, FlowStepSnapshotUncheckedCreateWithoutProgressInput>
    where?: FlowStepSnapshotWhereInput
  }

  export type FlowStepSnapshotUpdateToOneWithWhereWithoutProgressInput = {
    where?: FlowStepSnapshotWhereInput
    data: XOR<FlowStepSnapshotUpdateWithoutProgressInput, FlowStepSnapshotUncheckedUpdateWithoutProgressInput>
  }

  export type FlowStepSnapshotUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshot?: FlowSnapshotUpdateOneRequiredWithoutStepsNestedInput
    components?: ComponentSnapshotUpdateManyWithoutStepNestedInput
  }

  export type FlowStepSnapshotUncheckedUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotId?: StringFieldUpdateOperationsInput | string
    components?: ComponentSnapshotUncheckedUpdateManyWithoutStepNestedInput
  }

  export type FlowProgressUpsertWithoutStepsProgressInput = {
    update: XOR<FlowProgressUpdateWithoutStepsProgressInput, FlowProgressUncheckedUpdateWithoutStepsProgressInput>
    create: XOR<FlowProgressCreateWithoutStepsProgressInput, FlowProgressUncheckedCreateWithoutStepsProgressInput>
    where?: FlowProgressWhereInput
  }

  export type FlowProgressUpdateToOneWithWhereWithoutStepsProgressInput = {
    where?: FlowProgressWhereInput
    data: XOR<FlowProgressUpdateWithoutStepsProgressInput, FlowProgressUncheckedUpdateWithoutStepsProgressInput>
  }

  export type FlowProgressUpdateWithoutStepsProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignment?: FlowAssignmentUpdateOneRequiredWithoutFlowProgressNestedInput
  }

  export type FlowProgressUncheckedUpdateWithoutStepsProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    status?: EnumFlowStatusFieldUpdateOperationsInput | $Enums.FlowStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ComponentProgressUpsertWithWhereUniqueWithoutStepProgressInput = {
    where: ComponentProgressWhereUniqueInput
    update: XOR<ComponentProgressUpdateWithoutStepProgressInput, ComponentProgressUncheckedUpdateWithoutStepProgressInput>
    create: XOR<ComponentProgressCreateWithoutStepProgressInput, ComponentProgressUncheckedCreateWithoutStepProgressInput>
  }

  export type ComponentProgressUpdateWithWhereUniqueWithoutStepProgressInput = {
    where: ComponentProgressWhereUniqueInput
    data: XOR<ComponentProgressUpdateWithoutStepProgressInput, ComponentProgressUncheckedUpdateWithoutStepProgressInput>
  }

  export type ComponentProgressUpdateManyWithWhereWithoutStepProgressInput = {
    where: ComponentProgressScalarWhereInput
    data: XOR<ComponentProgressUpdateManyMutationInput, ComponentProgressUncheckedUpdateManyWithoutStepProgressInput>
  }

  export type ComponentSnapshotCreateWithoutProgressInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
    step: FlowStepSnapshotCreateNestedOneWithoutComponentsInput
  }

  export type ComponentSnapshotUncheckedCreateWithoutProgressInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
    stepId: string
  }

  export type ComponentSnapshotCreateOrConnectWithoutProgressInput = {
    where: ComponentSnapshotWhereUniqueInput
    create: XOR<ComponentSnapshotCreateWithoutProgressInput, ComponentSnapshotUncheckedCreateWithoutProgressInput>
  }

  export type StepProgressCreateWithoutComponentProgressInput = {
    id?: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    stepSnapshot: FlowStepSnapshotCreateNestedOneWithoutProgressInput
    flowProgress: FlowProgressCreateNestedOneWithoutStepsProgressInput
  }

  export type StepProgressUncheckedCreateWithoutComponentProgressInput = {
    id?: string
    stepSnapshotId: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    flowProgressId: string
  }

  export type StepProgressCreateOrConnectWithoutComponentProgressInput = {
    where: StepProgressWhereUniqueInput
    create: XOR<StepProgressCreateWithoutComponentProgressInput, StepProgressUncheckedCreateWithoutComponentProgressInput>
  }

  export type ComponentSnapshotUpsertWithoutProgressInput = {
    update: XOR<ComponentSnapshotUpdateWithoutProgressInput, ComponentSnapshotUncheckedUpdateWithoutProgressInput>
    create: XOR<ComponentSnapshotCreateWithoutProgressInput, ComponentSnapshotUncheckedCreateWithoutProgressInput>
    where?: ComponentSnapshotWhereInput
  }

  export type ComponentSnapshotUpdateToOneWithWhereWithoutProgressInput = {
    where?: ComponentSnapshotWhereInput
    data: XOR<ComponentSnapshotUpdateWithoutProgressInput, ComponentSnapshotUncheckedUpdateWithoutProgressInput>
  }

  export type ComponentSnapshotUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    step?: FlowStepSnapshotUpdateOneRequiredWithoutComponentsNestedInput
  }

  export type ComponentSnapshotUncheckedUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    stepId?: StringFieldUpdateOperationsInput | string
  }

  export type StepProgressUpsertWithoutComponentProgressInput = {
    update: XOR<StepProgressUpdateWithoutComponentProgressInput, StepProgressUncheckedUpdateWithoutComponentProgressInput>
    create: XOR<StepProgressCreateWithoutComponentProgressInput, StepProgressUncheckedCreateWithoutComponentProgressInput>
    where?: StepProgressWhereInput
  }

  export type StepProgressUpdateToOneWithWhereWithoutComponentProgressInput = {
    where?: StepProgressWhereInput
    data: XOR<StepProgressUpdateWithoutComponentProgressInput, StepProgressUncheckedUpdateWithoutComponentProgressInput>
  }

  export type StepProgressUpdateWithoutComponentProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    stepSnapshot?: FlowStepSnapshotUpdateOneRequiredWithoutProgressNestedInput
    flowProgress?: FlowProgressUpdateOneRequiredWithoutStepsProgressNestedInput
  }

  export type StepProgressUncheckedUpdateWithoutComponentProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    flowProgressId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserCreateWithoutCreatedNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedNotificationsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUpsertWithoutCreatedNotificationsInput = {
    update: XOR<UserUpdateWithoutCreatedNotificationsInput, UserUncheckedUpdateWithoutCreatedNotificationsInput>
    create: XOR<UserCreateWithoutCreatedNotificationsInput, UserUncheckedCreateWithoutCreatedNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedNotificationsInput, UserUncheckedUpdateWithoutCreatedNotificationsInput>
  }

  export type UserUpdateWithoutCreatedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserAchievementCreateWithoutAchievementInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutUserAchievementsInput
  }

  export type UserAchievementUncheckedCreateWithoutAchievementInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId: string
  }

  export type UserAchievementCreateOrConnectWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementCreateManyAchievementInputEnvelope = {
    data: UserAchievementCreateManyAchievementInput | UserAchievementCreateManyAchievementInput[]
    skipDuplicates?: boolean
  }

  export type UserAchievementUpsertWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    update: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
    create: XOR<UserAchievementCreateWithoutAchievementInput, UserAchievementUncheckedCreateWithoutAchievementInput>
  }

  export type UserAchievementUpdateWithWhereUniqueWithoutAchievementInput = {
    where: UserAchievementWhereUniqueInput
    data: XOR<UserAchievementUpdateWithoutAchievementInput, UserAchievementUncheckedUpdateWithoutAchievementInput>
  }

  export type UserAchievementUpdateManyWithWhereWithoutAchievementInput = {
    where: UserAchievementScalarWhereInput
    data: XOR<UserAchievementUpdateManyMutationInput, UserAchievementUncheckedUpdateManyWithoutAchievementInput>
  }

  export type UserCreateWithoutUserAchievementsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserAchievementsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    updatedSettings?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserAchievementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
  }

  export type AchievementCreateWithoutUserAchievementsInput = {
    id?: string
    createdAt?: Date | string
    key: string
    title: string
    description: string
    icon: string
    rarity?: $Enums.AchievementRarity
    criteria: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedCreateWithoutUserAchievementsInput = {
    id?: string
    createdAt?: Date | string
    key: string
    title: string
    description: string
    icon: string
    rarity?: $Enums.AchievementRarity
    criteria: JsonNullValueInput | InputJsonValue
  }

  export type AchievementCreateOrConnectWithoutUserAchievementsInput = {
    where: AchievementWhereUniqueInput
    create: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
  }

  export type UserUpsertWithoutUserAchievementsInput = {
    update: XOR<UserUpdateWithoutUserAchievementsInput, UserUncheckedUpdateWithoutUserAchievementsInput>
    create: XOR<UserCreateWithoutUserAchievementsInput, UserUncheckedCreateWithoutUserAchievementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserAchievementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserAchievementsInput, UserUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type UserUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AchievementUpsertWithoutUserAchievementsInput = {
    update: XOR<AchievementUpdateWithoutUserAchievementsInput, AchievementUncheckedUpdateWithoutUserAchievementsInput>
    create: XOR<AchievementCreateWithoutUserAchievementsInput, AchievementUncheckedCreateWithoutUserAchievementsInput>
    where?: AchievementWhereInput
  }

  export type AchievementUpdateToOneWithWhereWithoutUserAchievementsInput = {
    where?: AchievementWhereInput
    data: XOR<AchievementUpdateWithoutUserAchievementsInput, AchievementUncheckedUpdateWithoutUserAchievementsInput>
  }

  export type AchievementUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    key?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type AchievementUncheckedUpdateWithoutUserAchievementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    key?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    rarity?: EnumAchievementRarityFieldUpdateOperationsInput | $Enums.AchievementRarity
    criteria?: JsonNullValueInput | InputJsonValue
  }

  export type UserCreateWithoutUpdatedSettingsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentCreateNestedManyWithoutPausedByInput
    userProgress?: UserProgressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpdatedSettingsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramId: string
    telegramUsername?: string | null
    name: string
    avatarUrl?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    roles?: UserCreaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedCreateNestedManyWithoutCreatorInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedCreateNestedManyWithoutUserInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedCreateNestedManyWithoutBuddiesInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutRecipientInput
    userAchievements?: UserAchievementUncheckedCreateNestedManyWithoutUserInput
    createdNotifications?: NotificationUncheckedCreateNestedManyWithoutSenderInput
    pausedAssignments?: FlowAssignmentUncheckedCreateNestedManyWithoutPausedByInput
    userProgress?: UserProgressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpdatedSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedSettingsInput, UserUncheckedCreateWithoutUpdatedSettingsInput>
  }

  export type UserUpsertWithoutUpdatedSettingsInput = {
    update: XOR<UserUpdateWithoutUpdatedSettingsInput, UserUncheckedUpdateWithoutUpdatedSettingsInput>
    create: XOR<UserCreateWithoutUpdatedSettingsInput, UserUncheckedCreateWithoutUpdatedSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedSettingsInput, UserUncheckedUpdateWithoutUpdatedSettingsInput>
  }

  export type UserUpdateWithoutUpdatedSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    assignedFlowsAsBuddy?: FlowAssignmentUncheckedUpdateManyWithoutBuddiesNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type FlowCreateManyCreatorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    version: string
    title: string
    description: string
    isActive?: boolean
    defaultDeadlineDays?: number | null
    stepsCount?: number
  }

  export type FlowAssignmentCreateManyUserInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    pausedById?: string | null
  }

  export type NotificationCreateManyRecipientInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    senderId?: string | null
  }

  export type UserAchievementCreateManyUserInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    achievementId: string
  }

  export type NotificationCreateManySenderInput = {
    id?: string
    createdAt?: Date | string
    type: string
    title: string
    message: string
    priority?: $Enums.NotificationPriority
    status?: $Enums.NotificationStatus
    readAt?: Date | string | null
    scheduledFor?: Date | string | null
    expiresAt?: Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId: string
  }

  export type FlowAssignmentCreateManyPausedByInput = {
    id?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    deadline: Date | string
    status?: $Enums.AssignmentStatus
    isOverdue?: boolean
    pauseReason?: string | null
    pausedAt?: Date | string | null
    timeSpent?: number
    lastActivity?: Date | string | null
    userId: string
  }

  export type SystemSettingsCreateManyUpdatedByInput = {
    id?: string
    updatedAt?: Date | string
    workingDays?: SystemSettingsCreateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart: string
    workingHoursEnd: string
    timezone: string
  }

  export type FlowUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    steps?: FlowStepUpdateManyWithoutFlowNestedInput
    snapshots?: FlowSnapshotUpdateManyWithoutOriginalFlowNestedInput
  }

  export type FlowUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
    steps?: FlowStepUncheckedUpdateManyWithoutFlowNestedInput
    snapshots?: FlowSnapshotUncheckedUpdateManyWithoutOriginalFlowNestedInput
  }

  export type FlowUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    version?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    defaultDeadlineDays?: NullableIntFieldUpdateOperationsInput | number | null
    stepsCount?: IntFieldUpdateOperationsInput | number
  }

  export type FlowAssignmentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    snapshot?: FlowSnapshotUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    pausedBy?: UserUpdateOneWithoutPausedAssignmentsNestedInput
    flowProgress?: FlowProgressUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
    snapshot?: FlowSnapshotUncheckedUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    flowProgress?: FlowProgressUncheckedUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FlowAssignmentUpdateWithoutBuddiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAssignedFlowsAsUserNestedInput
    snapshot?: FlowSnapshotUpdateOneWithoutAssignmentNestedInput
    pausedBy?: UserUpdateOneWithoutPausedAssignmentsNestedInput
    flowProgress?: FlowProgressUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateWithoutBuddiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
    snapshot?: FlowSnapshotUncheckedUpdateOneWithoutAssignmentNestedInput
    flowProgress?: FlowProgressUncheckedUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateManyWithoutBuddiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    pausedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    sender?: UserUpdateOneWithoutCreatedNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUncheckedUpdateManyWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    senderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserAchievementUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    achievement?: AchievementUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    achievementId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipient?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    context?: NullableJsonNullValueInput | InputJsonValue
    actions?: NullableJsonNullValueInput | InputJsonValue
    recipientId?: StringFieldUpdateOperationsInput | string
  }

  export type FlowAssignmentUpdateWithoutPausedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAssignedFlowsAsUserNestedInput
    snapshot?: FlowSnapshotUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    flowProgress?: FlowProgressUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateWithoutPausedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    snapshot?: FlowSnapshotUncheckedUpdateOneWithoutAssignmentNestedInput
    buddies?: UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyNestedInput
    flowProgress?: FlowProgressUncheckedUpdateOneWithoutAssignmentNestedInput
  }

  export type FlowAssignmentUncheckedUpdateManyWithoutPausedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    isOverdue?: BoolFieldUpdateOperationsInput | boolean
    pauseReason?: NullableStringFieldUpdateOperationsInput | string | null
    pausedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    lastActivity?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SystemSettingsUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: SystemSettingsUpdateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
  }

  export type SystemSettingsUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: SystemSettingsUpdateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
  }

  export type SystemSettingsUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workingDays?: SystemSettingsUpdateworkingDaysInput | $Enums.DayOfWeek[]
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
  }

  export type FlowStepCreateManyFlowInput = {
    id?: string
    order: number
    title: string
    description: string
    templateComponents?: FlowStepCreatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: number
  }

  export type FlowSnapshotCreateManyOriginalFlowInput = {
    id?: string
    createdAt?: Date | string
    title: string
    description: string
    snapshotVersion?: Date | string
    originalFlowVersion: string
    assignmentId?: string | null
  }

  export type FlowStepUpdateWithoutFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
    components?: FlowComponentUpdateManyWithoutStepNestedInput
  }

  export type FlowStepUncheckedUpdateWithoutFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
    components?: FlowComponentUncheckedUpdateManyWithoutStepNestedInput
  }

  export type FlowStepUncheckedUpdateManyWithoutFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    templateComponents?: FlowStepUpdatetemplateComponentsInput | InputJsonValue[]
    componentsCount?: IntFieldUpdateOperationsInput | number
  }

  export type FlowSnapshotUpdateWithoutOriginalFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    assignment?: FlowAssignmentUpdateOneWithoutSnapshotNestedInput
    steps?: FlowStepSnapshotUpdateManyWithoutSnapshotNestedInput
  }

  export type FlowSnapshotUncheckedUpdateWithoutOriginalFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: FlowStepSnapshotUncheckedUpdateManyWithoutSnapshotNestedInput
  }

  export type FlowSnapshotUncheckedUpdateManyWithoutOriginalFlowInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    snapshotVersion?: DateTimeFieldUpdateOperationsInput | Date | string
    originalFlowVersion?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FlowComponentCreateManyStepInput = {
    id?: string
    order: number
    isRequired?: boolean
    type: string
    typeVersion?: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type FlowComponentUpdateWithoutStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type FlowComponentUncheckedUpdateWithoutStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type FlowComponentUncheckedUpdateManyWithoutStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type FlowStepSnapshotCreateManySnapshotInput = {
    id?: string
    order: number
    title: string
    description: string
  }

  export type FlowStepSnapshotUpdateWithoutSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    components?: ComponentSnapshotUpdateManyWithoutStepNestedInput
    progress?: StepProgressUpdateManyWithoutStepSnapshotNestedInput
  }

  export type FlowStepSnapshotUncheckedUpdateWithoutSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    components?: ComponentSnapshotUncheckedUpdateManyWithoutStepNestedInput
    progress?: StepProgressUncheckedUpdateManyWithoutStepSnapshotNestedInput
  }

  export type FlowStepSnapshotUncheckedUpdateManyWithoutSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentSnapshotCreateManyStepInput = {
    id?: string
    order: number
    isRequired: boolean
    type: string
    typeVersion: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type StepProgressCreateManyStepSnapshotInput = {
    id?: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    flowProgressId: string
  }

  export type ComponentSnapshotUpdateWithoutStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    progress?: ComponentProgressUpdateManyWithoutComponentSnapshotNestedInput
  }

  export type ComponentSnapshotUncheckedUpdateWithoutStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    progress?: ComponentProgressUncheckedUpdateManyWithoutComponentSnapshotNestedInput
  }

  export type ComponentSnapshotUncheckedUpdateManyWithoutStepInput = {
    id?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    typeVersion?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type StepProgressUpdateWithoutStepSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    flowProgress?: FlowProgressUpdateOneRequiredWithoutStepsProgressNestedInput
    componentProgress?: ComponentProgressUpdateManyWithoutStepProgressNestedInput
  }

  export type StepProgressUncheckedUpdateWithoutStepSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    flowProgressId?: StringFieldUpdateOperationsInput | string
    componentProgress?: ComponentProgressUncheckedUpdateManyWithoutStepProgressNestedInput
  }

  export type StepProgressUncheckedUpdateManyWithoutStepSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    flowProgressId?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentProgressCreateManyComponentSnapshotInput = {
    id?: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId: string
  }

  export type ComponentProgressUpdateWithoutComponentSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgress?: StepProgressUpdateOneRequiredWithoutComponentProgressNestedInput
  }

  export type ComponentProgressUncheckedUpdateWithoutComponentSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId?: StringFieldUpdateOperationsInput | string
  }

  export type ComponentProgressUncheckedUpdateManyWithoutComponentSnapshotInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    stepProgressId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutAssignedFlowsAsBuddyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedFlowsAsBuddyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
    createdFlows?: FlowUncheckedUpdateManyWithoutCreatorNestedInput
    assignedFlowsAsUser?: FlowAssignmentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutRecipientNestedInput
    userAchievements?: UserAchievementUncheckedUpdateManyWithoutUserNestedInput
    createdNotifications?: NotificationUncheckedUpdateManyWithoutSenderNestedInput
    pausedAssignments?: FlowAssignmentUncheckedUpdateManyWithoutPausedByNestedInput
    updatedSettings?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
    userProgress?: UserProgressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAssignedFlowsAsBuddyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramId?: StringFieldUpdateOperationsInput | string
    telegramUsername?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    roles?: UserUpdaterolesInput | $Enums.Role[]
  }

  export type StepProgressCreateManyFlowProgressInput = {
    id?: string
    stepSnapshotId: string
    status?: $Enums.StepStatus
    percentage?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
  }

  export type StepProgressUpdateWithoutFlowProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    stepSnapshot?: FlowStepSnapshotUpdateOneRequiredWithoutProgressNestedInput
    componentProgress?: ComponentProgressUpdateManyWithoutStepProgressNestedInput
  }

  export type StepProgressUncheckedUpdateWithoutFlowProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    componentProgress?: ComponentProgressUncheckedUpdateManyWithoutStepProgressNestedInput
  }

  export type StepProgressUncheckedUpdateManyWithoutFlowProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    stepSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumStepStatusFieldUpdateOperationsInput | $Enums.StepStatus
    percentage?: FloatFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
  }

  export type ComponentProgressCreateManyStepProgressInput = {
    id?: string
    componentSnapshotId: string
    status?: $Enums.ComponentStatus
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    timeSpent?: number
    progressData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComponentProgressUpdateWithoutStepProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
    componentSnapshot?: ComponentSnapshotUpdateOneRequiredWithoutProgressNestedInput
  }

  export type ComponentProgressUncheckedUpdateWithoutStepProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    componentSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ComponentProgressUncheckedUpdateManyWithoutStepProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    componentSnapshotId?: StringFieldUpdateOperationsInput | string
    status?: EnumComponentStatusFieldUpdateOperationsInput | $Enums.ComponentStatus
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timeSpent?: IntFieldUpdateOperationsInput | number
    progressData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserAchievementCreateManyAchievementInput = {
    id?: string
    earnedAt?: Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId: string
  }

  export type UserAchievementUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutUserAchievementsNestedInput
  }

  export type UserAchievementUncheckedUpdateWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserAchievementUncheckedUpdateManyWithoutAchievementInput = {
    id?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    context?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}