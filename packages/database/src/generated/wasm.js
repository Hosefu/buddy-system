
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  telegramId: 'telegramId',
  telegramUsername: 'telegramUsername',
  name: 'name',
  avatarUrl: 'avatarUrl',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  roles: 'roles'
};

exports.Prisma.FlowScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version',
  title: 'title',
  description: 'description',
  isActive: 'isActive',
  defaultDeadlineDays: 'defaultDeadlineDays',
  stepsCount: 'stepsCount',
  creatorId: 'creatorId'
};

exports.Prisma.FlowStepScalarFieldEnum = {
  id: 'id',
  order: 'order',
  title: 'title',
  description: 'description',
  templateComponents: 'templateComponents',
  componentsCount: 'componentsCount',
  flowId: 'flowId'
};

exports.Prisma.FlowComponentScalarFieldEnum = {
  id: 'id',
  order: 'order',
  isRequired: 'isRequired',
  type: 'type',
  typeVersion: 'typeVersion',
  data: 'data',
  stepId: 'stepId'
};

exports.Prisma.FlowSnapshotScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  description: 'description',
  snapshotVersion: 'snapshotVersion',
  originalFlowVersion: 'originalFlowVersion',
  originalFlowId: 'originalFlowId',
  assignmentId: 'assignmentId'
};

exports.Prisma.FlowStepSnapshotScalarFieldEnum = {
  id: 'id',
  order: 'order',
  title: 'title',
  description: 'description',
  snapshotId: 'snapshotId'
};

exports.Prisma.ComponentSnapshotScalarFieldEnum = {
  id: 'id',
  order: 'order',
  isRequired: 'isRequired',
  type: 'type',
  typeVersion: 'typeVersion',
  data: 'data',
  stepId: 'stepId'
};

exports.Prisma.FlowAssignmentScalarFieldEnum = {
  id: 'id',
  assignedAt: 'assignedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  deadline: 'deadline',
  status: 'status',
  isOverdue: 'isOverdue',
  pauseReason: 'pauseReason',
  pausedAt: 'pausedAt',
  timeSpent: 'timeSpent',
  lastActivity: 'lastActivity',
  userId: 'userId',
  pausedById: 'pausedById'
};

exports.Prisma.UserProgressScalarFieldEnum = {
  id: 'id',
  totalTimeSpent: 'totalTimeSpent',
  streakDays: 'streakDays',
  userId: 'userId'
};

exports.Prisma.FlowProgressScalarFieldEnum = {
  id: 'id',
  assignmentId: 'assignmentId',
  status: 'status',
  percentage: 'percentage',
  lastActivity: 'lastActivity'
};

exports.Prisma.StepProgressScalarFieldEnum = {
  id: 'id',
  stepSnapshotId: 'stepSnapshotId',
  status: 'status',
  percentage: 'percentage',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  timeSpent: 'timeSpent',
  flowProgressId: 'flowProgressId'
};

exports.Prisma.ComponentProgressScalarFieldEnum = {
  id: 'id',
  componentSnapshotId: 'componentSnapshotId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  timeSpent: 'timeSpent',
  progressData: 'progressData',
  stepProgressId: 'stepProgressId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  status: 'status',
  readAt: 'readAt',
  scheduledFor: 'scheduledFor',
  expiresAt: 'expiresAt',
  context: 'context',
  actions: 'actions',
  recipientId: 'recipientId',
  senderId: 'senderId'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  key: 'key',
  title: 'title',
  description: 'description',
  icon: 'icon',
  rarity: 'rarity',
  criteria: 'criteria'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  earnedAt: 'earnedAt',
  context: 'context',
  userId: 'userId',
  achievementId: 'achievementId'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  updatedAt: 'updatedAt',
  workingDays: 'workingDays',
  workingHoursStart: 'workingHoursStart',
  workingHoursEnd: 'workingHoursEnd',
  timezone: 'timezone',
  updatedById: 'updatedById'
};

exports.Prisma.HolidayScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  isRecurring: 'isRecurring'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  BUDDY: 'BUDDY',
  ADMIN: 'ADMIN'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.FlowStatus = exports.$Enums.FlowStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

exports.StepStatus = exports.$Enums.StepStatus = {
  LOCKED: 'LOCKED',
  UNLOCKED: 'UNLOCKED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  SKIPPED: 'SKIPPED'
};

exports.ComponentStatus = exports.$Enums.ComponentStatus = {
  LOCKED: 'LOCKED',
  UNLOCKED: 'UNLOCKED',
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  SCHEDULED: 'SCHEDULED',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.AchievementRarity = exports.$Enums.AchievementRarity = {
  COMMON: 'COMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY'
};

exports.DayOfWeek = exports.$Enums.DayOfWeek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.Prisma.ModelName = {
  User: 'User',
  Flow: 'Flow',
  FlowStep: 'FlowStep',
  FlowComponent: 'FlowComponent',
  FlowSnapshot: 'FlowSnapshot',
  FlowStepSnapshot: 'FlowStepSnapshot',
  ComponentSnapshot: 'ComponentSnapshot',
  FlowAssignment: 'FlowAssignment',
  UserProgress: 'UserProgress',
  FlowProgress: 'FlowProgress',
  StepProgress: 'StepProgress',
  ComponentProgress: 'ComponentProgress',
  Notification: 'Notification',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  SystemSettings: 'SystemSettings',
  Holiday: 'Holiday'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
