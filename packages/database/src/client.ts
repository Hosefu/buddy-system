/**
 * –ö–ª–∏–µ–Ω—Ç Prisma –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö BuddyBot
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Prisma Client
 * —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, middleware –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
 */

import { PrismaClient } from './generated'
import type { Prisma } from './generated'

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Prisma –≤ development
 * –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ hot reload
 */
const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Prisma Client
 */
export const prisma = globalForPrisma.prisma ?? new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
    {
      emit: 'event', 
      level: 'error',
    },
    {
      emit: 'event',
      level: 'info',
    },
    {
      emit: 'event',
      level: 'warn',
    },
  ],
  errorFormat: 'pretty',
})

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ª–æ–≥ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–æ–ª—å—à–µ 100ms
 */
prisma.$use(async (params, next) => {
  const before = Date.now()
  const result = await next(params)
  const after = Date.now()
  
  const executionTime = after - before
  
  // –õ–æ–≥–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  if (executionTime > 100) {
    console.log(`üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (${executionTime}ms):`, {
      model: params.model,
      action: params.action,
      executionTime: `${executionTime}ms`
    })
  }

  return result
})

/**
 * Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
 * –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª—è–µ—Ç stepsCount –≤ Flow –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ FlowStep
 */
prisma.$use(async (params, next) => {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —ç—Ç–∞–ø–æ–≤ –≤ –ø–æ—Ç–æ–∫–µ
  if (params.model === 'FlowStep' && ['create', 'delete'].includes(params.action)) {
    const result = await next(params)
    
    if (params.action === 'create' && params.args?.data?.flowId) {
      await prisma.flow.update({
        where: { id: params.args.data.flowId },
        data: {
          stepsCount: {
            increment: 1
          }
        }
      })
    }
    
    if (params.action === 'delete' && result?.flowId) {
      await prisma.flow.update({
        where: { id: result.flowId },
        data: {
          stepsCount: {
            decrement: 1
          }
        }
      })
    }
    
    return result
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–∞–ø–µ
  if (params.model === 'FlowComponent' && ['create', 'delete'].includes(params.action)) {
    const result = await next(params)
    
    if (params.action === 'create' && params.args?.data?.stepId) {
      await prisma.flowStep.update({
        where: { id: params.args.data.stepId },
        data: {
          componentsCount: {
            increment: 1
          }
        }
      })
    }
    
    if (params.action === 'delete' && result?.stepId) {
      await prisma.flowStep.update({
        where: { id: result.stepId },
        data: {
          componentsCount: {
            decrement: 1
          }
        }
      })
    }
    
    return result
  }
  
  return next(params)
})

/**
 * Middleware –¥–ª—è –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (soft delete)
 * –í —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
 */
prisma.$use(async (params, next) => {
  // –ò—Å–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å
  const allowHardDelete = ['Notification', 'DeadlineAdjustment']
  
  if (params.action === 'delete' && !allowHardDelete.includes(params.model || '')) {
    // –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
    if (params.model === 'User') {
      params.action = 'update'
      params.args.data = { isActive: false }
    } else if (params.model === 'Flow') {
      params.action = 'update'
      params.args.data = { isActive: false }
    }
  }
  
  return next(params)
})

/**
 * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Prisma
 */
prisma.$on('query', (e: any) => {
  if (process.env.NODE_ENV === 'development') {
    console.log('üìä Query:', e.query)
    console.log('üìù Params:', e.params)
    console.log('‚è±Ô∏è Duration:', `${e.duration}ms`)
  }
})

prisma.$on('error', (e: any) => {
  console.error('‚ùå Prisma Error:', e)
})

prisma.$on('warn', (e: any) => {
  console.warn('‚ö†Ô∏è Prisma Warning:', e)
})

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ development –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

/**
 * –¢–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
export type PrismaClientType = typeof prisma
export type PrismaTransactionClient = Prisma.TransactionClient

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
export async function disconnectPrisma(): Promise<void> {
  await prisma.$disconnect()
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
export async function checkDatabaseConnection(): Promise<boolean> {
  try {
    await prisma.$queryRaw`SELECT 1`
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:', error)
    return false
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ Prisma –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
export * from './generated'
export { Prisma } from './generated'