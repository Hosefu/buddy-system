/**
 * Use Case –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –±–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏
 * —Ç–∏–ø–∞–º–∏ –æ–±—É—á–∞—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Å—Ç–∞—Ç—å–∏, –∑–∞–¥–∞–Ω–∏—è, –∫–≤–∏–∑—ã, –≤–∏–¥–µ–æ).
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
 * - –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
 * - –û–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–æ–≤—ã—Ö —ç—Ç–∞–ø–æ–≤
 * - –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 * - –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
 * 
 * –≠—Ç–æ—Ç Use Case —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç
 * —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
 */

import { FlowAssignmentService } from '../../services/assignment/FlowAssignmentService'
import { UserService } from '../../services/user/UserService'
import { AssignmentWithDetails } from '../../repositories/FlowAssignmentRepository'
import { RepositoryError, RepositoryErrorType } from '../../repositories/base/BaseRepository'
import { ComponentStatus, StepStatus, FlowStatus, AssignmentStatus } from '@buddybot/database'

/**
 * –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */
export enum ComponentAction {
  // –°—Ç–∞—Ç—å–∏
  START_READING = 'START_READING',
  UPDATE_READING_PROGRESS = 'UPDATE_READING_PROGRESS',
  FINISH_READING = 'FINISH_READING',
  
  // –ó–∞–¥–∞–Ω–∏—è
  SUBMIT_ANSWER = 'SUBMIT_ANSWER',
  REQUEST_HINT = 'REQUEST_HINT',
  
  // –ö–≤–∏–∑—ã
  SUBMIT_QUIZ_ANSWER = 'SUBMIT_QUIZ_ANSWER',
  FINISH_QUIZ = 'FINISH_QUIZ',
  
  // –í–∏–¥–µ–æ
  START_VIDEO = 'START_VIDEO',
  UPDATE_VIDEO_PROGRESS = 'UPDATE_VIDEO_PROGRESS',
  FINISH_VIDEO = 'FINISH_VIDEO',
  
  // –û–±—â–∏–µ
  MARK_COMPLETED = 'MARK_COMPLETED',
  RESET_PROGRESS = 'RESET_PROGRESS'
}

/**
 * –ë–∞–∑–æ–≤—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 */
export interface BaseComponentInteractionInput {
  assignmentId: string
  componentId: string
  action: ComponentAction
  userId: string
  timeSpent?: number // –í —Å–µ–∫—É–Ω–¥–∞—Ö
}

/**
 * –î–∞–Ω–Ω—ã–µ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
 */
export interface ReadingInteractionData {
  readingProgress?: number // 0-1, –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  currentPosition?: number // –ü–æ–∑–∏—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  timeSpent?: number
}

/**
 * –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è
 */
export interface TaskInteractionData {
  answer: string
  attempt?: number
}

/**
 * –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–≤–∏–∑—ã
 */
export interface QuizInteractionData {
  questionId: string
  selectedOptionId: string
  timeSpent?: number
}

/**
 * –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ
 */
export interface VideoInteractionData {
  currentTime: number // –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  duration?: number // –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  playbackRate?: number // –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
  watchedSegments?: { start: number; end: number }[] // –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
}

/**
 * –ü–æ–ª–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 */
export interface ComponentInteractionInput extends BaseComponentInteractionInput {
  interactionData?: ReadingInteractionData | TaskInteractionData | QuizInteractionData | VideoInteractionData
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
 */
export interface ComponentInteractionResult {
  success: boolean
  message: string
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  componentProgress: {
    status: ComponentStatus
    data: any
    completedAt?: Date
    isCorrect?: boolean // –î–ª—è –∑–∞–¥–∞–Ω–∏–π –∏ –∫–≤–∏–∑–æ–≤
    score?: number // –î–ª—è –∫–≤–∏–∑–æ–≤
  }
  
  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  unlockedSteps: {
    stepId: string
    title: string
    order: number
  }[]
  
  unlockedComponents: {
    componentId: string
    stepId: string
    type: string
  }[]
  
  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  earnedAchievements: {
    achievementId: string
    title: string
    description: string
  }[]
  
  // –°–ª–µ–¥—É—é—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  nextActions: ComponentAction[]
  
  // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  validationErrors: {
    field: string
    message: string
  }[]
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  assignmentProgress: {
    currentStepOrder: number
    completedSteps: number
    totalSteps: number
    percentage: number
    status: FlowStatus
  }
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export interface ProgressService {
  updateComponentProgress(
    assignmentId: string,
    componentId: string,
    status: ComponentStatus,
    data: any,
    timeSpent?: number
  ): Promise<void>
  
  checkStepCompletion(assignmentId: string, stepId: string): Promise<boolean>
  checkFlowCompletion(assignmentId: string): Promise<boolean>
  getNextAvailableActions(assignmentId: string, componentId: string): Promise<ComponentAction[]>
}

export interface AchievementService {
  checkComponentAchievements(
    userId: string,
    assignmentId: string,
    componentId: string,
    action: ComponentAction,
    result: any
  ): Promise<Array<{ achievementId: string; title: string; description: string }>>
}

export interface NotificationService {
  sendProgressUpdateNotification(
    assignment: AssignmentWithDetails,
    progressUpdate: any
  ): Promise<void>
}

/**
 * Use Case –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
 * 
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—É—á–∞—é—â–∏–º–∏
 * –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
 */
export class InteractWithComponentUseCase {
  constructor(
    private assignmentService: FlowAssignmentService,
    private userService: UserService,
    private progressService: ProgressService,
    private achievementService?: AchievementService,
    private notificationService?: NotificationService
  ) {}

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  async execute(input: ComponentInteractionInput): Promise<ComponentInteractionResult> {
    console.log(`üéÆ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º: ${input.componentId}, –¥–µ–π—Å—Ç–≤–∏–µ: ${input.action}`)

    // 1. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.validateInput(input)

    // 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    const assignment = await this.getAndValidateAssignment(input)

    // 3. –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ —Å–Ω–∞–ø—à–æ—Ç–µ
    const { component, step } = this.findComponentInSnapshot(assignment, input.componentId)

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    this.validateComponentAccess(assignment, step, component)

    // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const interactionResult = await this.processComponentInteraction(
      assignment,
      component,
      input
    )

    // 6. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await this.updateProgress(assignment, component, interactionResult, input)

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const unlocked = await this.checkUnlockedContent(assignment, step)

    // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievements = await this.checkAchievements(
      input.userId,
      assignment,
      component,
      input.action,
      interactionResult
    )

    // 9. –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const nextActions = await this.progressService.getNextAvailableActions(
      input.assignmentId,
      input.componentId
    )

    // 10. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const updatedAssignment = await this.assignmentService.getAssignmentWithDetailsOrThrow(input.assignmentId)

    // 11. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await this.sendProgressNotifications(updatedAssignment, interactionResult, unlocked, achievements)

    const result: ComponentInteractionResult = {
      success: true,
      message: this.getSuccessMessage(input.action, interactionResult),
      componentProgress: {
        status: interactionResult.newStatus,
        data: interactionResult.progressData,
        completedAt: interactionResult.completedAt,
        isCorrect: interactionResult.isCorrect,
        score: interactionResult.score
      },
      unlockedSteps: unlocked.steps,
      unlockedComponents: unlocked.components,
      earnedAchievements: achievements,
      nextActions,
      validationErrors: [],
      assignmentProgress: {
        currentStepOrder: updatedAssignment.flowProgress?.currentStepOrder || 1,
        completedSteps: updatedAssignment.flowProgress?.completedSteps || 0,
        totalSteps: updatedAssignment.flowProgress?.totalSteps || 0,
        percentage: updatedAssignment.flowProgress?.percentage || 0,
        status: updatedAssignment.flowProgress?.status as FlowStatus || FlowStatus.NOT_STARTED
      }
    }

    console.log(`‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${input.action} –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ ${input.componentId}`)

    return result
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private async validateInput(input: ComponentInteractionInput): Promise<void> {
    if (!input.assignmentId || !input.componentId || !input.userId) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è'
      )
    }

    if (!Object.values(ComponentAction).includes(input.action)) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
      )
    }

    if (input.timeSpent !== undefined && input.timeSpent < 0) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–í—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'
      )
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * 
   * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
   */
  private async getAndValidateAssignment(input: ComponentInteractionInput): Promise<AssignmentWithDetails> {
    const assignment = await this.assignmentService.getAssignmentWithDetailsOrThrow(input.assignmentId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (assignment.userId !== input.userId) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if (assignment.status !== AssignmentStatus.IN_PROGRESS) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω
    if (assignment.isOverdue) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–î–µ–¥–ª–∞–π–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫'
      )
    }

    return assignment
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤ —Å–Ω–∞–ø—à–æ—Ç–µ –ø–æ—Ç–æ–∫–∞
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param componentId - ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @returns –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ —ç—Ç–∞–ø
   */
  private findComponentInSnapshot(assignment: AssignmentWithDetails, componentId: string) {
    for (const step of assignment.flowSnapshot.steps) {
      for (const component of step.components) {
        if (component.id === componentId) {
          return { component, step }
        }
      }
    }

    throw new RepositoryError(
      RepositoryErrorType.NOT_FOUND,
      '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–Ω–∞–ø—à–æ—Ç–µ –ø–æ—Ç–æ–∫–∞'
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param step - —ç—Ç–∞–ø
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   */
  private validateComponentAccess(
    assignment: AssignmentWithDetails,
    step: any,
    component: any
  ): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–∞–ø —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    const currentStepOrder = assignment.flowProgress?.currentStepOrder || 1
    if (step.order > currentStepOrder) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–≠—Ç–∞–ø –µ—â–µ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
      )
    }

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    // if (component.dependencies && !this.areDependenciesMet(assignment, component.dependencies)) {
    //   throw new RepositoryError(
    //     RepositoryErrorType.VALIDATION_ERROR,
    //     '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'
    //   )
    // }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private async processComponentInteraction(
    assignment: AssignmentWithDetails,
    component: any,
    input: ComponentInteractionInput
  ): Promise<any> {
    switch (component.type) {
      case 'article':
        return this.processArticleInteraction(component, input)
      case 'task':
        return this.processTaskInteraction(component, input)
      case 'quiz':
        return this.processQuizInteraction(component, input)
      case 'video':
        return this.processVideoInteraction(component, input)
      default:
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${component.type}`
        )
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–∞—Ç—å–µ–π
   * 
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏
   * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private processArticleInteraction(component: any, input: ComponentInteractionInput): any {
    const data = input.interactionData as ReadingInteractionData

    switch (input.action) {
      case ComponentAction.START_READING:
        return {
          newStatus: ComponentStatus.IN_PROGRESS,
          progressData: {
            readingProgress: 0,
            startedAt: new Date()
          }
        }

      case ComponentAction.UPDATE_READING_PROGRESS:
        if (!data?.readingProgress) {
          throw new RepositoryError(
            RepositoryErrorType.VALIDATION_ERROR,
            '–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è'
          )
        }

        return {
          newStatus: ComponentStatus.IN_PROGRESS,
          progressData: {
            readingProgress: Math.min(data.readingProgress, 1),
            lastUpdated: new Date()
          }
        }

      case ComponentAction.FINISH_READING:
        return {
          newStatus: ComponentStatus.COMPLETED,
          progressData: {
            readingProgress: 1,
            completedAt: new Date()
          },
          completedAt: new Date()
        }

      default:
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          `–î–µ–π—Å—Ç–≤–∏–µ ${input.action} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ç–µ–π`
        )
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
   * 
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏—è
   * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private processTaskInteraction(component: any, input: ComponentInteractionInput): any {
    const data = input.interactionData as TaskInteractionData

    switch (input.action) {
      case ComponentAction.SUBMIT_ANSWER:
        if (!data?.answer) {
          throw new RepositoryError(
            RepositoryErrorType.VALIDATION_ERROR,
            '–ù–µ —É–∫–∞–∑–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ'
          )
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (–≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ)
        const correctAnswer = component.data.codeWord?.toLowerCase()
        const userAnswer = data.answer.toLowerCase().trim()
        const isCorrect = correctAnswer === userAnswer

        return {
          newStatus: isCorrect ? ComponentStatus.COMPLETED : ComponentStatus.IN_PROGRESS,
          progressData: {
            attempts: (data.attempt || 0) + 1,
            lastAnswer: data.answer,
            isCorrect,
            submittedAt: new Date()
          },
          completedAt: isCorrect ? new Date() : undefined,
          isCorrect
        }

      case ComponentAction.REQUEST_HINT:
        return {
          newStatus: ComponentStatus.IN_PROGRESS,
          progressData: {
            hintsUsed: true,
            hintRequestedAt: new Date()
          },
          hint: component.data.hint
        }

      default:
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          `–î–µ–π—Å—Ç–≤–∏–µ ${input.action} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–π`
        )
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–≤–∏–∑–æ–º
   * 
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–≤–∏–∑–∞
   * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private processQuizInteraction(component: any, input: ComponentInteractionInput): any {
    const data = input.interactionData as QuizInteractionData

    switch (input.action) {
      case ComponentAction.SUBMIT_QUIZ_ANSWER:
        if (!data?.questionId || !data?.selectedOptionId) {
          throw new RepositoryError(
            RepositoryErrorType.VALIDATION_ERROR,
            '–ù–µ —É–∫–∞–∑–∞–Ω –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç –∫–≤–∏–∑–∞'
          )
        }

        // –ù–∞—Ö–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const question = component.data.questions.find((q: any) => q.id === data.questionId)
        if (!question) {
          throw new RepositoryError(
            RepositoryErrorType.NOT_FOUND,
            '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
          )
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        const selectedOption = question.options.find((opt: any) => opt.id === data.selectedOptionId)
        if (!selectedOption) {
          throw new RepositoryError(
            RepositoryErrorType.NOT_FOUND,
            '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'
          )
        }

        const isCorrect = selectedOption.isCorrect

        return {
          newStatus: ComponentStatus.IN_PROGRESS, // –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
          progressData: {
            answers: [
              {
                questionId: data.questionId,
                selectedOptionId: data.selectedOptionId,
                isCorrect,
                answeredAt: new Date()
              }
            ]
          },
          isCorrect
        }

      case ComponentAction.FINISH_QUIZ:
        // TODO: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∫–≤–∏–∑–∞
        const totalQuestions = component.data.questions.length
        // const correctAnswers = currentAnswers.filter(a => a.isCorrect).length
        // const score = (correctAnswers / totalQuestions) * 100

        return {
          newStatus: ComponentStatus.COMPLETED,
          progressData: {
            completedAt: new Date(),
            finalScore: 0 // TODO: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç
          },
          completedAt: new Date(),
          score: 0
        }

      default:
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          `–î–µ–π—Å—Ç–≤–∏–µ ${input.action} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–≤–∏–∑–æ–≤`
        )
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–∏–¥–µ–æ
   * 
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–¥–µ–æ
   * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private processVideoInteraction(component: any, input: ComponentInteractionInput): any {
    const data = input.interactionData as VideoInteractionData

    switch (input.action) {
      case ComponentAction.START_VIDEO:
        return {
          newStatus: ComponentStatus.IN_PROGRESS,
          progressData: {
            startedAt: new Date(),
            currentTime: 0,
            watchedSegments: []
          }
        }

      case ComponentAction.UPDATE_VIDEO_PROGRESS:
        if (data?.currentTime === undefined) {
          throw new RepositoryError(
            RepositoryErrorType.VALIDATION_ERROR,
            '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–∏–¥–µ–æ'
          )
        }

        return {
          newStatus: ComponentStatus.IN_PROGRESS,
          progressData: {
            currentTime: data.currentTime,
            duration: data.duration,
            watchedSegments: data.watchedSegments || [],
            lastUpdated: new Date()
          }
        }

      case ComponentAction.FINISH_VIDEO:
        return {
          newStatus: ComponentStatus.COMPLETED,
          progressData: {
            completedAt: new Date(),
            finalPosition: data?.currentTime || 0,
            watchedToEnd: true
          },
          completedAt: new Date()
        }

      default:
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          `–î–µ–π—Å—Ç–≤–∏–µ ${input.action} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤–∏–¥–µ–æ`
        )
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–∏—Å—Ç–µ–º–µ
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   * @param result - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  private async updateProgress(
    assignment: AssignmentWithDetails,
    component: any,
    result: any,
    input: ComponentInteractionInput
  ): Promise<void> {
    await this.progressService.updateComponentProgress(
      assignment.id,
      component.id,
      result.newStatus,
      result.progressData,
      input.timeSpent
    )

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    if (input.timeSpent) {
      await this.assignmentService.addTimeSpent(assignment.id, input.timeSpent)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param currentStep - —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø
   * @returns —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   */
  private async checkUnlockedContent(assignment: AssignmentWithDetails, currentStep: any) {
    const unlockedSteps: any[] = []
    const unlockedComponents: any[] = []

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    const isStepCompleted = await this.progressService.checkStepCompletion(
      assignment.id,
      currentStep.id
    )

    if (isStepCompleted) {
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
      const nextStep = assignment.flowSnapshot.steps.find(
        s => s.order === currentStep.order + 1
      )

      if (nextStep) {
        unlockedSteps.push({
          stepId: nextStep.id,
          title: nextStep.title,
          order: nextStep.order
        })

        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
        for (const component of nextStep.components) {
          unlockedComponents.push({
            componentId: component.id,
            stepId: nextStep.id,
            type: component.type
          })
        }
      }
    }

    return { steps: unlockedSteps, components: unlockedComponents }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
   * @param action - –¥–µ–π—Å—Ç–≤–∏–µ
   * @param result - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   * @returns –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  private async checkAchievements(
    userId: string,
    assignment: AssignmentWithDetails,
    component: any,
    action: ComponentAction,
    result: any
  ): Promise<Array<{ achievementId: string; title: string; description: string }>> {
    if (!this.achievementService) {
      return []
    }

    try {
      return await this.achievementService.checkComponentAchievements(
        userId,
        assignment.id,
        component.id,
        action,
        result
      )
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error.message)
      return []
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param result - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   * @param unlocked - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   * @param achievements - –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
   */
  private async sendProgressNotifications(
    assignment: AssignmentWithDetails,
    result: any,
    unlocked: any,
    achievements: any[]
  ): Promise<void> {
    if (!this.notificationService) {
      return
    }

    try {
      await this.notificationService.sendProgressUpdateNotification(assignment, {
        result,
        unlocked,
        achievements
      })
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:', error.message)
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   * 
   * @param action - –¥–µ–π—Å—Ç–≤–∏–µ
   * @param result - —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   * @returns —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private getSuccessMessage(action: ComponentAction, result: any): string {
    switch (action) {
      case ComponentAction.START_READING:
        return '–ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞—á–∞—Ç–æ'
      case ComponentAction.FINISH_READING:
        return '–°—Ç–∞—Ç—å—è –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      case ComponentAction.SUBMIT_ANSWER:
        return result.isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
      case ComponentAction.SUBMIT_QUIZ_ANSWER:
        return result.isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'
      case ComponentAction.FINISH_QUIZ:
        return '–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      case ComponentAction.FINISH_VIDEO:
        return '–í–∏–¥–µ–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é'
      default:
        return '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'
    }
  }
}