/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * 
 * –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è:
 * - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –ü–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –í–∞–ª–∏–¥–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
 * 
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –º–µ–∂–¥—É GraphQL —Ä–µ–∑–æ–ª–≤–µ—Ä–∞–º–∏
 * –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª.
 */

import { Role } from '@buddybot/database'
import { UserRepository, UserFilter, UserStats } from '../../repositories/UserRepository'
import { User, CreateUserInput, UpdateUserInput } from '../../entities/User'
import { PaginationParams, RepositoryError, RepositoryErrorType } from '../../repositories/base/BaseRepository'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram
 */
export interface RegisterUserInput {
  telegramId: string
  name: string
  telegramUsername?: string
  avatarUrl?: string
  initialRoles?: Role[]
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export interface UpdateUserRolesInput {
  userId: string
  roles: Role[]
  updatedBy: string // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export interface UserSearchResult {
  users: User[]
  pagination: {
    total: number
    page: number
    limit: number
    hasNextPage: boolean
    hasPreviousPage: boolean
  }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
 */
export interface FindBuddiesParams {
  excludeUserId?: string
  search?: string
  departmentId?: string
  minExperience?: number
  maxAssignments?: number
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
 * –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
 */
export class UserService {
  constructor(
    private userRepository: UserRepository
  ) {}

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async registerUser(input: RegisterUserInput): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingUser = await this.userRepository.findByTelegramId(input.telegramId)
    if (existingUser) {
      throw new RepositoryError(
        RepositoryErrorType.DUPLICATE,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å Telegram username –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (input.telegramUsername) {
      const existingUsername = await this.userRepository.findByTelegramUsername(input.telegramUsername)
      if (existingUsername) {
        throw new RepositoryError(
          RepositoryErrorType.DUPLICATE,
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        )
      }
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createUserData: CreateUserInput = {
      telegramId: input.telegramId,
      name: input.name,
      telegramUsername: input.telegramUsername,
      avatarUrl: input.avatarUrl,
      roles: input.initialRoles || [Role.USER]
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ ADMIN –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª–∏ ADMIN)
    if (createUserData.roles.includes(Role.ADMIN)) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      )
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userRepository.create(createUserData)

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    console.log(`‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.telegramId})`)

    return user
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ
   * 
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userData - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)
   * @returns –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async findOrCreateUser(telegramId: string, userData?: RegisterUserInput): Promise<User> {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await this.userRepository.findByTelegramId(telegramId)
    if (existingUser) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      await this.userRepository.updateLastLogin(existingUser.id)
      return existingUser
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    if (userData) {
      return this.registerUser(userData)
    }

    throw new RepositoryError(
      RepositoryErrorType.NOT_FOUND,
      '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã'
    )
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ null
   */
  async getUserById(userId: string): Promise<User | null> {
    return this.userRepository.findById(userId)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async getUserByIdOrThrow(userId: string): Promise<User> {
    return this.userRepository.findByIdOrThrow(userId)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
   * 
   * @param telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ null
   */
  async getUserByTelegramId(telegramId: string): Promise<User | null> {
    return this.userRepository.findByTelegramId(telegramId)
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param updateData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @param updatedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–æ—Å–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async updateUserProfile(
    userId: string,
    updateData: UpdateUserInput,
    updatedBy: string
  ): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    await this.validateUpdatePermissions(userId, updatedBy)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å Telegram username –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    if (updateData.telegramUsername) {
      const existingUser = await this.userRepository.findByTelegramUsername(updateData.telegramUsername)
      if (existingUser && existingUser.id !== userId) {
        throw new RepositoryError(
          RepositoryErrorType.DUPLICATE,
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        )
      }
    }

    const updatedUser = await this.userRepository.update(userId, updateData)

    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${updatedUser.name} (–∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${updatedBy})`)

    return updatedUser
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
   * @returns –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
   */
  async updateUserRoles(input: UpdateUserRolesInput): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    const updater = await this.getUserByIdOrThrow(input.updatedBy)
    if (!updater.hasRole(Role.ADMIN)) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const targetUser = await this.getUserByIdOrThrow(input.userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–±–∏—Ä–∞–µ—Ç —Å–µ–±–µ —Ä–æ–ª—å ADMIN, –µ—Å–ª–∏ –æ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥–º–∏–Ω
    if (input.updatedBy === input.userId && 
        targetUser.hasRole(Role.ADMIN) && 
        !input.roles.includes(Role.ADMIN)) {
      
      const adminCount = await this.getAdminCount()
      if (adminCount <= 1) {
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ'
        )
      }
    }

    const updatedUser = await this.userRepository.updateRoles(input.userId, input.roles)

    console.log(`üîê –ò–∑–º–µ–Ω–µ–Ω—ã —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${updatedUser.name} -> ${input.roles.join(', ')} (–∏–∑–º–µ–Ω–µ–Ω–æ ${updater.name})`)

    return updatedUser
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param deactivatedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç
   * @returns –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async deactivateUser(userId: string, deactivatedBy: string): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
    const deactivator = await this.getUserByIdOrThrow(deactivatedBy)
    if (!deactivator.hasRole(Role.ADMIN)) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      )
    }

    // –ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (userId === deactivatedBy) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const targetUser = await this.getUserByIdOrThrow(userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥–º–∏–Ω
    if (targetUser.hasRole(Role.ADMIN)) {
      const adminCount = await this.getAdminCount()
      if (adminCount <= 1) {
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          '–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ'
        )
      }
    }

    const deactivatedUser = await this.userRepository.deactivate(userId)

    console.log(`‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${deactivatedUser.name} (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${deactivator.name})`)

    return deactivatedUser
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param activatedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç
   * @returns –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   */
  async activateUser(userId: string, activatedBy: string): Promise<User> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    const activator = await this.getUserByIdOrThrow(activatedBy)
    if (!activator.hasRole(Role.ADMIN)) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      )
    }

    const activatedUser = await this.userRepository.activate(userId)

    console.log(`‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${activatedUser.name} (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${activator.name})`)

    return activatedUser
  }

  /**
   * –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
   * 
   * @param searchQuery - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param filter - —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
   */
  async searchUsers(
    searchQuery?: string,
    filter?: UserFilter,
    pagination?: PaginationParams
  ): Promise<UserSearchResult> {
    const searchFilter: UserFilter = {
      ...filter,
      ...(searchQuery && {
        search: {
          query: searchQuery,
          fields: ['name', 'telegramUsername']
        }
      })
    }

    const result = await this.userRepository.search(
      searchQuery || '',
      searchFilter,
      pagination
    )

    return {
      users: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
   * 
   * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
   */
  async findPotentialBuddies(
    params: FindBuddiesParams = {},
    pagination?: PaginationParams
  ): Promise<UserSearchResult> {
    const result = await this.userRepository.findPotentialBuddies(
      params.excludeUserId,
      params.search,
      pagination
    )

    return {
      users: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
   * 
   * @param buddyId - ID –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
   * @param filter - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö
   */
  async getBuddyAssignees(
    buddyId: string,
    filter?: UserFilter,
    pagination?: PaginationParams
  ): Promise<UserSearchResult> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º
    const buddy = await this.getUserByIdOrThrow(buddyId)
    if (!buddy.canBeBuddy()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º'
      )
    }

    const result = await this.userRepository.findBuddyAssignees(
      buddyId,
      filter,
      pagination
    )

    return {
      users: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
   * 
   * @param roles - —Ä–æ–ª–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param filter - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
   */
  async getUsersByRoles(
    roles: Role[],
    filter?: Omit<UserFilter, 'hasRole'>,
    pagination?: PaginationParams
  ): Promise<UserSearchResult> {
    const result = await this.userRepository.findByRoles(roles, filter, pagination)

    return {
      users: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * 
   * @returns —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async getUserStats(): Promise<UserStats> {
    return this.userRepository.getStats()
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   * 
   * @param daysSinceLastLogin - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
   */
  async findInactiveUsers(
    daysSinceLastLogin: number = 30,
    pagination?: PaginationParams
  ): Promise<UserSearchResult> {
    const result = await this.userRepository.findInactiveUsers(daysSinceLastLogin, pagination)

    return {
      users: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ
   * 
   * @param targetUserId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   * @param editorId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
   */
  private async validateUpdatePermissions(targetUserId: string, editorId: string): Promise<void> {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    if (targetUserId === editorId) {
      return
    }

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    const editor = await this.getUserByIdOrThrow(editorId)
    if (editor.hasRole(Role.ADMIN)) {
      return
    }

    throw new RepositoryError(
      RepositoryErrorType.VALIDATION_ERROR,
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    )
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
   * 
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
   */
  private async getAdminCount(): Promise<number> {
    const result = await this.userRepository.findByRoles([Role.ADMIN], { isActive: true })
    return result.total
  }
}