/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
 * 
 * –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è:
 * - –°–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞–º–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 * - –í–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ç–æ–∫–æ–≤
 * - –ö–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ç–æ–∫–∞–º
 * - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏ –ø–æ—Ç–æ–∫–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
 * –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.
 */

import { Role } from '@buddybot/database'
import { FlowRepository, FlowFilter, FlowStats, FlowWithDetails, CreateFlowStepInput, CreateFlowStepComponentInput } from '../../repositories/FlowRepository'
import { UserRepository } from '../../repositories/UserRepository'
import { Flow, CreateFlowInput, UpdateFlowInput, FlowSettings } from '../../entities/Flow'
import { PaginationParams, RepositoryError, RepositoryErrorType } from '../../repositories/base/BaseRepository'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export interface CreateCompleteFlowInput {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
  title: string
  description: string
  defaultDeadlineDays?: number
  settings?: Partial<FlowSettings>
  
  // –≠—Ç–∞–ø—ã –ø–æ—Ç–æ–∫–∞
  steps: CreateFlowStepWithComponentsInput[]
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  createdBy: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ø–∞ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */
export interface CreateFlowStepWithComponentsInput extends CreateFlowStepInput {
  components: CreateFlowStepComponentInput[]
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
 */
export interface UpdateCompleteFlowInput {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∞
  title?: string
  description?: string
  defaultDeadlineDays?: number
  settings?: Partial<FlowSettings>
  isActive?: boolean
  
  // –≠—Ç–∞–ø—ã (–ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞)
  steps?: CreateFlowStepWithComponentsInput[]
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  updatedBy: string
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
 */
export interface FlowSearchResult {
  flows: Flow[]
  pagination: {
    total: number
    page: number
    limit: number
    hasNextPage: boolean
    hasPreviousPage: boolean
  }
}

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export interface ComponentValidationParams {
  type: string
  typeVersion: string
  data: any
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞
 */
export interface FlowValidationResult {
  isValid: boolean
  errors: string[]
  warnings: string[]
  readyForAssignment: boolean
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ—Ç–æ–∫–∞–º–∏.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
 * –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
 */
export class FlowService {
  constructor(
    private flowRepository: FlowRepository,
    private userRepository: UserRepository
  ) {}

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
   * @returns —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
   */
  async createFlow(input: CreateFlowInput): Promise<Flow> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    await this.validateCreatorPermissions(input.createdById)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    await this.validateFlowTitleUniqueness(input.title, input.createdById)

    const flow = await this.flowRepository.create(input)

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: "${flow.title}" (—Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${input.createdById})`)

    return flow
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ —Å–æ –≤—Å–µ–º–∏ —ç—Ç–∞–ø–∞–º–∏ –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
   * @returns —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏
   */
  async createCompleteFlow(input: CreateCompleteFlowInput): Promise<FlowWithDetails> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    await this.validateCreatorPermissions(input.createdBy)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    await this.validateFlowTitleUniqueness(input.title, input.createdBy)

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ—Ç–æ–∫–∞
    await this.validateFlowStructure(input.steps)

    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —Å —ç—Ç–∞–ø–∞–º–∏
    const flowData: CreateFlowInput = {
      title: input.title,
      description: input.description,
      createdById: input.createdBy,
      defaultDeadlineDays: input.defaultDeadlineDays,
      settings: input.settings
    }

    const flow = await this.flowRepository.createWithSteps(flowData, input.steps)

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    for (let i = 0; i < input.steps.length; i++) {
      const stepInput = input.steps[i]
      const createdStep = flow.steps[i]

      for (const componentInput of stepInput.components) {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.validateComponentData({
          type: componentInput.type,
          typeVersion: componentInput.typeVersion || '1.0.0',
          data: componentInput.data
        })

        await this.flowRepository.createStepComponent(createdStep.id, componentInput)
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    const completeFlow = await this.flowRepository.findByIdWithDetails(flow.id)
    if (!completeFlow) {
      throw new RepositoryError(
        RepositoryErrorType.NOT_FOUND,
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫'
      )
    }

    console.log(`üéØ –°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫: "${completeFlow.title}" —Å ${completeFlow.steps.length} —ç—Ç–∞–ø–∞–º–∏`)

    return completeFlow
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫ –æ–±—É—á–µ–Ω–∏—è
   * 
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
   */
  async updateFlow(flowId: string, input: UpdateFlowInput): Promise<Flow> {
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫
    const existingFlow = await this.flowRepository.findByIdOrThrow(flowId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await this.validateEditPermissions(existingFlow.createdById, input.updatedBy || existingFlow.createdById)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è)
    if (input.title && input.title !== existingFlow.title) {
      await this.validateFlowTitleUniqueness(input.title, existingFlow.createdById, flowId)
    }

    const updatedFlow = await this.flowRepository.update(flowId, input)

    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫: "${updatedFlow.title}" (–≤–µ—Ä—Å–∏—è ${updatedFlow.version})`)

    return updatedFlow
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫ –ø–æ ID
   * 
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   * @param includeDetails - –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns –ø–æ—Ç–æ–∫ –∏–ª–∏ null
   */
  async getFlowById(flowId: string, includeDetails: boolean = false): Promise<Flow | FlowWithDetails | null> {
    if (includeDetails) {
      return this.flowRepository.findByIdWithDetails(flowId)
    }
    return this.flowRepository.findById(flowId)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫ –ø–æ ID –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
   * 
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   * @param includeDetails - –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   * @returns –ø–æ—Ç–æ–∫
   */
  async getFlowByIdOrThrow(flowId: string, includeDetails: boolean = false): Promise<Flow | FlowWithDetails> {
    if (includeDetails) {
      const flow = await this.flowRepository.findByIdWithDetails(flowId)
      if (!flow) {
        throw new RepositoryError(RepositoryErrorType.NOT_FOUND, '–ü–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      return flow
    }
    return this.flowRepository.findByIdOrThrow(flowId)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param filter - —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
   */
  async getActiveFlowsForAssignment(
    filter?: Omit<FlowFilter, 'isActive'>,
    pagination?: PaginationParams
  ): Promise<FlowSearchResult> {
    const result = await this.flowRepository.findActiveForAssignment(filter, pagination)

    return {
      flows: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
   * 
   * @param createdById - ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
   * @param filter - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –ø–æ—Ç–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getFlowsByCreator(
    createdById: string,
    filter?: Omit<FlowFilter, 'createdById'>,
    pagination?: PaginationParams
  ): Promise<FlowSearchResult> {
    const result = await this.flowRepository.findByCreator(createdById, filter, pagination)

    return {
      flows: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   * @param activatedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç
   * @returns –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
   */
  async activateFlow(flowId: string, activatedBy: string): Promise<Flow> {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ç–æ–∫ —Å –¥–µ—Ç–∞–ª—è–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const flow = await this.getFlowByIdOrThrow(flowId, true) as FlowWithDetails

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    await this.validateEditPermissions(flow.createdById, activatedBy)

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const validation = await this.validateFlowForActivation(flow)
    if (!validation.isValid) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        `–ü–æ—Ç–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${validation.errors.join(', ')}`
      )
    }

    const updatedFlow = await this.flowRepository.update(flowId, { isActive: true })

    console.log(`üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Ç–æ–∫: "${updatedFlow.title}" (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${activatedBy})`)

    return updatedFlow
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫
   * 
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   * @param deactivatedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç
   * @returns –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
   */
  async deactivateFlow(flowId: string, deactivatedBy: string): Promise<Flow> {
    const flow = await this.flowRepository.findByIdOrThrow(flowId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
    await this.validateEditPermissions(flow.createdById, deactivatedBy)

    const updatedFlow = await this.flowRepository.update(flowId, { isActive: false })

    console.log(`‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Ç–æ–∫: "${updatedFlow.title}" (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${deactivatedBy})`)

    return updatedFlow
  }

  /**
   * –î—É–±–ª–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫
   * 
   * @param sourceFlowId - ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
   * @param newTitle - –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
   * @param createdBy - ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–ø–∏–∏
   * @returns —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫
   */
  async duplicateFlow(
    sourceFlowId: string,
    newTitle: string,
    createdBy: string
  ): Promise<FlowWithDetails> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
    await this.validateCreatorPermissions(createdBy)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    const sourceFlow = await this.flowRepository.findByIdOrThrow(sourceFlowId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    await this.validateFlowTitleUniqueness(newTitle, createdBy)

    const duplicatedFlow = await this.flowRepository.duplicate(sourceFlowId, newTitle, createdBy)

    console.log(`üìã –î—É–±–ª–∏—Ä–æ–≤–∞–Ω –ø–æ—Ç–æ–∫: "${sourceFlow.title}" -> "${newTitle}" (—Å–æ–∑–¥–∞–Ω–æ ${createdBy})`)

    return duplicatedFlow
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ø–æ—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π)
   * 
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   * @param deletedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç
   */
  async deleteFlow(flowId: string, deletedBy: string): Promise<void> {
    const flow = await this.flowRepository.findByIdOrThrow(flowId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    await this.validateEditPermissions(flow.createdById, deletedBy)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ç–æ–∫ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ FlowAssignmentRepository
    // const hasAssignments = await this.flowAssignmentRepository.hasAssignmentsByFlowId(flowId)
    // if (hasAssignments) {
    //   throw new RepositoryError(
    //     RepositoryErrorType.VALIDATION_ERROR,
    //     '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Ç–æ–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
    //   )
    // }

    await this.flowRepository.delete(flowId)

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ—Ç–æ–∫: "${flow.title}" (—É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${deletedBy})`)
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞
   * 
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   * @param settings - –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param updatedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async updateFlowSettings(
    flowId: string,
    settings: Partial<FlowSettings>,
    updatedBy: string
  ): Promise<FlowSettings> {
    const flow = await this.flowRepository.findByIdOrThrow(flowId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await this.validateEditPermissions(flow.createdById, updatedBy)

    const updatedSettings = await this.flowRepository.updateSettings(flowId, settings)

    console.log(`‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞: "${flow.title}"`)

    return updatedSettings
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é
   * 
   * @param flow - –ø–æ—Ç–æ–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  async validateFlowForActivation(flow: FlowWithDetails): Promise<FlowValidationResult> {
    const errors: string[] = []
    const warnings: string[] = []

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ç–∞–ø–æ–≤
    if (flow.steps.length === 0) {
      errors.push('–ü–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç—Ç–∞–ø')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø
    for (const step of flow.steps) {
      if (step.components.length === 0) {
        warnings.push(`–≠—Ç–∞–ø "${step.title}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
      if (step.isRequired && step.components.length === 0) {
        errors.push(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø "${step.title}" –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç`)
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      for (const component of step.components) {
        try {
          this.validateComponentData({
            type: component.type,
            typeVersion: component.typeVersion,
            data: component.data
          })
        } catch (error) {
          errors.push(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —ç—Ç–∞–ø–∞ "${step.title}": ${error.message}`)
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–∞
    if (flow.settings) {
      try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ –¥–æ–º–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
        const flowEntity = new Flow(
          flow.id,
          flow.title,
          flow.description,
          flow.isActive,
          flow.version,
          flow.createdAt,
          flow.updatedAt,
          flow.defaultDeadlineDays,
          flow.createdById,
          flow.stepsCount,
          flow.settings
        )
      } catch (error) {
        errors.push(`–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ—Ç–æ–∫–∞: ${error.message}`)
      }
    }

    const isValid = errors.length === 0
    const readyForAssignment = isValid && flow.isActive

    return {
      isValid,
      errors,
      warnings,
      readyForAssignment
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ–∫–æ–≤
   * 
   * @returns —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
   */
  async getFlowStats(): Promise<FlowStats> {
    return this.flowRepository.getStats()
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ—Ç–æ–∫–æ–≤
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async validateCreatorPermissions(userId: string): Promise<void> {
    const user = await this.userRepository.findByIdOrThrow(userId)
    
    if (!user.canCreateFlows()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è'
      )
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
   * 
   * @param creatorId - ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–æ—Ç–æ–∫–∞
   * @param editorId - ID —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
   */
  private async validateEditPermissions(creatorId: string, editorId: string): Promise<void> {
    // –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—Ç–æ–∫
    if (creatorId === editorId) {
      return
    }

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –ø–æ—Ç–æ–∫–∏
    const editor = await this.userRepository.findByIdOrThrow(editorId)
    if (editor.hasRole(Role.ADMIN)) {
      return
    }

    throw new RepositoryError(
      RepositoryErrorType.VALIDATION_ERROR,
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞'
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
   * 
   * @param title - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
   * @param createdById - ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
   * @param excludeFlowId - ID –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
   */
  private async validateFlowTitleUniqueness(
    title: string,
    createdById: string,
    excludeFlowId?: string
  ): Promise<void> {
    const existingFlows = await this.flowRepository.findByCreator(createdById, {
      search: {
        query: title,
        fields: ['title']
      }
    })

    const duplicateFlow = existingFlows.data.find(flow => 
      flow.title.toLowerCase() === title.toLowerCase() &&
      flow.id !== excludeFlowId
    )

    if (duplicateFlow) {
      throw new RepositoryError(
        RepositoryErrorType.DUPLICATE,
        '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—Ç–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º'
      )
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç—Ç–∞–ø–æ–≤ –ø–æ—Ç–æ–∫–∞
   * 
   * @param steps - —ç—Ç–∞–ø—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private async validateFlowStructure(steps: CreateFlowStepWithComponentsInput[]): Promise<void> {
    if (steps.length === 0) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ü–æ—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç—Ç–∞–ø'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —ç—Ç–∞–ø–æ–≤
    const orders = steps.map(step => step.order).sort((a, b) => a - b)
    for (let i = 0; i < orders.length; i++) {
      if (orders[i] !== i + 1) {
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          '–ü–æ—Ä—è–¥–æ–∫ —ç—Ç–∞–ø–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–∞—á–∏–Ω–∞—è —Å 1'
        )
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —ç—Ç–∞–ø–æ–≤
    const titles = steps.map(step => step.title.toLowerCase())
    const uniqueTitles = new Set(titles)
    if (titles.length !== uniqueTitles.size) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏'
      )
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * 
   * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private validateComponentData(params: ComponentValidationParams): void {
    const { type, data } = params

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    if (!data || typeof data !== 'object') {
      throw new Error('–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º')
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    switch (type) {
      case 'article':
        this.validateArticleComponent(data)
        break
      case 'task':
        this.validateTaskComponent(data)
        break
      case 'quiz':
        this.validateQuizComponent(data)
        break
      case 'video':
        this.validateVideoComponent(data)
        break
      default:
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (!data.title) {
          throw new Error('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
        }
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ "—Å—Ç–∞—Ç—å—è"
   */
  private validateArticleComponent(data: any): void {
    if (!data.title?.trim()) {
      throw new Error('–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    }
    if (!data.content?.trim()) {
      throw new Error('–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ')
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ "–∑–∞–¥–∞–Ω–∏–µ"
   */
  private validateTaskComponent(data: any): void {
    if (!data.title?.trim()) {
      throw new Error('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    }
    if (!data.description?.trim()) {
      throw new Error('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
    }
    if (!data.codeWord?.trim()) {
      throw new Error('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏')
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ "–∫–≤–∏–∑"
   */
  private validateQuizComponent(data: any): void {
    if (!data.title?.trim()) {
      throw new Error('–ö–≤–∏–∑ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    }
    if (!Array.isArray(data.questions) || data.questions.length === 0) {
      throw new Error('–ö–≤–∏–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å')
    }

    data.questions.forEach((question: any, index: number) => {
      if (!question.text?.trim()) {
        throw new Error(`–í–æ–ø—Ä–æ—Å ${index + 1} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–µ–∫—Å—Ç`)
      }
      if (!Array.isArray(question.options) || question.options.length < 2) {
        throw new Error(`–í–æ–ø—Ä–æ—Å ${index + 1} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞`)
      }
      
      const correctOptions = question.options.filter((opt: any) => opt.isCorrect)
      if (correctOptions.length === 0) {
        throw new Error(`–í–æ–ø—Ä–æ—Å ${index + 1} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç`)
      }
    })
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∏–ø–∞ "–≤–∏–¥–µ–æ"
   */
  private validateVideoComponent(data: any): void {
    if (!data.title?.trim()) {
      throw new Error('–í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ')
    }
    if (!data.url?.trim()) {
      throw new Error('–í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å —Å—Å—ã–ª–∫—É')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç URL
    try {
      new URL(data.url)
    } catch {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ')
    }
  }
}