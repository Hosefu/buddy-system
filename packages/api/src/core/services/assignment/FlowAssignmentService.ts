/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Ç–æ–∫–æ–≤ –æ–±—É—á–µ–Ω–∏—è
 * 
 * –°–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è:
 * - –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
 * - –ö–æ–Ω—Ç—Ä–æ–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
 * - –†–∞–±–æ—Ç—ã —Å –ø–∞—É–∑–∞–º–∏ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
 * - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
 * 
 * –≠—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è,
 * –∫–æ—Ç–æ—Ä—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ—Ç–æ–∫–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.
 */

import { AssignmentStatus } from '@buddybot/database'
import { FlowAssignmentRepository, FlowAssignmentFilter, AssignmentStats, AssignmentWithDetails } from '../../repositories/FlowAssignmentRepository'
import { UserRepository } from '../../repositories/UserRepository'
import { FlowRepository } from '../../repositories/FlowRepository'
import { FlowAssignment, CreateFlowAssignmentInput, UpdateFlowAssignmentInput, DeadlineCheck, PauseReason } from '../../entities/FlowAssignment'
import { PaginationParams, RepositoryError, RepositoryErrorType } from '../../repositories/base/BaseRepository'
import { addDays, addBusinessDays } from 'date-fns'

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export interface AssignFlowInput {
  userId: string
  flowId: string
  buddyIds: string[]
  deadline?: Date
  customDeadlineDays?: number
  assignedBy: string
  reason?: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
 */
export interface BulkAssignFlowInput {
  flowId: string
  assignments: {
    userId: string
    buddyIds: string[]
    deadline?: Date
    customDeadlineDays?: number
  }[]
  assignedBy: string
  reason?: string
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
 */
export interface BulkAssignmentResult {
  successful: AssignmentWithDetails[]
  failed: {
    userId: string
    reason: string
    error: string
  }[]
  summary: {
    total: number
    successful: number
    failed: number
  }
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–∞—É–∑—É
 */
export interface PauseAssignmentInput {
  assignmentId: string
  reason: PauseReason | string
  pausedBy: string
  pauseNote?: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
 */
export interface ResumeAssignmentInput {
  assignmentId: string
  resumedBy: string
  adjustDeadline?: boolean
  resumeNote?: string
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
 */
export interface ExtendDeadlineInput {
  assignmentId: string
  newDeadline: Date
  reason: string
  extendedBy: string
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
 */
export interface AssignmentSearchResult {
  assignments: FlowAssignment[]
  pagination: {
    total: number
    page: number
    limit: number
    hasNextPage: boolean
    hasPreviousPage: boolean
  }
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Ç–æ–∫–æ–≤
 * 
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Ç–æ–∫–æ–≤.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
 * –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
 */
export class FlowAssignmentService {
  constructor(
    private assignmentRepository: FlowAssignmentRepository,
    private userRepository: UserRepository,
    private flowRepository: FlowRepository
  ) {}

  /**
   * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @returns —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
   */
  async assignFlow(input: AssignFlowInput): Promise<AssignmentWithDetails> {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await this.validateAssignmentInput(input)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    await this.validateAssignmentPermissions(input.assignedBy, input.buddyIds)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    await this.validateNoDuplicateAssignment(input.userId, input.flowId)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const assignmentData: CreateFlowAssignmentInput & { flowId: string } = {
      userId: input.userId,
      flowId: input.flowId,
      buddyIds: input.buddyIds,
      deadline: input.deadline,
      customDeadlineDays: input.customDeadlineDays
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ —Å–Ω–∞–ø—à–æ—Ç–æ–º
    const assignment = await this.assignmentRepository.createWithSnapshot(assignmentData)

    console.log(`üéØ –ù–∞–∑–Ω–∞—á–µ–Ω –ø–æ—Ç–æ–∫ "${assignment.flowSnapshot.title}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${assignment.user.name} (–Ω–∞–∑–Ω–∞—á–µ–Ω–æ ${input.assignedBy})`)

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    // await this.notificationService.sendFlowAssignedNotification(assignment)

    return assignment
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ç–æ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   */
  async bulkAssignFlow(input: BulkAssignFlowInput): Promise<BulkAssignmentResult> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    const assignedBy = await this.userRepository.findByIdOrThrow(input.assignedBy)
    if (!assignedBy.canAssignFlows()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
    const flow = await this.flowRepository.findByIdOrThrow(input.flowId)
    if (!flow.isActive) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫'
      )
    }

    const successful: AssignmentWithDetails[] = []
    const failed: { userId: string; reason: string; error: string }[] = []

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    for (const assignment of input.assignments) {
      try {
        const assignInput: AssignFlowInput = {
          userId: assignment.userId,
          flowId: input.flowId,
          buddyIds: assignment.buddyIds,
          deadline: assignment.deadline,
          customDeadlineDays: assignment.customDeadlineDays,
          assignedBy: input.assignedBy,
          reason: input.reason
        }

        const result = await this.assignFlow(assignInput)
        successful.push(result)
      } catch (error) {
        failed.push({
          userId: assignment.userId,
          reason: input.reason || '–ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
          error: error.message
        })
      }
    }

    const summary = {
      total: input.assignments.length,
      successful: successful.length,
      failed: failed.length
    }

    console.log(`üìä –ú–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${summary.successful}/${summary.total} —É—Å–ø–µ—à–Ω–æ`)

    return { successful, failed, summary }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ ID —Å –¥–µ—Ç–∞–ª—è–º–∏
   * 
   * @param assignmentId - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @returns –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–ª–∏ null
   */
  async getAssignmentWithDetails(assignmentId: string): Promise<AssignmentWithDetails | null> {
    return this.assignmentRepository.findByIdWithDetails(assignmentId)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ ID —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
   * 
   * @param assignmentId - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @returns –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
   */
  async getAssignmentWithDetailsOrThrow(assignmentId: string): Promise<AssignmentWithDetails> {
    const assignment = await this.assignmentRepository.findByIdWithDetails(assignmentId)
    if (!assignment) {
      throw new RepositoryError(
        RepositoryErrorType.NOT_FOUND,
        '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      )
    }
    return assignment
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param filter - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserAssignments(
    userId: string,
    filter?: Omit<FlowAssignmentFilter, 'userId'>,
    pagination?: PaginationParams
  ): Promise<AssignmentSearchResult> {
    const result = await this.assignmentRepository.findByUser(userId, filter, pagination)

    return {
      assignments: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
   * 
   * @param buddyId - ID –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
   * @param filter - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö
   */
  async getBuddyAssignments(
    buddyId: string,
    filter?: Omit<FlowAssignmentFilter, 'buddyIds'>,
    pagination?: PaginationParams
  ): Promise<AssignmentSearchResult> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞
    const buddy = await this.userRepository.findByIdOrThrow(buddyId)
    if (!buddy.canBeBuddy()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º'
      )
    }

    const result = await this.assignmentRepository.findByBuddy(buddyId, filter, pagination)

    return {
      assignments: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
   * 
   * @param assignmentId - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param startedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async startAssignment(assignmentId: string, startedBy: string): Promise<FlowAssignment> {
    const assignment = await this.assignmentRepository.findByIdOrThrow(assignmentId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    if (assignment.userId !== startedBy) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–¢–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞'
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedAssignment = await this.assignmentRepository.updateStatus(
      assignmentId,
      AssignmentStatus.IN_PROGRESS
    )

    console.log(`üöÄ –ù–∞—á–∞—Ç–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞: ${assignmentId} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${startedBy})`)

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞–º
    // await this.notificationService.sendFlowStartedNotification(updatedAssignment)

    return updatedAssignment
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
   * 
   * @param assignmentId - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param completedBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∞–µ—Ç
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async completeAssignment(assignmentId: string, completedBy: string): Promise<FlowAssignment> {
    const assignment = await this.assignmentRepository.findByIdOrThrow(assignmentId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    this.validateCompletionPermissions(assignment, completedBy)

    // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    // const isFullyCompleted = await this.progressService.isAssignmentFullyCompleted(assignmentId)
    // if (!isFullyCompleted) {
    //   throw new RepositoryError(
    //     RepositoryErrorType.VALIDATION_ERROR,
    //     '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã'
    //   )
    // }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedAssignment = await this.assignmentRepository.updateStatus(
      assignmentId,
      AssignmentStatus.COMPLETED
    )

    console.log(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞: ${assignmentId} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${completedBy})`)

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    // await this.notificationService.sendFlowCompletedNotification(updatedAssignment)
    // await this.achievementService.processFlowCompletion(updatedAssignment)

    return updatedAssignment
  }

  /**
   * –°—Ç–∞–≤–∏—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—É–∑—ã
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async pauseAssignment(input: PauseAssignmentInput): Promise<FlowAssignment> {
    const assignment = await this.assignmentRepository.findByIdOrThrow(input.assignmentId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞ –ø–∞—É–∑—É
    this.validatePausePermissions(assignment, input.pausedBy)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const updatedAssignment = await this.assignmentRepository.updateStatus(
      input.assignmentId,
      AssignmentStatus.PAUSED,
      {
        pausedById: input.pausedBy,
        pauseReason: input.reason
      }
    )

    console.log(`‚è∏Ô∏è –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–∞—É–∑—É: ${input.assignmentId} (–ø—Ä–∏—á–∏–Ω–∞: ${input.reason})`)

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // await this.notificationService.sendFlowPausedNotification(updatedAssignment, input.reason)

    return updatedAssignment
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async resumeAssignment(input: ResumeAssignmentInput): Promise<FlowAssignment> {
    const assignment = await this.assignmentRepository.findByIdOrThrow(input.assignmentId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.validateResumePermissions(assignment, input.resumedBy)

    if (!assignment.isPaused()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ'
      )
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const updatedAssignment = await this.assignmentRepository.updateStatus(
      input.assignmentId,
      AssignmentStatus.IN_PROGRESS
    )

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (input.adjustDeadline && assignment.pausedAt) {
      const pauseDuration = Date.now() - assignment.pausedAt.getTime()
      const pauseDays = Math.ceil(pauseDuration / (1000 * 60 * 60 * 24))
      const newDeadline = addBusinessDays(assignment.deadline, pauseDays)
      
      await this.assignmentRepository.updateDeadline(
        input.assignmentId,
        newDeadline,
        input.resumedBy,
        '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã'
      )
    }

    console.log(`‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${input.assignmentId} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${input.resumedBy})`)

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // await this.notificationService.sendFlowResumedNotification(updatedAssignment)

    return updatedAssignment
  }

  /**
   * –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
   * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async extendDeadline(input: ExtendDeadlineInput): Promise<FlowAssignment> {
    const assignment = await this.assignmentRepository.findByIdOrThrow(input.assignmentId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
    this.validateExtendDeadlinePermissions(assignment, input.extendedBy)

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω
    if (input.newDeadline <= assignment.deadline) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ'
      )
    }

    const updatedAssignment = await this.assignmentRepository.updateDeadline(
      input.assignmentId,
      input.newDeadline,
      input.extendedBy,
      input.reason
    )

    console.log(`üìÖ –ü—Ä–æ–¥–ª–µ–Ω –¥–µ–¥–ª–∞–π–Ω: ${input.assignmentId} –¥–æ ${input.newDeadline.toISOString().split('T')[0]}`)

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // await this.notificationService.sendDeadlineExtendedNotification(updatedAssignment, input.newDeadline)

    return updatedAssignment
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * 
   * @param assignmentId - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @param reason - –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã
   * @param cancelledBy - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–º–µ–Ω—è–µ—Ç
   * @returns –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   */
  async cancelAssignment(assignmentId: string, reason: string, cancelledBy: string): Promise<FlowAssignment> {
    const assignment = await this.assignmentRepository.findByIdOrThrow(assignmentId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    this.validateCancelPermissions(assignment, cancelledBy)

    const updatedAssignment = await this.assignmentRepository.updateStatus(
      assignmentId,
      AssignmentStatus.CANCELLED,
      {
        cancelledById: cancelledBy,
        reason
      }
    )

    console.log(`‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${assignmentId} (–ø—Ä–∏—á–∏–Ω–∞: ${reason})`)

    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // await this.notificationService.sendFlowCancelledNotification(updatedAssignment, reason)

    return updatedAssignment
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   */
  async getOverdueAssignments(pagination?: PaginationParams): Promise<AssignmentSearchResult> {
    const result = await this.assignmentRepository.findOverdue(pagination)

    return {
      assignments: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞
   * 
   * @param daysBeforeDeadline - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–æ–Ω–µ —Ä–∏—Å–∫–∞
   */
  async getAtRiskAssignments(
    daysBeforeDeadline: number = 2,
    pagination?: PaginationParams
  ): Promise<AssignmentSearchResult> {
    const result = await this.assignmentRepository.findAtRisk(daysBeforeDeadline, pagination)

    return {
      assignments: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param daysSinceActivity - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param pagination - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   * @returns –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   */
  async getInactiveAssignments(
    daysSinceActivity: number = 3,
    pagination?: PaginationParams
  ): Promise<AssignmentSearchResult> {
    const result = await this.assignmentRepository.findInactive(daysSinceActivity, pagination)

    return {
      assignments: result.data,
      pagination: {
        total: result.total,
        page: result.page,
        limit: result.limit,
        hasNextPage: result.hasNextPage,
        hasPreviousPage: result.hasPreviousPage
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–µ–¥–ª–∞–π–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param assignmentId - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * @returns –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ
   */
  async checkAssignmentDeadline(assignmentId: string): Promise<DeadlineCheck> {
    return this.assignmentRepository.checkDeadline(assignmentId)
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Å–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–¥–∞—á–∞)
   * 
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
   */
  async updateOverdueAssignments(): Promise<number> {
    const count = await this.assignmentRepository.updateOverdueStatus()
    
    if (count > 0) {
      console.log(`‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ ${count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π`)
    }

    return count
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
   * 
   * @param filter - —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @returns —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
   */
  async getAssignmentStats(filter?: FlowAssignmentFilter): Promise<AssignmentStats> {
    return this.assignmentRepository.getStats(filter)
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param input - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private async validateAssignmentInput(input: AssignFlowInput): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.userRepository.findByIdOrThrow(input.userId)
    if (!user.isActiveUser()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ—Ç–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞
    const flow = await this.flowRepository.findByIdOrThrow(input.flowId)
    if (!flow.isActive) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫'
      )
    }

    if (!flow.isReadyForAssignment()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ü–æ—Ç–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
    for (const buddyId of input.buddyIds) {
      const buddy = await this.userRepository.findByIdOrThrow(buddyId)
      if (!buddy.canMentorUser(user)) {
        throw new RepositoryError(
          RepositoryErrorType.VALIDATION_ERROR,
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${buddy.name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º –¥–ª—è ${user.name}`
        )
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤
   * 
   * @param assignedBy - ID –Ω–∞–∑–Ω–∞—á–∞—é—â–µ–≥–æ
   * @param buddyIds - ID –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤
   */
  private async validateAssignmentPermissions(assignedBy: string, buddyIds: string[]): Promise<void> {
    const assignor = await this.userRepository.findByIdOrThrow(assignedBy)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    if (!assignor.canAssignFlows()) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤'
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–Ω–∞—á–∞—é—â–∏–π —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
    if (!assignor.hasRole('ADMIN') && !buddyIds.includes(assignedBy)) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤'
      )
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
   * 
   * @param userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param flowId - ID –ø–æ—Ç–æ–∫–∞
   */
  private async validateNoDuplicateAssignment(userId: string, flowId: string): Promise<void> {
    const existingAssignments = await this.assignmentRepository.findByUser(userId, {
      flowId,
      status: ['NOT_STARTED', 'IN_PROGRESS', 'PAUSED']
    })

    if (existingAssignments.data.length > 0) {
      throw new RepositoryError(
        RepositoryErrorType.DUPLICATE,
        '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞'
      )
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param completedBy - ID –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ
   */
  private validateCompletionPermissions(assignment: FlowAssignment, completedBy: string): void {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    if (assignment.userId === completedBy) {
      return
    }

    // –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ
    if (assignment.isBuddy(completedBy)) {
      return
    }

    throw new RepositoryError(
      RepositoryErrorType.VALIDATION_ERROR,
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞ –ø–∞—É–∑—É
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param pausedBy - ID —Å—Ç–∞–≤—è—â–µ–≥–æ –Ω–∞ –ø–∞—É–∑—É
   */
  private validatePausePermissions(assignment: FlowAssignment, pausedBy: string): void {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑—É
    if (assignment.userId === pausedBy) {
      return
    }

    // –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–∞—É–∑—É
    if (assignment.isBuddy(pausedBy)) {
      return
    }

    throw new RepositoryError(
      RepositoryErrorType.VALIDATION_ERROR,
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–∞—É–∑—É'
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param resumedBy - ID –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—é—â–µ–≥–æ
   */
  private validateResumePermissions(assignment: FlowAssignment, resumedBy: string): void {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    if (assignment.userId === resumedBy) {
      return
    }

    // –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if (assignment.isBuddy(resumedBy)) {
      return
    }

    throw new RepositoryError(
      RepositoryErrorType.VALIDATION_ERROR,
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
    )
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param extendedBy - ID –ø—Ä–æ–¥–ª–µ–≤–∞—é—â–µ–≥–æ
   */
  private validateExtendDeadlinePermissions(assignment: FlowAssignment, extendedBy: string): void {
    // –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã
    if (!assignment.isBuddy(extendedBy)) {
      throw new RepositoryError(
        RepositoryErrorType.VALIDATION_ERROR,
        '–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã'
      )
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
   * 
   * @param assignment - –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
   * @param cancelledBy - ID –æ—Ç–º–µ–Ω—è—é—â–µ–≥–æ
   */
  private validateCancelPermissions(assignment: FlowAssignment, cancelledBy: string): void {
    // –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    if (assignment.isBuddy(cancelledBy)) {
      return
    }

    throw new RepositoryError(
      RepositoryErrorType.VALIDATION_ERROR,
      '–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'
    )
  }
}