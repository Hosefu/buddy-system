/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ BuddyBot API
 * 
 * –§–∞–π–ª: packages/api/src/server.ts
 * 
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç:
 * - Express —Å–µ—Ä–≤–µ—Ä
 * - Apollo GraphQL —Å–µ—Ä–≤–µ—Ä
 * - Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, CORS, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
 * - WebSocket –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
 * - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 */

import express from 'express'
import { createServer } from 'http'
import { ApolloServer } from '@apollo/server'
import { expressMiddleware } from '@apollo/server/express4'
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer'
import { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default'
import { WebSocketServer } from 'ws'
import { useServer } from 'graphql-ws/lib/use/ws'
import cors from 'cors'
import helmet from 'helmet'
import compression from 'compression'
import rateLimit from 'express-rate-limit'
import { PrismaClient } from '@prisma/client'
import Redis from 'ioredis'

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã
import { schema, createGraphQLContext, formatGraphQLError } from './schema'
import { authMiddleware } from './middleware/auth.middleware'
import { config } from './config'
import type { Context } from './types/context'

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
 */
export class BuddyBotServer {
  private app: express.Application
  private httpServer: any
  private apolloServer: ApolloServer<Context>
  private prisma: PrismaClient
  private redis?: Redis
  private wsServer?: WebSocketServer

  constructor() {
    this.app = express()
    this.prisma = new PrismaClient()
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if (config.REDIS_URL) {
      this.redis = new Redis(config.REDIS_URL, {
        retryDelayOnFailover: 100,
        maxRetriesPerRequest: 3,
        lazyConnect: true
      })
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async start(): Promise<void> {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ BuddyBot API —Å–µ—Ä–≤–µ—Ä–∞...')

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      await this.checkDatabaseConnection()
      
      // 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
      this.setupMiddleware()
      
      // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
      this.setupRoutes()
      
      // 4. –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
      this.httpServer = createServer(this.app)
      
      // 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
      if (config.ENABLE_SUBSCRIPTIONS) {
        await this.setupWebSocket()
      }
      
      // 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Apollo GraphQL —Å–µ—Ä–≤–µ—Ä
      await this.setupApolloServer()
      
      // 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
      this.setupGracefulShutdown()
      
      // 8. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      const port = config.PORT || 4000
      this.httpServer.listen(port, () => {
        console.log(`‚úÖ BuddyBot API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`)
        console.log(`üìä GraphQL endpoint: http://localhost:${port}/graphql`)
        
        if (config.GRAPHQL_PLAYGROUND) {
          console.log(`üéÆ GraphQL Playground: http://localhost:${port}/graphql`)
        }
        
        if (config.ENABLE_SUBSCRIPTIONS) {
          console.log(`üîå WebSocket subscriptions: ws://localhost:${port}/graphql`)
        }
        
        console.log(`üåê Environment: ${config.NODE_ENV}`)
        console.log(`üì¶ API Version: ${config.API_VERSION}`)
      })

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)
      process.exit(1)
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async checkDatabaseConnection(): Promise<void> {
    try {
      console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...')
      await this.prisma.$connect()
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
      if (this.redis) {
        console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...')
        await this.redis.ping()
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error)
      throw error
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
   */
  private setupMiddleware(): void {
    console.log('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware...')

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    this.app.use(helmet({
      contentSecurityPolicy: config.NODE_ENV === 'production',
      crossOriginEmbedderPolicy: false
    }))

    // CORS
    this.app.use(cors({
      origin: config.CORS_ORIGINS,
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'x-apollo-operation-name']
    }))

    // –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    this.app.use(compression())

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ limit: '10mb' }))
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }))

    // Rate limiting
    const limiter = rateLimit({
      windowMs: config.RATE_LIMIT_WINDOW_MS,
      max: config.RATE_LIMIT_MAX,
      message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
        retryAfter: config.RATE_LIMIT_WINDOW_MS / 1000
      },
      standardHeaders: true,
      legacyHeaders: false
    })
    this.app.use('/graphql', limiter)

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.app.use((req, res, next) => {
      const start = Date.now()
      res.on('finish', () => {
        const duration = Date.now() - start
        console.log(`${req.method} ${req.path} ${res.statusCode} - ${duration}ms`)
      })
      next()
    })

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    this.app.use(authMiddleware.authenticate)

    console.log('‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
   */
  private setupRoutes(): void {
    console.log('üõ£Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...')

    // Health check
    this.app.get('/health', async (req, res) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        await this.prisma.$queryRaw`SELECT 1`
        const dbHealthy = true

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        let redisHealthy = true
        if (this.redis) {
          try {
            await this.redis.ping()
          } catch (error) {
            redisHealthy = false
          }
        }

        const health = {
          status: dbHealthy && redisHealthy ? 'healthy' : 'unhealthy',
          timestamp: new Date().toISOString(),
          version: config.API_VERSION,
          environment: config.NODE_ENV,
          services: {
            database: dbHealthy ? 'healthy' : 'unhealthy',
            redis: this.redis ? (redisHealthy ? 'healthy' : 'unhealthy') : 'not_configured',
            graphql: 'healthy'
          },
          uptime: process.uptime()
        }

        res.status(dbHealthy && redisHealthy ? 200 : 503).json(health)
      } catch (error) {
        res.status(503).json({
          status: 'unhealthy',
          error: 'Health check failed',
          timestamp: new Date().toISOString()
        })
      }
    })

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ API
    this.app.get('/version', (req, res) => {
      res.json({
        version: config.API_VERSION,
        environment: config.NODE_ENV,
        buildDate: process.env.BUILD_DATE || new Date().toISOString(),
        nodeVersion: process.version,
        uptime: process.uptime()
      })
    })

    // –ú–µ—Ç—Ä–∏–∫–∏ (–±–∞–∑–æ–≤—ã–µ)
    this.app.get('/metrics', (req, res) => {
      const memUsage = process.memoryUsage()
      res.json({
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        memory: {
          rss: `${Math.round(memUsage.rss / 1024 / 1024)}MB`,
          heapTotal: `${Math.round(memUsage.heapTotal / 1024 / 1024)}MB`,
          heapUsed: `${Math.round(memUsage.heapUsed / 1024 / 1024)}MB`,
          external: `${Math.round(memUsage.external / 1024 / 1024)}MB`
        },
        cpu: process.cpuUsage()
      })
    })

    // Telegram webhook
    this.app.post('/webhooks/telegram', express.raw({ type: 'application/json' }), (req, res) => {
      try {
        console.log('üì± –ü–æ–ª—É—á–µ–Ω Telegram webhook')
        // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook
        // const update = JSON.parse(req.body.toString())
        // await telegramBotHandler.handleUpdate(update)
        
        res.status(200).json({ ok: true })
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook:', error)
        res.status(500).json({ ok: false, error: 'Internal server error' })
      }
    })

    // Fallback –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    this.app.use('*', (req, res) => {
      res.status(404).json({
        error: 'Not Found',
        message: `Route ${req.method} ${req.originalUrl} not found`,
        availableRoutes: [
          'GET /health',
          'GET /version', 
          'GET /metrics',
          'POST /graphql',
          'GET /graphql (playground)',
          'POST /webhooks/telegram'
        ]
      })
    })

    console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –¥–ª—è GraphQL –ø–æ–¥–ø–∏—Å–æ–∫
   */
  private async setupWebSocket(): Promise<void> {
    console.log('üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫...')

    this.wsServer = new WebSocketServer({
      server: this.httpServer,
      path: '/graphql'
    })

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    const serverCleanup = useServer({
      schema,
      context: async (ctx) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const token = ctx.connectionParams?.authorization as string ||
                     ctx.connectionParams?.token as string

        if (token) {
          try {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            const authContext = { token, user: undefined, permissions: [] }
            // TODO: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è WebSocket
            return createGraphQLContext(authContext)
          } catch (error) {
            console.error('WebSocket auth error:', error)
            throw new Error('Unauthorized')
          }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        return createGraphQLContext({ permissions: [] })
      },
      onConnect: (ctx) => {
        console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
      },
      onDisconnect: (ctx) => {
        console.log('üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
      }
    }, this.wsServer)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º cleanup —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è graceful shutdown
    this.wsServer.on('close', serverCleanup)

    console.log('‚úÖ WebSocket –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Apollo GraphQL —Å–µ—Ä–≤–µ—Ä–∞
   */
  private async setupApolloServer(): Promise<void> {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Apollo GraphQL —Å–µ—Ä–≤–µ—Ä–∞...')

    this.apolloServer = new ApolloServer<Context>({
      schema,
      formatError: formatGraphQLError,
      introspection: config.GRAPHQL_INTROSPECTION,
      
      plugins: [
        // Graceful shutdown –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
        ApolloServerPluginDrainHttpServer({ httpServer: this.httpServer }),
        
        // Landing page –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config.GRAPHQL_PLAYGROUND 
          ? ApolloServerPluginLandingPageLocalDefault({ footer: false })
          : ApolloServerPluginLandingPageLocalDefault({ footer: false }),
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        {
          requestDidStart() {
            return {
              didResolveOperation({ operationName, variables, request }) {
                if (config.NODE_ENV === 'development') {
                  console.log(`üìä GraphQL –æ–ø–µ—Ä–∞—Ü–∏—è: ${operationName || 'Anonymous'}`)
                }
              },
              didEncounterErrors({ errors, operationName, request }) {
                console.error(`‚ùå GraphQL –æ—à–∏–±–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationName}:`)
                errors.forEach(error => {
                  console.error(`  - ${error.message}`)
                  if (config.NODE_ENV === 'development') {
                    console.error(`    Path: ${error.path?.join('.')}`)
                    console.error(`    Extensions:`, error.extensions)
                  }
                })
              },
              willSendResponse({ response }) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                response.http?.headers.set('X-API-Version', config.API_VERSION)
              }
            }
          }
        }
      ]
    })

    await this.apolloServer.start()

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º Apollo –∫ Express
    this.app.use(
      '/graphql',
      expressMiddleware(this.apolloServer, {
        context: async ({ req, res }) => {
          // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ Express middleware
          const authContext = authMiddleware.createAuthContext(req as any)
          const context = createGraphQLContext(authContext)
          
          // –î–æ–±–∞–≤–ª—è–µ–º req/res –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω—ã
          context.req = req
          context.res = res
          
          return context
        }
      })
    )

    console.log('‚úÖ Apollo GraphQL —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
   */
  private setupGracefulShutdown(): void {
    const shutdown = async (signal: string) => {
      console.log(`\nüì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...`)

      try {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Apollo —Å–µ—Ä–≤–µ—Ä
        if (this.apolloServer) {
          await this.apolloServer.stop()
          console.log('‚úÖ Apollo —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
        if (this.wsServer) {
          this.wsServer.close()
          console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        if (this.httpServer) {
          this.httpServer.close(() => {
            console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
          })
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        await this.prisma.$disconnect()
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ')

        if (this.redis) {
          this.redis.disconnect()
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∑–∞–∫—Ä—ã—Ç–æ')
        }

        console.log('üëã Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω')
        process.exit(0)

      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è shutdown:', error)
        process.exit(1)
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    process.on('SIGTERM', () => shutdown('SIGTERM'))
    process.on('SIGINT', () => shutdown('SIGINT'))

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason)
      // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    })

    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error)
      shutdown('UNCAUGHT_EXCEPTION')
    })
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
   */
  async stop(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')

    if (this.apolloServer) {
      await this.apolloServer.stop()
    }

    if (this.httpServer) {
      this.httpServer.close()
    }

    await this.prisma.$disconnect()

    if (this.redis) {
      this.redis.disconnect()
    }

    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é)
 */
async function main() {
  const server = new BuddyBotServer()
  await server.start()
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error)
    process.exit(1)
  })
}

export { BuddyBotServer }
export default BuddyBotServer