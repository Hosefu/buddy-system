/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä BuddyBot API
 * 
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ–≥–æ API —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç:
 * - Express —Å–µ—Ä–≤–µ—Ä —Å middleware
 * - GraphQL API —Å Apollo Server
 * - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * - Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–µ—Å—Å–∏–π
 * - Telegram webhook
 * - –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * - Graceful shutdown
 * 
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * Express ‚Üí Middleware ‚Üí Apollo GraphQL ‚Üí Services ‚Üí Repositories ‚Üí Database
 */

import express from 'express'
import { ApolloServer } from 'apollo-server-express'
import { createServer } from 'http'
import { WebSocketServer } from 'ws'
import { useServer } from 'graphql-ws/lib/use/ws'
import cors from 'cors'
import helmet from 'helmet'
import compression from 'compression'
import rateLimit from 'express-rate-limit'
import morgan from 'morgan'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å—Ö–µ–º–∞
import { config, logConfig, isProduction, isDevelopment } from './config'
import { schema, createGraphQLContext } from './schema'

// Middleware
import { AuthMiddleware, jwtService } from './middleware/auth.middleware'
import { errorHandlerMiddleware, notFoundMiddleware, setupGlobalErrorHandlers, formatGraphQLError } from './middleware/error-handler.middleware'

// –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
import { prisma, checkDatabaseConnection, disconnectPrisma } from '@buddybot/database/client'

// –°–µ—Ä–≤–∏—Å—ã –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
import { UserRepository } from './core/repositories/UserRepository'
import { FlowRepository } from './core/repositories/FlowRepository'
import { FlowAssignmentRepository } from './core/repositories/FlowAssignmentRepository'
import { UserService } from './core/services/user/UserService'
import { FlowService } from './core/services/flow/FlowService'
import { FlowAssignmentService } from './core/services/assignment/FlowAssignmentService'

/**
 * –ö–ª–∞—Å—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class BuddyBotServer {
  private app: express.Application
  private httpServer: any
  private apolloServer: ApolloServer | null = null
  private wsServer: WebSocketServer | null = null
  
  // –°–µ—Ä–≤–∏—Å—ã
  private userService: UserService
  private flowService: FlowService
  private assignmentService: FlowAssignmentService
  private authMiddleware: AuthMiddleware

  constructor() {
    this.app = express()
    this.httpServer = createServer(this.app)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    const userRepository = new UserRepository()
    const flowRepository = new FlowRepository()
    const assignmentRepository = new FlowAssignmentRepository()
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    this.userService = new UserService(userRepository)
    this.flowService = new FlowService(flowRepository, userRepository)
    this.assignmentService = new FlowAssignmentService(assignmentRepository, userRepository, flowRepository)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.authMiddleware = new AuthMiddleware(this.userService, jwtService)
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ middleware Express
   */
  private setupExpressMiddleware(): void {
    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express middleware...')

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    this.app.use(helmet({
      contentSecurityPolicy: isDevelopment ? false : undefined,
      crossOriginEmbedderPolicy: false
    }))

    // CORS
    this.app.use(cors({
      origin: config.CORS_ORIGIN === '*' ? true : config.CORS_ORIGIN.split(','),
      credentials: config.CORS_CREDENTIALS,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
    }))

    // –°–∂–∞—Ç–∏–µ
    this.app.use(compression())

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ limit: '10mb' }))
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }))

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (isDevelopment) {
      this.app.use(morgan('dev'))
    } else {
      this.app.use(morgan('combined'))
    }

    // Rate limiting
    const limiter = rateLimit({
      windowMs: config.RATE_LIMIT_WINDOW_MS,
      max: config.RATE_LIMIT_MAX_REQUESTS,
      message: {
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        code: 'RATE_LIMIT_EXCEEDED'
      },
      standardHeaders: true,
      legacyHeaders: false,
      // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è GraphQL endpoint
      skip: (req) => req.path === '/graphql' && isProduction === false
    })

    this.app.use(limiter)

    console.log('‚úÖ Express middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
   */
  private setupRoutes(): void {
    console.log('üõ£Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    this.app.get('/health', async (req, res) => {
      try {
        const dbHealthy = await checkDatabaseConnection()
        
        const health = {
          status: dbHealthy ? 'healthy' : 'unhealthy',
          timestamp: new Date().toISOString(),
          version: process.env.npm_package_version || '1.0.0',
          environment: config.NODE_ENV,
          services: {
            database: dbHealthy ? 'healthy' : 'unhealthy',
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            redis: 'unknown',
            telegram: 'unknown'
          }
        }

        res.status(dbHealthy ? 200 : 503).json(health)
      } catch (error) {
        res.status(503).json({
          status: 'unhealthy',
          error: 'Health check failed',
          timestamp: new Date().toISOString()
        })
      }
    })

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ API
    this.app.get('/version', (req, res) => {
      res.json({
        version: process.env.npm_package_version || '1.0.0',
        apiVersion: config.API_VERSION,
        environment: config.NODE_ENV,
        buildDate: process.env.BUILD_DATE || new Date().toISOString()
      })
    })

    // Telegram webhook (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)
    this.app.post('/webhooks/telegram', (req, res) => {
      // TODO: –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook
      console.log('üì± –ü–æ–ª—É—á–µ–Ω Telegram webhook:', req.body)
      res.status(200).json({ ok: true })
    })

    console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Apollo GraphQL —Å–µ—Ä–≤–µ—Ä
   */
  private async setupApolloServer(): Promise<void> {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Apollo GraphQL —Å–µ—Ä–≤–µ—Ä–∞...')

    this.apolloServer = new ApolloServer({
      schema,
      context: ({ req, res }) => {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const authContext = this.authMiddleware.createAuthContext(req as any)
        return createGraphQLContext(authContext)
      },
      formatError: formatGraphQLError,
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      introspection: config.GRAPHQL_INTROSPECTION,
      
      // –ü–ª–∞–≥–∏–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –º–µ—Ç—Ä–∏–∫
      plugins: [
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        {
          requestDidStart() {
            return {
              didResolveOperation({ operationName, variables }) {
                if (isDevelopment) {
                  console.log(`üìä GraphQL –æ–ø–µ—Ä–∞—Ü–∏—è: ${operationName}`)
                }
              },
              didEncounterErrors({ errors, operationName }) {
                console.error(`‚ùå GraphQL –æ—à–∏–±–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ ${operationName}:`, errors)
              }
            }
          }
        },
        
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω—ã –¥–ª—è Apollo Studio, –µ—Å–ª–∏ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        // ...(config.APOLLO_STUDIO_API_KEY ? [ApolloServerPluginUsageReporting()] : [])
      ],

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è production
      ...(isProduction && {
        introspection: false,
        debug: false
      })
    })

    await this.apolloServer.start()
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º middleware Apollo –∫ Express
    this.apolloServer.applyMiddleware({ 
      app: this.app, 
      path: '/graphql',
      cors: false // CORS —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ Express
    })

    console.log(`‚úÖ GraphQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ /graphql`)
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
   */
  private setupWebSocketServer(): void {
    console.log('üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫...')

    this.wsServer = new WebSocketServer({
      server: this.httpServer,
      path: '/graphql'
    })

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º GraphQL –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ WebSocket
    useServer(
      {
        schema,
        context: async (ctx, msg, args) => {
          // TODO: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
          // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ connection params
          return createGraphQLContext({
            user: undefined,
            isAuthenticated: false,
            hasRole: () => false,
            hasPermission: () => false,
            requireAuth: () => { throw new Error('WebSocket authentication required') },
            requireRole: () => { throw new Error('WebSocket authentication required') }
          })
        },
        onConnect: async (ctx) => {
          console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        },
        onDisconnect: async (ctx) => {
          console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ')
        }
      },
      this.wsServer
    )

    console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
   */
  private setupErrorHandling(): void {
    console.log('üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...')

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
    setupGlobalErrorHandlers()

    // Middleware –¥–ª—è 404 –æ—à–∏–±–æ–∫
    this.app.use(notFoundMiddleware)

    // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Express
    this.app.use(errorHandlerMiddleware)

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
   */
  private async checkExternalServices(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbConnected = await checkDatabaseConnection()
    if (!dbConnected) {
      throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    }
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞')

    // TODO: –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    // TODO: –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram Bot API

    console.log('‚úÖ –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã')
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç graceful shutdown
   */
  private setupGracefulShutdown(): void {
    const shutdown = async (signal: string) => {
      console.log(`\nüì∂ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...`)

      // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      this.httpServer.close((err) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞:', err)
        } else {
          console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç')
        }
      })

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º Apollo Server
      if (this.apolloServer) {
        await this.apolloServer.stop()
        console.log('‚úÖ Apollo Server –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
      if (this.wsServer) {
        this.wsServer.close()
        console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç')
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
      try {
        await disconnectPrisma()
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ')
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', error)
      }

      // TODO: –ó–∞–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (Redis, –≤–Ω–µ—à–Ω–∏–µ API)

      console.log('üëã Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω')
      process.exit(0)
    }

    process.on('SIGTERM', () => shutdown('SIGTERM'))
    process.on('SIGINT', () => shutdown('SIGINT'))
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
   */
  async start(): Promise<void> {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ BuddyBot API —Å–µ—Ä–≤–µ—Ä–∞...')
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      logConfig()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
      await this.checkExternalServices()

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      this.setupExpressMiddleware()
      this.setupRoutes()
      await this.setupApolloServer()
      this.setupWebSocketServer()
      this.setupErrorHandling()
      this.setupGracefulShutdown()

      // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
      this.httpServer.listen(config.PORT, () => {
        console.log('\nüéâ BuddyBot API —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')
        console.log(`üìç HTTP —Å–µ—Ä–≤–µ—Ä: http://localhost:${config.PORT}`)
        console.log(`üöÄ GraphQL API: http://localhost:${config.PORT}/graphql`)
        
        if (config.GRAPHQL_PLAYGROUND) {
          console.log(`üéÆ GraphQL Playground: http://localhost:${config.PORT}/graphql`)
        }
        
        console.log(`üîå WebSocket (–ø–æ–¥–ø–∏—Å–∫–∏): ws://localhost:${config.PORT}/graphql`)
        console.log(`‚ù§Ô∏è Health check: http://localhost:${config.PORT}/health`)
        console.log(`üìã –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${config.NODE_ENV}`)
        console.log('üìñ API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n')
      })

    } catch (error) {
      console.error('üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error)
      process.exit(1)
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
   */
  async stop(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...')
    
    if (this.httpServer) {
      this.httpServer.close()
    }
    
    if (this.apolloServer) {
      await this.apolloServer.stop()
    }
    
    await disconnectPrisma()
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  }
}

/**
 * –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
 */
async function bootstrap() {
  const server = new BuddyBotServer()
  await server.start()
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ import)
if (require.main === module) {
  bootstrap().catch((error) => {
    console.error('üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error)
    process.exit(1)
  })
}

export { BuddyBotServer }